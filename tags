!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
#	plugged/minimap.vim/plugin/minimap.vim	/^    nnoremap <silent> # #:call minimap#vim#UpdateColorSearch(1)<CR>$/;"	m
$PERL6_EXCEPTIONS_HANDLER	plugged/ale/ale_linters/perl6/perl6.vim	/^let $PERL6_EXCEPTIONS_HANDLER = 'JSON'$/;"	v
$RAKUDO_ERROR_COLOR	plugged/ale/ale_linters/perl6/perl6.vim	/^let $RAKUDO_ERROR_COLOR = 0$/;"	v
) require	plugged/toggleterm.nvim/tests/state_spec.lua	/^  after_each(function() require("toggleterm.terminal").__reset() end)$/;"	f
) require	plugged/toggleterm.nvim/tests/terminal_spec.lua	/^  after_each(function() require("toggleterm.terminal").__reset() end)$/;"	f
) self:__spawn	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^    api.nvim_buf_call(self.bufnr, function() self:__spawn() end)$/;"	f
) ui.hl_term	plugged/toggleterm.nvim/lua/toggleterm.lua	/^          api.nvim_win_call(term.window, function() ui.hl_term(term) end)$/;"	f
*	plugged/minimap.vim/plugin/minimap.vim	/^    nnoremap <silent> * *:call minimap#vim#UpdateColorSearch(1)<CR>$/;"	m
, capture	plugged/nvim-window-picker/lua/window-picker/utf-8.lua	/^					table.insert(matcher.functions, capture(tonumber(c)))$/;"	f
, captureStart	plugged/nvim-window-picker/lua/window-picker/utf-8.lua	/^					table.insert(matcher.functions, captureStart(cs[#cs]))$/;"	f
, captureStop	plugged/nvim-window-picker/lua/window-picker/utf-8.lua	/^					table.insert(matcher.functions, captureStop(cap))$/;"	f
, function	plugged/nvim-window-picker/lua/window-picker/utf-8.lua	/^	table.insert(matcher.functions, function()$/;"	f
, function	plugged/toggleterm.nvim/tests/terminal_spec.lua	/^    it("should execute the same regardless whether shell is a string or a function", function()$/;"	f
, minus	plugged/nvim-window-picker/lua/window-picker/utf-8.lua	/^						table.insert(matcher.functions, minus(lastFunc))$/;"	f
, question	plugged/nvim-window-picker/lua/window-picker/utf-8.lua	/^						table.insert(matcher.functions, question(lastFunc))$/;"	f
, simple	plugged/nvim-window-picker/lua/window-picker/utf-8.lua	/^						table.insert(matcher.functions, simple(lastFunc))$/;"	f
, simple	plugged/nvim-window-picker/lua/window-picker/utf-8.lua	/^		table.insert(matcher.functions, simple(lastFunc))$/;"	f
, star	plugged/nvim-window-picker/lua/window-picker/utf-8.lua	/^						table.insert(matcher.functions, star(lastFunc))$/;"	f
<C-G>S	plugged/vim-surround/plugin/surround.vim	/^    imap      <C-G>S <Plug>ISurround$/;"	m
<C-G>s	plugged/vim-surround/plugin/surround.vim	/^    imap      <C-G>s <Plug>Isurround$/;"	m
<C-S>	plugged/vim-surround/plugin/surround.vim	/^      imap    <C-S> <Plug>Isurround$/;"	m
<C-l>	plugged/vim-pydocstring/ftplugin/python/pydocstring.vim	/^    nmap <silent> <buffer> <C-l> <Plug>(pydocstring)$/;"	m
<C-q>	plugged/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> <C-q> <NOP>$/;"	m
<C-v>	plugged/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> <C-v> <NOP>$/;"	m
<CR>	plugged/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> <CR> :call ale#preview#OpenSelection()<CR>$/;"	m
<Plug>(ale_code_action)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_code_action) :ALECodeAction<Return>$/;"	m
<Plug>(ale_complete)	plugged/ale/plugin/ale.vim	/^inoremap <silent> <Plug>(ale_complete) <C-\\><C-O>:ALEComplete<Return>$/;"	m
<Plug>(ale_detail)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_detail) :ALEDetail<Return>$/;"	m
<Plug>(ale_disable)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_disable) :ALEDisable<Return>$/;"	m
<Plug>(ale_disable_buffer)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_disable_buffer) :ALEDisableBuffer<Return>$/;"	m
<Plug>(ale_documentation)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_documentation) :ALEDocumentation<Return>$/;"	m
<Plug>(ale_enable)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_enable) :ALEEnable<Return>$/;"	m
<Plug>(ale_enable_buffer)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_enable_buffer) :ALEEnableBuffer<Return>$/;"	m
<Plug>(ale_filerename)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_filerename) :ALEFileRename<Return>$/;"	m
<Plug>(ale_find_references)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_find_references) :ALEFindReferences<Return>$/;"	m
<Plug>(ale_first)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_first) :ALEFirst<Return>$/;"	m
<Plug>(ale_fix)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_fix) :ALEFix<Return>$/;"	m
<Plug>(ale_go_to_definition)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_go_to_definition) :ALEGoToDefinition<Return>$/;"	m
<Plug>(ale_go_to_definition_in_split)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_go_to_definition_in_split) :ALEGoToDefinition -split<Return>$/;"	m
<Plug>(ale_go_to_definition_in_tab)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_go_to_definition_in_tab) :ALEGoToDefinition -tab<Return>$/;"	m
<Plug>(ale_go_to_definition_in_vsplit)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_go_to_definition_in_vsplit) :ALEGoToDefinition -vsplit<Return>$/;"	m
<Plug>(ale_go_to_implementation)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_go_to_implementation) :ALEGoToImplementation<Return>$/;"	m
<Plug>(ale_go_to_implementation_in_split)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_go_to_implementation_in_split) :ALEGoToImplementation -split<Return>$/;"	m
<Plug>(ale_go_to_implementation_in_tab)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_go_to_implementation_in_tab) :ALEGoToImplementation -tab<Return>$/;"	m
<Plug>(ale_go_to_implementation_in_vsplit)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_go_to_implementation_in_vsplit) :ALEGoToImplementation -vsplit<Return>$/;"	m
<Plug>(ale_go_to_type_definition)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_go_to_type_definition) :ALEGoToTypeDefinition<Return>$/;"	m
<Plug>(ale_go_to_type_definition_in_split)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_go_to_type_definition_in_split) :ALEGoToTypeDefinition -split<Return>$/;"	m
<Plug>(ale_go_to_type_definition_in_tab)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_go_to_type_definition_in_tab) :ALEGoToTypeDefinition -tab<Return>$/;"	m
<Plug>(ale_go_to_type_definition_in_vsplit)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_go_to_type_definition_in_vsplit) :ALEGoToTypeDefinition -vsplit<Return>$/;"	m
<Plug>(ale_hover)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_hover) :ALEHover<Return>$/;"	m
<Plug>(ale_import)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_import) :ALEImport<Return>$/;"	m
<Plug>(ale_info)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_info) :ALEInfo<Return>$/;"	m
<Plug>(ale_info_clipboard)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_info_clipboard) :ALEInfo -clipboard<Return>$/;"	m
<Plug>(ale_info_echo)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_info_echo) :ALEInfo -echo<Return>$/;"	m
<Plug>(ale_info_preview)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_info_preview) :ALEInfo -preview<Return>$/;"	m
<Plug>(ale_last)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_last) :ALELast<Return>$/;"	m
<Plug>(ale_lint)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_lint) :ALELint<Return>$/;"	m
<Plug>(ale_next)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_next) :ALENext<Return>$/;"	m
<Plug>(ale_next_error)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_next_error) :ALENext -error<Return>$/;"	m
<Plug>(ale_next_warning)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_next_warning) :ALENext -warning<Return>$/;"	m
<Plug>(ale_next_wrap)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_next_wrap) :ALENextWrap<Return>$/;"	m
<Plug>(ale_next_wrap_error)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_next_wrap_error) :ALENext -wrap -error<Return>$/;"	m
<Plug>(ale_next_wrap_warning)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_next_wrap_warning) :ALENext -wrap -warning<Return>$/;"	m
<Plug>(ale_previous)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_previous) :ALEPrevious<Return>$/;"	m
<Plug>(ale_previous_error)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_previous_error) :ALEPrevious -error<Return>$/;"	m
<Plug>(ale_previous_warning)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_previous_warning) :ALEPrevious -warning<Return>$/;"	m
<Plug>(ale_previous_wrap)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_previous_wrap) :ALEPreviousWrap<Return>$/;"	m
<Plug>(ale_previous_wrap_error)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_previous_wrap_error) :ALEPrevious -wrap -error<Return>$/;"	m
<Plug>(ale_previous_wrap_warning)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_previous_wrap_warning) :ALEPrevious -wrap -warning<Return>$/;"	m
<Plug>(ale_rename)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_rename) :ALERename<Return>$/;"	m
<Plug>(ale_repeat_selection)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_repeat_selection) :ALERepeatSelection<Return>$/;"	m
<Plug>(ale_reset)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_reset) :ALEReset<Return>$/;"	m
<Plug>(ale_reset_buffer)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_reset_buffer) :ALEResetBuffer<Return>$/;"	m
<Plug>(ale_show_completion_menu)	plugged/ale/autoload/ale/completion.vim	/^cnoremap <silent> <Plug>(ale_show_completion_menu) <Nop>$/;"	m
<Plug>(ale_show_completion_menu)	plugged/ale/autoload/ale/completion.vim	/^inoremap <silent> <Plug>(ale_show_completion_menu) <C-x><C-o><C-p>$/;"	m
<Plug>(ale_show_completion_menu)	plugged/ale/autoload/ale/completion.vim	/^nnoremap <silent> <Plug>(ale_show_completion_menu) :call ale#completion#RestoreCompletionOptions()<CR>$/;"	m
<Plug>(ale_show_completion_menu)	plugged/ale/autoload/ale/completion.vim	/^onoremap <silent> <Plug>(ale_show_completion_menu) <Nop>$/;"	m
<Plug>(ale_show_completion_menu)	plugged/ale/autoload/ale/completion.vim	/^vnoremap <silent> <Plug>(ale_show_completion_menu) <Nop>$/;"	m
<Plug>(ale_toggle)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_toggle) :ALEToggle<Return>$/;"	m
<Plug>(ale_toggle_buffer)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_toggle_buffer) :ALEToggleBuffer<Return>$/;"	m
<Plug>(multiple-cursors-apply)	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^inoremap <silent> <Plug>(multiple-cursors-apply) <C-o>:call <SID>apply_user_input_next('i')<CR>$/;"	m
<Plug>(multiple-cursors-apply)	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^nnoremap <silent> <Plug>(multiple-cursors-apply) :call <SID>apply_user_input_next('n')<CR>$/;"	m
<Plug>(multiple-cursors-detect)	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^inoremap <silent> <Plug>(multiple-cursors-detect) <C-o>:call <SID>detect_bad_input()<CR>$/;"	m
<Plug>(multiple-cursors-detect)	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^nnoremap <silent> <Plug>(multiple-cursors-detect) :call <SID>detect_bad_input()<CR>$/;"	m
<Plug>(multiple-cursors-input)	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^inoremap <silent> <Plug>(multiple-cursors-input) <C-o>:call <SID>process_user_input()<CR>$/;"	m
<Plug>(multiple-cursors-input)	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^nnoremap <silent> <Plug>(multiple-cursors-input) :call <SID>process_user_input()<CR>$/;"	m
<Plug>(multiple-cursors-new)	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^nnoremap <silent> <Plug>(multiple-cursors-new) :<C-u>call multiple_cursors#new('v', 0)<CR>$/;"	m
<Plug>(multiple-cursors-new-word)	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^nnoremap <silent> <Plug>(multiple-cursors-new-word) :<C-u>call multiple_cursors#new('v', 1)<CR>$/;"	m
<Plug>(multiple-cursors-prev)	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^nnoremap <silent> <Plug>(multiple-cursors-prev) :<C-u>call multiple_cursors#prev()<CR>$/;"	m
<Plug>(multiple-cursors-skip)	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^nnoremap <silent> <Plug>(multiple-cursors-skip) :<C-u>call multiple_cursors#skip()<CR>$/;"	m
<Plug>(multiple-cursors-wait)	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^inoremap <silent> <Plug>(multiple-cursors-wait) <C-o>:call <SID>wait_for_user_input('')<CR>$/;"	m
<Plug>(multiple-cursors-wait)	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^nnoremap <silent> <Plug>(multiple-cursors-wait) :call <SID>wait_for_user_input('')<CR>$/;"	m
<Plug>(pydocstring)	plugged/vim-pydocstring/ftplugin/python/pydocstring.vim	/^nnoremap <silent> <buffer> <Plug>(pydocstring) :call pydocstring#insert()<CR>$/;"	m
<Plug>CSurround	plugged/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>CSurround  :<C-U>call <SID>changesurround(1)<CR>$/;"	m
<Plug>Csurround	plugged/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>Csurround  :<C-U>call <SID>changesurround()<CR>$/;"	m
<Plug>Dsurround	plugged/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>Dsurround  :<C-U>call <SID>dosurround(<SID>inputtarget())<CR>$/;"	m
<Plug>ISurround	plugged/vim-surround/plugin/surround.vim	/^inoremap <silent> <Plug>ISurround  <C-R>=<SID>insert(1)<CR>$/;"	m
<Plug>Isurround	plugged/vim-surround/plugin/surround.vim	/^inoremap <silent> <Plug>Isurround  <C-R>=<SID>insert()<CR>$/;"	m
<Plug>SurroundRepeat	plugged/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>SurroundRepeat .$/;"	m
<Plug>VSurround	plugged/vim-surround/plugin/surround.vim	/^vnoremap <silent> <Plug>VSurround  :<C-U>call <SID>opfunc(visualmode(),visualmode() ==# 'V' ? 1 : 0)<CR>$/;"	m
<Plug>VgSurround	plugged/vim-surround/plugin/surround.vim	/^vnoremap <silent> <Plug>VgSurround :<C-U>call <SID>opfunc(visualmode(),visualmode() ==# 'V' ? 0 : 1)<CR>$/;"	m
<Plug>YSsurround	plugged/vim-surround/plugin/surround.vim	/^nnoremap <expr>   <Plug>YSsurround <SID>opfunc2('setup').'_'$/;"	m
<Plug>YSurround	plugged/vim-surround/plugin/surround.vim	/^nnoremap <expr>   <Plug>YSurround  <SID>opfunc2('setup')$/;"	m
<Plug>Yssurround	plugged/vim-surround/plugin/surround.vim	/^nnoremap <expr>   <Plug>Yssurround '^'.v:count1.<SID>opfunc('setup').'g_'$/;"	m
<Plug>Ysurround	plugged/vim-surround/plugin/surround.vim	/^nnoremap <expr>   <Plug>Ysurround  <SID>opfunc('setup')$/;"	m
<S-v>	plugged/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> <S-v> <NOP>$/;"	m
<space>	plugged/ale/ftplugin/ale-info.vim	/^nnoremap <buffer> <silent> <space> :call ALEInfoOpenHelp()<CR>$/;"	m
A	plugged/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> A <NOP>$/;"	m
ALEBufferFixGroup	plugged/ale/autoload/ale/fix.vim	/^augroup ALEBufferFixGroup$/;"	a
ALECleanupGroup	plugged/ale/plugin/ale.vim	/^augroup ALECleanupGroup$/;"	a
ALECodeAction	plugged/ale/plugin/ale.vim	/^command! -bar -range ALECodeAction :call ale#codefix#Execute(<range>)$/;"	c
ALEComplete	plugged/ale/plugin/ale.vim	/^command! -bar ALEComplete :call ale#completion#GetCompletions('ale-manual')$/;"	c
ALECompletionActions	plugged/ale/autoload/ale/completion.vim	/^augroup ALECompletionActions$/;"	a
ALEDetail	plugged/ale/plugin/ale.vim	/^command! -bar ALEDetail :call ale#cursor#ShowCursorDetail()$/;"	c
ALEDisable	plugged/ale/plugin/ale.vim	/^command! -bar ALEDisable :call ale#toggle#Disable()$/;"	c
ALEDisableBuffer	plugged/ale/plugin/ale.vim	/^command! -bar ALEDisableBuffer :call ale#toggle#DisableBuffer(bufnr(''))$/;"	c
ALEDocumentation	plugged/ale/plugin/ale.vim	/^command! -bar ALEDocumentation :call ale#hover#ShowDocumentationAtCursor()$/;"	c
ALEEnable	plugged/ale/plugin/ale.vim	/^command! -bar ALEEnable :call ale#toggle#Enable()$/;"	c
ALEEnableBuffer	plugged/ale/plugin/ale.vim	/^command! -bar ALEEnableBuffer :call ale#toggle#EnableBuffer(bufnr(''))$/;"	c
ALEFileRename	plugged/ale/plugin/ale.vim	/^command! -bar -bang ALEFileRename :call ale#filerename#Execute()$/;"	c
ALEFindReferences	plugged/ale/plugin/ale.vim	/^command! -bar -nargs=* ALEFindReferences :call ale#references#Find(<f-args>)$/;"	c
ALEFirst	plugged/ale/plugin/ale.vim	/^command! -bar ALEFirst :call ale#loclist_jumping#JumpToIndex(0)$/;"	c
ALEFix	plugged/ale/plugin/ale.vim	/^command! -bar -bang -nargs=* -complete=customlist,ale#fix#registry#CompleteFixers ALEFix :call ale#fix#Fix(bufnr(''), '<bang>', <f-args>)$/;"	c
ALEFixSuggest	plugged/ale/plugin/ale.vim	/^command! -bar ALEFixSuggest :call ale#fix#registry#Suggest(&filetype)$/;"	c
ALEGoToDefinition	plugged/ale/plugin/ale.vim	/^command! -bar -nargs=* ALEGoToDefinition :call ale#definition#GoToCommandHandler('', <f-args>)$/;"	c
ALEGoToImplementation	plugged/ale/plugin/ale.vim	/^command! -bar -nargs=* ALEGoToImplementation :call ale#definition#GoToCommandHandler('implementation', <f-args>)$/;"	c
ALEGoToTypeDefinition	plugged/ale/plugin/ale.vim	/^command! -bar -nargs=* ALEGoToTypeDefinition :call ale#definition#GoToCommandHandler('type', <f-args>)$/;"	c
ALEHighlightBufferGroup	plugged/ale/autoload/ale/highlight.vim	/^augroup ALEHighlightBufferGroup$/;"	a
ALEHover	plugged/ale/plugin/ale.vim	/^command! -bar ALEHover :call ale#hover#ShowAtCursor()$/;"	c
ALEImport	plugged/ale/plugin/ale.vim	/^command! -bar ALEImport :call ale#completion#Import()$/;"	c
ALEInfo	plugged/ale/plugin/ale.vim	/^command! -bar -nargs=* ALEInfo :call ale#debugging#InfoCommand(<f-args>)$/;"	c
ALEInfoOpenHelp	plugged/ale/ftplugin/ale-info.vim	/^function! ALEInfoOpenHelp() abort$/;"	f
ALEInfoToClipboard	plugged/ale/plugin/ale.vim	/^command! -bar ALEInfoToClipboard :call ale#debugging#InfoToClipboardDeprecatedCommand()$/;"	c
ALEInfoToFile	plugged/ale/plugin/ale.vim	/^command! -bar -nargs=1 ALEInfoToFile :call ale#debugging#InfoToFile(<f-args>)$/;"	c
ALELast	plugged/ale/plugin/ale.vim	/^command! -bar ALELast :call ale#loclist_jumping#JumpToIndex(-1)$/;"	c
ALELint	plugged/ale/plugin/ale.vim	/^command! -bar ALELint :call ale#Queue(0, 'lint_file')$/;"	c
ALELintStop	plugged/ale/plugin/ale.vim	/^command! -bar ALELintStop :call ale#engine#Stop(bufnr(''))$/;"	c
ALENext	plugged/ale/plugin/ale.vim	/^command! -bar -nargs=* ALENext$/;"	c
ALENextWrap	plugged/ale/plugin/ale.vim	/^command! -bar ALENextWrap :call ale#loclist_jumping#Jump('after', 1)$/;"	c
ALEOrganizeImports	plugged/ale/plugin/ale.vim	/^command! -bar ALEOrganizeImports :call ale#organize_imports#Execute()$/;"	c
ALEPopulateLocList	plugged/ale/plugin/ale.vim	/^command! -bar ALEPopulateLocList  :call ale#list#ForcePopulateErrorList(0)$/;"	c
ALEPopulateQuickfix	plugged/ale/plugin/ale.vim	/^command! -bar ALEPopulateQuickfix :call ale#list#ForcePopulateErrorList(1)$/;"	c
ALEPrevious	plugged/ale/plugin/ale.vim	/^command! -bar -nargs=* ALEPrevious$/;"	c
ALEPreviousWrap	plugged/ale/plugin/ale.vim	/^command! -bar ALEPreviousWrap :call ale#loclist_jumping#Jump('before', 1)$/;"	c
ALERename	plugged/ale/plugin/ale.vim	/^command! -bar -bang ALERename :call ale#rename#Execute()$/;"	c
ALERepeatSelection	plugged/ale/plugin/ale.vim	/^command! -bar ALERepeatSelection :call ale#preview#RepeatSelection()$/;"	c
ALEReset	plugged/ale/plugin/ale.vim	/^command! -bar ALEReset :call ale#toggle#Reset()$/;"	c
ALEResetBuffer	plugged/ale/plugin/ale.vim	/^command! -bar ALEResetBuffer :call ale#toggle#ResetBuffer(bufnr(''))$/;"	c
ALEStopAllLSPs	plugged/ale/plugin/ale.vim	/^command! -bar ALEStopAllLSPs :call ale#lsp#reset#StopAllLSPs()$/;"	c
ALEStopLSP	plugged/ale/plugin/ale.vim	/^command! -bar -bang -nargs=1 -complete=customlist,ale#lsp#reset#Complete ALEStopLSP :call ale#lsp#reset#StopLSP(<f-args>, '<bang>')$/;"	c
ALESymbolSearch	plugged/ale/plugin/ale.vim	/^command! -nargs=1 ALESymbolSearch :call ale#symbol#Search(<q-args>)$/;"	c
ALEToggle	plugged/ale/plugin/ale.vim	/^command! -bar ALEToggle :call ale#toggle#Toggle()$/;"	c
ALEToggleBuffer	plugged/ale/plugin/ale.vim	/^command! -bar ALEToggleBuffer :call ale#toggle#ToggleBuffer(bufnr(''))$/;"	c
AbbreviateMessage	plugged/ale/ale_linters/erlang/elvis.vim	/^function! s:AbbreviateMessage(text) abort$/;"	f
AddHintsForTypeScriptParsingErrors	plugged/ale/autoload/ale/handlers/eslint.vim	/^function! s:AddHintsForTypeScriptParsingErrors(output) abort$/;"	f
AddProblemsFromOtherBuffers	plugged/ale/autoload/ale/engine.vim	/^function! s:AddProblemsFromOtherBuffers(buffer, linters) abort$/;"	f
AddSubCallbacks	plugged/ale/autoload/ale/fix.vim	/^function! s:AddSubCallbacks(full_list, callbacks) abort$/;"	f
ApplyPartialTimer	plugged/ale/autoload/ale/util.vim	/^function! s:ApplyPartialTimer(timer_id) abort$/;"	f
Array:filter	plugged/hlchunk.nvim/lua/hlchunk/utils/array.lua	/^function Array:filter(f)$/;"	f
Array:foreach	plugged/hlchunk.nvim/lua/hlchunk/utils/array.lua	/^function Array:foreach(f)$/;"	f
Array:from	plugged/hlchunk.nvim/lua/hlchunk/utils/array.lua	/^function Array:from(t, f)$/;"	f
Array:join	plugged/hlchunk.nvim/lua/hlchunk/utils/array.lua	/^function Array:join(sep)$/;"	f
Array:map	plugged/hlchunk.nvim/lua/hlchunk/utils/array.lua	/^function Array:map(f)$/;"	f
Array:new	plugged/hlchunk.nvim/lua/hlchunk/utils/array.lua	/^function Array:new(...)$/;"	f
Array:pop	plugged/hlchunk.nvim/lua/hlchunk/utils/array.lua	/^function Array:pop()$/;"	f
Array:push	plugged/hlchunk.nvim/lua/hlchunk/utils/array.lua	/^function Array:push(v)$/;"	f
Array:shift	plugged/hlchunk.nvim/lua/hlchunk/utils/array.lua	/^function Array:shift()$/;"	f
Array:size	plugged/hlchunk.nvim/lua/hlchunk/utils/array.lua	/^function Array:size()$/;"	f
AutoUpdate	plugged/tagbar/autoload/tagbar.vim	/^function! s:AutoUpdate(fname, force, ...) abort$/;"	f
BList.new	plugged/smoothcursor.nvim/lua/smoothcursor/callback.lua	/^function BList.new(length)$/;"	f
Base	plugged/ale/rplugin/python3/deoplete/sources/ale.py	/^    class Base(object):$/;"	c
BaseMod:clear	plugged/hlchunk.nvim/lua/hlchunk/base_mod.lua	/^function BaseMod:clear(line_start, line_end)$/;"	f
BaseMod:create_mod_usercmd	plugged/hlchunk.nvim/lua/hlchunk/base_mod.lua	/^function BaseMod:create_mod_usercmd()$/;"	f
BaseMod:disable	plugged/hlchunk.nvim/lua/hlchunk/base_mod.lua	/^function BaseMod:disable()$/;"	f
BaseMod:disable_mod_autocmd	plugged/hlchunk.nvim/lua/hlchunk/base_mod.lua	/^function BaseMod:disable_mod_autocmd()$/;"	f
BaseMod:enable	plugged/hlchunk.nvim/lua/hlchunk/base_mod.lua	/^function BaseMod:enable()$/;"	f
BaseMod:enable_mod_autocmd	plugged/hlchunk.nvim/lua/hlchunk/base_mod.lua	/^function BaseMod:enable_mod_autocmd()$/;"	f
BaseMod:new	plugged/hlchunk.nvim/lua/hlchunk/base_mod.lua	/^function BaseMod:new(o)$/;"	f
BaseMod:notify	plugged/hlchunk.nvim/lua/hlchunk/base_mod.lua	/^function BaseMod:notify(msg, level, opts)$/;"	f
BaseMod:render	plugged/hlchunk.nvim/lua/hlchunk/base_mod.lua	/^function BaseMod:render()$/;"	f
BaseMod:set_hl	plugged/hlchunk.nvim/lua/hlchunk/base_mod.lua	/^function BaseMod:set_hl()$/;"	f
BaseMod:set_options	plugged/hlchunk.nvim/lua/hlchunk/base_mod.lua	/^function BaseMod:set_options(options)$/;"	f
Beacon	plugged/beacon.nvim/plugin/beacon.vim	/^command! Beacon call s:Highlight_position(v:true)$/;"	c
BeaconHighlightMoves	plugged/beacon.nvim/plugin/beacon.vim	/^augroup BeaconHighlightMoves$/;"	a
BeaconOff	plugged/beacon.nvim/plugin/beacon.vim	/^command! BeaconOff let g:beacon_enable = 0$/;"	c
BeaconOn	plugged/beacon.nvim/plugin/beacon.vim	/^command! BeaconOn let g:beacon_enable = 1$/;"	c
BeaconToggle	plugged/beacon.nvim/plugin/beacon.vim	/^command! BeaconToggle call s:Beacon_toggle()$/;"	c
Beacon_toggle	plugged/beacon.nvim/plugin/beacon.vim	/^function! s:Beacon_toggle() abort$/;"	f
BufferCacheExists	plugged/ale/autoload/ale/statusline.vim	/^function! s:BufferCacheExists(buffer) abort$/;"	f
BuildClassPathOption	plugged/ale/ale_linters/java/javac.vim	/^function! s:BuildClassPathOption(buffer, import_paths) abort$/;"	f
BuildClassPathOption	plugged/ale/ale_linters/kotlin/kotlinc.vim	/^function! s:BuildClassPathOption(buffer, import_paths) abort$/;"	f
BuildSignMap	plugged/ale/autoload/ale/sign.vim	/^function! s:BuildSignMap(buffer, current_sign_list, grouped_items) abort$/;"	f
BuildText	plugged/ale/ale_linters/ruby/reek.vim	/^function! s:BuildText(buffer, error) abort$/;"	f
COMMAND_RE	plugged/ale/test/script/block-padding-checker	/^COMMAND_RE = re.compile(r'^ *([a-zA-Z\\\\]+)')$/;"	v
COMMENT_LINE_RE	plugged/ale/test/script/block-padding-checker	/^COMMENT_LINE_RE = re.compile(r'^ *"')$/;"	v
COUNT	plugged/minimap.vim/bin/minimap_generator.bat	/^set COUNT=0$/;"	v
CanParseMakefile	plugged/ale/autoload/ale/c.vim	/^function! s:CanParseMakefile(buffer) abort$/;"	f
ChangeCmp	plugged/ale/autoload/ale/code_action.vim	/^function! s:ChangeCmp(left, right) abort$/;"	f
ChangeFoldLevel	plugged/tagbar/autoload/tagbar.vim	/^function! s:ChangeFoldLevel(diff, force) abort$/;"	f
CheckExCtagsVersion	plugged/tagbar/autoload/tagbar.vim	/^function! s:CheckExCtagsVersion(output) abort$/;"	f
CheckFTCtags	plugged/tagbar/autoload/tagbar.vim	/^function! s:CheckFTCtags(bin, ftype) abort$/;"	f
CheckForBadConfig	plugged/ale/autoload/ale/handlers/eslint.vim	/^function! s:CheckForBadConfig(buffer, lines) abort$/;"	f
CheckForExCtags	plugged/tagbar/autoload/tagbar.vim	/^function! s:CheckForExCtags(silent) abort$/;"	f
CheckMouseClick	plugged/tagbar/autoload/tagbar.vim	/^function! s:CheckMouseClick() abort$/;"	f
CheckWithLSP	plugged/ale/autoload/ale/lsp_linter.vim	/^function! s:CheckWithLSP(linter, details) abort$/;"	f
Clear_highlight	plugged/beacon.nvim/plugin/beacon.vim	/^function! s:Clear_highlight(...) abort$/;"	f
CloseFold	plugged/tagbar/autoload/tagbar.vim	/^function! s:CloseFold() abort$/;"	f
CloseWindow	plugged/tagbar/autoload/tagbar.vim	/^function! s:CloseWindow() abort$/;"	f
CloseWindowIfNeeded	plugged/ale/autoload/ale/list.vim	/^function! s:CloseWindowIfNeeded(buffer) abort$/;"	f
CmpPatterns	plugged/ale/autoload/ale/pattern_options.vim	/^function! s:CmpPatterns(left_item, right_item) abort$/;"	f
CompletionStillValid	plugged/ale/autoload/ale/completion.vim	/^function! s:CompletionStillValid(request_id) abort$/;"	f
ConvertLanguageName	plugged/ale/autoload/ale/hover.vim	/^function! s:ConvertLanguageName(language) abort$/;"	f
CorrectFocusOnStartup	plugged/tagbar/autoload/tagbar.vim	/^function! s:CorrectFocusOnStartup() abort$/;"	f
CreateAutocommands	plugged/tagbar/autoload/tagbar.vim	/^function! s:CreateAutocommands() abort$/;"	f
CreateCountDict	plugged/ale/autoload/ale/statusline.vim	/^function! s:CreateCountDict() abort$/;"	f
CreateTSServerMessageData	plugged/ale/autoload/ale/lsp.vim	/^function! s:CreateTSServerMessageData(message) abort$/;"	f
CtagsErrMsg	plugged/tagbar/autoload/tagbar.vim	/^function! s:CtagsErrMsg(errmsg, infomsg, silent, ...) abort$/;"	f
Cursor.column	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.column() dict$/;"	f
Cursor.line	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.line() dict$/;"	f
Cursor.move	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.move(line, column) dict$/;"	f
Cursor.new	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.new(position)$/;"	f
Cursor.remove_visual_selection	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.remove_visual_selection() dict$/;"	f
Cursor.restore_unnamed_register	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.restore_unnamed_register() dict$/;"	f
Cursor.save_unnamed_register	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.save_unnamed_register() dict$/;"	f
Cursor.update_highlight	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.update_highlight() dict$/;"	f
Cursor.update_line_length	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.update_line_length() dict$/;"	f
Cursor.update_position	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.update_position(pos) dict$/;"	f
Cursor.update_visual_selection	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:Cursor.update_visual_selection(region) dict$/;"	f
CursorManager.add	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.add(pos, ...) dict$/;"	f
CursorManager.debug	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.debug() dict$/;"	f
CursorManager.delete_current	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.delete_current() dict$/;"	f
CursorManager.get	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.get(i) dict$/;"	f
CursorManager.get_current	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.get_current() dict$/;"	f
CursorManager.initialize	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.initialize() dict$/;"	f
CursorManager.is_empty	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.is_empty() dict$/;"	f
CursorManager.loop_done	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.loop_done() dict$/;"	f
CursorManager.new	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.new()$/;"	f
CursorManager.next	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.next() dict$/;"	f
CursorManager.reapply_visual_selection	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.reapply_visual_selection() dict$/;"	f
CursorManager.remove_highlight	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.remove_highlight(hi_id) dict$/;"	f
CursorManager.reposition_all_within_region	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.reposition_all_within_region(start) dict$/;"	f
CursorManager.reset	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.reset(restore_view, restore_setting, ...) dict$/;"	f
CursorManager.restore_user_settings	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.restore_user_settings() dict$/;"	f
CursorManager.size	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.size() dict$/;"	f
CursorManager.start_loop	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.start_loop() dict$/;"	f
CursorManager.update_current	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:CursorManager.update_current() dict$/;"	f
Cursor_moved	plugged/beacon.nvim/plugin/beacon.vim	/^function! s:Cursor_moved()$/;"	f
Deduplicate	plugged/ale/autoload/ale/list.vim	/^function! s:Deduplicate(list) abort$/;"	f
DeopleteSourceTest	plugged/ale/test/python/test_deoplete_source.py	/^class DeopleteSourceTest(unittest.TestCase):$/;"	c
DetectFiletype	plugged/tagbar/autoload/tagbar.vim	/^function! s:DetectFiletype(bufnr) abort$/;"	f
DisablePostamble	plugged/ale/autoload/ale/toggle.vim	/^function! s:DisablePostamble() abort$/;"	f
END_BLOCKS	plugged/ale/test/script/block-padding-checker	/^END_BLOCKS = set(['endif', 'endfor', 'endwhile', 'endtry', 'endfunction'])$/;"	v
Echo	plugged/ale/autoload/ale/debugging.vim	/^function! s:Echo(message) abort$/;"	f
EchoCommand	plugged/ale/autoload/ale/debugging.vim	/^function! s:EchoCommand(item) abort$/;"	f
EchoCommandHistory	plugged/ale/autoload/ale/debugging.vim	/^function! s:EchoCommandHistory() abort$/;"	f
EchoExecutable	plugged/ale/autoload/ale/debugging.vim	/^function! s:EchoExecutable(item) abort$/;"	f
EchoGlobalVariables	plugged/ale/autoload/ale/debugging.vim	/^function! s:EchoGlobalVariables() abort$/;"	f
EchoLSPErrorMessages	plugged/ale/autoload/ale/debugging.vim	/^function! s:EchoLSPErrorMessages(all_linter_names) abort$/;"	f
EchoLinterAliases	plugged/ale/autoload/ale/debugging.vim	/^function! s:EchoLinterAliases(all_linters) abort$/;"	f
EchoLinterVariables	plugged/ale/autoload/ale/debugging.vim	/^function! s:EchoLinterVariables(variable_list) abort$/;"	f
EnablePreamble	plugged/ale/autoload/ale/toggle.vim	/^function! s:EnablePreamble() abort$/;"	f
EncodeChar	plugged/ale/autoload/ale/uri.vim	/^function! s:EncodeChar(char) abort$/;"	f
EscapeCtagsCmd	plugged/tagbar/autoload/tagbar.vim	/^function! s:EscapeCtagsCmd(ctags_bin, args, ...) abort$/;"	f
EscapeMenuName	plugged/ale/autoload/ale/code_action.vim	/^function! s:EscapeMenuName(text) abort$/;"	f
EscapeSignText	plugged/ale/autoload/ale/sign.vim	/^function! s:EscapeSignText(sign_text) abort$/;"	f
EvaluateHL	plugged/vim-signature/autoload/signature/sign.vim	/^function! s:EvaluateHL(expr, lnum, ...)                                                                            "{{{1$/;"	f
ExecuteCtags	plugged/tagbar/autoload/tagbar.vim	/^function! s:ExecuteCtags(ctags_cmd) abort$/;"	f
ExecuteCtagsOnFile	plugged/tagbar/autoload/tagbar.vim	/^function! s:ExecuteCtagsOnFile(fname, realfname, typeinfo) abort$/;"	f
ExecuteFileRename	plugged/ale/autoload/ale/filerename.vim	/^function! s:ExecuteFileRename(linter, options) abort$/;"	f
ExecuteGetCodeFix	plugged/ale/autoload/ale/codefix.vim	/^function! s:ExecuteGetCodeFix(linter, range, MenuCallback) abort$/;"	f
ExecuteRename	plugged/ale/autoload/ale/rename.vim	/^function! s:ExecuteRename(linter, options) abort$/;"	f
ExitCallback	plugged/ale/autoload/ale/command.vim	/^function! s:ExitCallback(buffer, line_list, Callback, data) abort$/;"	f
ExtraErrorMsg	plugged/ale/ale_linters/javascript/flow.vim	/^function! s:ExtraErrorMsg(current, new) abort$/;"	f
Fade_window	plugged/beacon.nvim/plugin/beacon.vim	/^function! s:Fade_window(...) abort$/;"	f
FilterResult	plugged/ale/autoload/ale/handlers/eslint.vim	/^function! s:FilterResult(buffer, obj) abort$/;"	f
FindConfig	plugged/ale/ale_linters/pug/puglint.vim	/^function! s:FindConfig(buffer) abort$/;"	f
FindError	plugged/ale/autoload/ale/codefix.vim	/^function! s:FindError(buffer, line, column, end_line, end_column, linter_name) abort$/;"	f
FindHistoryItem	plugged/ale/autoload/ale/history.vim	/^function! s:FindHistoryItem(buffer, job_id) abort$/;"	f
FindProjectRoot	plugged/ale/ale_linters/erlang/erlang_ls.vim	/^function! s:FindProjectRoot(buffer) abort$/;"	f
FindSpan	plugged/ale/autoload/ale/handlers/rust.vim	/^function! s:FindSpan(buffer, span) abort$/;"	f
FixList	plugged/ale/autoload/ale/list.vim	/^function! s:FixList(buffer, list) abort$/;"	f
ForceGlobalRemoval	plugged/vim-signature/autoload/signature/mark.vim	/^function! s:ForceGlobalRemoval(mark)                                                                              " {{{1$/;"	f
FormatEntry	plugged/ale/autoload/ale/fix/registry.vim	/^function! s:FormatEntry(key, entry) abort$/;"	f
FormatExe	plugged/ale/autoload/ale/assert.vim	/^function! s:FormatExe(command, executable) abort$/;"	f
FormatFilename	plugged/ale/autoload/ale/command.vim	/^function! s:FormatFilename(filename, mappings, modifiers) abort$/;"	f
GatherOutput	plugged/ale/autoload/ale/command.vim	/^function! s:GatherOutput(line_list, job_id, line) abort$/;"	f
GetALEProjectDir	plugged/ale/ale_linters/vim/ale_custom_linting_rules.vim	/^function! s:GetALEProjectDir(buffer) abort$/;"	f
GetAlarm	plugged/ale/ale_linters/prolog/swipl.vim	/^function! s:GetAlarm(buffer, timeout) abort$/;"	f
GetAliasedFiletype	plugged/ale/autoload/ale/linter.vim	/^function! s:GetAliasedFiletype(original_filetype) abort$/;"	f
GetArguments	plugged/ale/autoload/ale/c.vim	/^function! s:GetArguments(json_item) abort$/;"	f
GetCachedExtensionMap	plugged/ale/autoload/ale/filetypes.vim	/^function! s:GetCachedExtensionMap() abort$/;"	f
GetCallbacks	plugged/ale/autoload/ale/fix.vim	/^function! s:GetCallbacks(buffer, fixing_flag, fixers) abort$/;"	f
GetCodeActions	plugged/ale/autoload/ale/code_action.vim	/^function! s:GetCodeActions(linter, options) abort$/;"	f
GetCommand	plugged/ale/ale_linters/erlang/elvis.vim	/^function! s:GetCommand(buffer) abort$/;"	f
GetCommand	plugged/ale/ale_linters/erlang/erlang_ls.vim	/^function! s:GetCommand(buffer) abort$/;"	f
GetConfig	plugged/ale/ale_linters/java/checkstyle.vim	/^function! s:GetConfig(buffer, config) abort$/;"	f
GetCounts	plugged/ale/autoload/ale/statusline.vim	/^function! s:GetCounts(buffer) abort$/;"	f
GetDUBCommand	plugged/ale/ale_linters/d/dmd.vim	/^function! s:GetDUBCommand(buffer) abort$/;"	f
GetDetails	plugged/ale/ale_linters/javascript/flow.vim	/^function! s:GetDetails(error) abort$/;"	f
GetDir	plugged/ale/ale_linters/python/vulture.vim	/^function! s:GetDir(buffer) abort$/;"	f
GetDocumentationLink	plugged/ale/ale_linters/ruby/reek.vim	/^function! s:GetDocumentationLink(error) abort$/;"	f
GetErrMsg	plugged/ale/ale_linters/prolog/swipl.vim	/^function! s:GetErrMsg(i, lines, text) abort$/;"	f
GetExecutable	plugged/ale/autoload/ale/handlers/sml.vim	/^function! s:GetExecutable(buffer, source) abort$/;"	f
GetFileWinnr	plugged/tagbar/autoload/tagbar.vim	/^function! s:GetFileWinnr(fileinfo) abort$/;"	f
GetFiletypeValue	plugged/ale/autoload/ale/completion.vim	/^function! s:GetFiletypeValue(map, filetype) abort$/;"	f
GetFirstProblems	plugged/ale/autoload/ale/statusline.vim	/^function! s:GetFirstProblems(buffer) abort$/;"	f
GetIgnoredLinters	plugged/ale/autoload/ale/debugging.vim	/^function! s:GetIgnoredLinters(buffer, enabled_linters) abort$/;"	f
GetInfo	plugged/vim-signature/autoload/signature/sign.vim	/^function! s:GetInfo(...)                                                                                           "{{{1$/;"	f
GetJSONLines	plugged/ale/ale_linters/javascript/flow.vim	/^function! s:GetJSONLines(lines) abort$/;"	f
GetLintFileSlots	plugged/ale/autoload/ale/engine.vim	/^function! s:GetLintFileSlots(buffer, linters) abort$/;"	f
GetLintFileValues	plugged/ale/autoload/ale/engine.vim	/^function! s:GetLintFileValues(slots, Callback) abort$/;"	f
GetLinter	plugged/ale/autoload/ale/assert.vim	/^function! s:GetLinter() abort$/;"	f
GetLinterNames	plugged/ale/autoload/ale/linter.vim	/^function! s:GetLinterNames(original_filetype) abort$/;"	f
GetLinterVariables	plugged/ale/autoload/ale/debugging.vim	/^function! s:GetLinterVariables(filetype, exclude_linter_names) abort$/;"	f
GetLookupFromCompileCommandsFile	plugged/ale/autoload/ale/c.vim	/^function! s:GetLookupFromCompileCommandsFile(compile_commands_file) abort$/;"	f
GetMappedLSPConfigNames	plugged/ale/autoload/ale/engine/ignore.vim	/^function! s:GetMappedLSPConfigNames() abort$/;"	f
GetNearbyTag	plugged/tagbar/autoload/tagbar.vim	/^function! s:GetNearbyTag(request, forcecurrent, ...) abort$/;"	f
GetPopupOpts	plugged/ale/autoload/ale/floating_preview.vim	/^function! s:GetPopupOpts() abort$/;"	f
GetSupportedFiletypes	plugged/tagbar/autoload/tagbar.vim	/^function! s:GetSupportedFiletypes() abort$/;"	f
GetTagInfo	plugged/tagbar/autoload/tagbar.vim	/^function! s:GetTagInfo(linenr, ignorepseudo) abort$/;"	f
GetVersion	plugged/ale/ale_linters/java/eclipselsp.vim	/^function! s:GetVersion(executable, version_lines) abort$/;"	f
GetVersion	plugged/ale/autoload/ale/semver.vim	/^function! s:GetVersion(executable, version_lines) abort$/;"	f
GoToLSPDefinition	plugged/ale/autoload/ale/definition.vim	/^function! s:GoToLSPDefinition(linter, options, capability) abort$/;"	f
GotoByAlpha	plugged/vim-signature/autoload/signature/mark.vim	/^function! s:GotoByAlpha(dir)                                                                                      " {{{1$/;"	f
GotoByAlphaGlobal	plugged/vim-signature/autoload/signature/mark.vim	/^function! s:GotoByAlphaGlobal(dir)                                                                                " {{{1$/;"	f
GotoByPos	plugged/vim-signature/autoload/signature/mark.vim	/^function! s:GotoByPos(dir)                                                                                        " {{{1$/;"	f
GotoFileWindow	plugged/tagbar/autoload/tagbar.vim	/^function! s:GotoFileWindow(fileinfo, ...) abort$/;"	f
GotoNextFold	plugged/tagbar/autoload/tagbar.vim	/^function! s:GotoNextFold() abort$/;"	f
GotoNextToplevelTag	plugged/tagbar/autoload/tagbar.vim	/^function! s:GotoNextToplevelTag(direction) abort$/;"	f
GotoPrevFold	plugged/tagbar/autoload/tagbar.vim	/^function! s:GotoPrevFold() abort$/;"	f
GroupCmd	plugged/ale/autoload/ale/sign.vim	/^function! s:GroupCmd() abort$/;"	f
GroupLoclistItems	plugged/ale/autoload/ale/sign.vim	/^function! s:GroupLoclistItems(buffer, loclist) abort$/;"	f
HandleBufDelete	plugged/tagbar/autoload/tagbar.vim	/^function! s:HandleBufDelete(bufname, bufnr) abort$/;"	f
HandleBufWrite	plugged/tagbar/autoload/tagbar.vim	/^function! s:HandleBufWrite(fname) abort$/;"	f
HandleESLintOutput	plugged/ale/autoload/ale/handlers/eslint.vim	/^function! s:HandleESLintOutput(buffer, lines, type) abort$/;"	f
HandleExit	plugged/ale/autoload/ale/engine.vim	/^function! s:HandleExit(job_info, buffer, output, data) abort$/;"	f
HandleExit	plugged/ale/autoload/ale/fix.vim	/^function! s:HandleExit(job_info, buffer, job_output, data) abort$/;"	f
HandleLSPDiagnostics	plugged/ale/autoload/ale/lsp_linter.vim	/^function! s:HandleLSPDiagnostics(conn_id, response) abort$/;"	f
HandleLSPErrorMessage	plugged/ale/autoload/ale/lsp_linter.vim	/^function! s:HandleLSPErrorMessage(linter, response) abort$/;"	f
HandleLSPResponseToCustomRequests	plugged/ale/autoload/ale/lsp_linter.vim	/^function! s:HandleLSPResponseToCustomRequests(conn_id, response) abort$/;"	f
HandleOnlyWindow	plugged/tagbar/autoload/tagbar.vim	/^function! s:HandleOnlyWindow() abort$/;"	f
HandleSyntaxError	plugged/ale/autoload/ale/handlers/ruby.vim	/^function! s:HandleSyntaxError(buffer, lines) abort$/;"	f
HandleTSServerDiagnostics	plugged/ale/autoload/ale/lsp_linter.vim	/^function! s:HandleTSServerDiagnostics(response, error_type) abort$/;"	f
HandleUnixFormat	plugged/ale/autoload/ale/handlers/unix.vim	/^function! s:HandleUnixFormat(buffer, lines, type) abort$/;"	f
HasOpenFileWindows	plugged/tagbar/autoload/tagbar.vim	/^function! s:HasOpenFileWindows() abort$/;"	f
HighlightTag	plugged/tagbar/autoload/tagbar.vim	/^function! s:HighlightTag(openfolds, ...) abort$/;"	f
Highlight_position	plugged/beacon.nvim/plugin/beacon.vim	/^function! s:Highlight_position(force) abort$/;"	f
I	plugged/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> I <NOP>$/;"	m
INDENTATION_RE	plugged/ale/test/script/block-padding-checker	/^INDENTATION_RE = re.compile(r'^ *')$/;"	v
Ignore	plugged/ale/ale_linters/prolog/swipl.vim	/^function! s:Ignore(item) abort$/;"	f
IgnoreFixers	plugged/ale/autoload/ale/fix.vim	/^function! s:IgnoreFixers(callback_list, filetype, config) abort$/;"	f
Init	plugged/tagbar/autoload/tagbar.vim	/^function! s:Init(silent) abort$/;"	f
InitTypes	plugged/tagbar/autoload/tagbar.vim	/^function! s:InitTypes() abort$/;"	f
InitWindow	plugged/tagbar/autoload/tagbar.vim	/^function! s:InitWindow(autoclose) abort$/;"	f
InitializeVars	plugged/vim-signature/autoload/signature/sign.vim	/^function! s:InitializeVars(...)                                                                                    "{{{1$/;"	f
IsBoolean	plugged/ale/autoload/ale/linter.vim	/^function! s:IsBoolean(value) abort$/;"	f
IsCallback	plugged/ale/autoload/ale/linter.vim	/^function! s:IsCallback(value) abort$/;"	f
IsGenericFixer	plugged/ale/autoload/ale/fix/registry.vim	/^function! s:IsGenericFixer(suggested_filetypes) abort$/;"	f
IsHeaderFile	plugged/ale/autoload/ale/handlers/gcc.vim	/^function! s:IsHeaderFile(filename) abort$/;"	f
IsIgnoreBuffer	plugged/beacon.nvim/plugin/beacon.vim	/^fun! s:IsIgnoreBuffer()$/;"	f
IsIgnoreFiletype	plugged/beacon.nvim/plugin/beacon.vim	/^fun! s:IsIgnoreFiletype()$/;"	f
IsInRuntimepath	plugged/ale/ale_linters/lua/luacheck.vim	/^function! s:IsInRuntimepath(buffer) abort$/;"	f
IsLineVisible	plugged/tagbar/autoload/tagbar.vim	/^function! s:IsLineVisible(line) abort$/;"	f
IsSbt	plugged/ale/ale_linters/scala/fsc.vim	/^function! s:IsSbt(buffer) abort$/;"	f
IsSbt	plugged/ale/ale_linters/scala/scalac.vim	/^function! s:IsSbt(buffer) abort$/;"	f
IsValidFile	plugged/tagbar/autoload/tagbar.vim	/^function! s:IsValidFile(fname, ftype) abort$/;"	f
JumpToNearbyTag	plugged/tagbar/autoload/tagbar.vim	/^function! s:JumpToNearbyTag(direction, request, flags) abort$/;"	f
JumpToTag	plugged/tagbar/autoload/tagbar.vim	/^function! s:JumpToTag(stay_in_tagbar, ...) abort$/;"	f
KillHandler	plugged/ale/autoload/ale/job.vim	/^function! s:KillHandler(timer) abort$/;"	f
Lint	plugged/ale/autoload/ale.vim	/^function! s:Lint(buffer, should_lint_file, timer_id) abort$/;"	f
LoadArgCount	plugged/ale/autoload/ale/util.vim	/^function! s:LoadArgCount(function) abort$/;"	f
LoadUserTypeDefs	plugged/tagbar/autoload/tagbar.vim	/^function! s:LoadUserTypeDefs(...) abort$/;"	f
M.__reset	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^  function M.__reset()$/;"	f
M._add_big_char_margin	plugged/nvim-window-picker/lua/window-picker/hints/floating-big-letter-hint.lua	/^function M._add_big_char_margin(lines)$/;"	f
M._backward_compatibility_config_changes	plugged/nvim-window-picker/lua/window-picker/configurer.lua	/^function M._backward_compatibility_config_changes(config)$/;"	f
M._basic_config_manipulations	plugged/nvim-window-picker/lua/window-picker/configurer.lua	/^function M._basic_config_manipulations(config)$/;"	f
M._create_hl_if_not_exists	plugged/nvim-window-picker/lua/window-picker/init.lua	/^function M._create_hl_if_not_exists(name, properties)$/;"	f
M._get_float_config	plugged/toggleterm.nvim/lua/toggleterm/ui.lua	/^function M._get_float_config(term, opening)$/;"	f
M._resolve_size	plugged/toggleterm.nvim/lua/toggleterm/ui.lua	/^function M._resolve_size(size, term)$/;"	f
M._str_to_char_list	plugged/nvim-window-picker/lua/window-picker/configurer.lua	/^function M._str_to_char_list(str)$/;"	f
M.apply_default_mappings 	plugged/goto-preview/lua/goto-preview.lua	/^M.apply_default_mappings = function()$/;"	f
M.apply_resizing_mappings 	plugged/goto-preview/lua/goto-preview.lua	/^M.apply_resizing_mappings = function()$/;"	f
M.buffer_entered 	plugged/goto-preview/lua/goto-preview/lib.lua	/^M.buffer_entered = function()$/;"	f
M.buffer_left 	plugged/goto-preview/lua/goto-preview/lib.lua	/^M.buffer_left = function()$/;"	f
M.clear_prompt	plugged/nvim-window-picker/lua/window-picker/util.lua	/^function M.clear_prompt()$/;"	f
M.close	plugged/toggleterm.nvim/lua/toggleterm/ui.lua	/^function M.close(term)$/;"	f
M.close_all_win 	plugged/goto-preview/lua/goto-preview.lua	/^M.close_all_win = function(options)$/;"	f
M.close_and_save_terminal_view	plugged/toggleterm.nvim/lua/toggleterm/ui.lua	/^function M.close_and_save_terminal_view(windows)$/;"	f
M.close_if_is_goto_preview 	plugged/goto-preview/lua/goto-preview/lib.lua	/^M.close_if_is_goto_preview = function(win_handle)$/;"	f
M.col_in_screen	plugged/hlchunk.nvim/lua/hlchunk/utils/utils.lua	/^function M.col_in_screen(col)$/;"	f
M.color_is_bright	plugged/toggleterm.nvim/lua/toggleterm/colors.lua	/^function M.color_is_bright(hex)$/;"	f
M.concat_without_empty	plugged/toggleterm.nvim/lua/toggleterm/utils.lua	/^function M.concat_without_empty(tbl, sep) return table.concat(M.tbl_filter_empty(tbl), sep) end$/;"	f
M.configured_lspconfig_servers	plugged/ale/lua/ale/util.lua	/^function M.configured_lspconfig_servers()$/;"	f
M.create_buf	plugged/toggleterm.nvim/lua/toggleterm/ui.lua	/^function M.create_buf() return api.nvim_create_buf(false, false) end$/;"	f
M.create_hl	plugged/nvim-window-picker/lua/window-picker/hints/statusline-winbar-hint.lua	/^function M.create_hl(namespace, name, properties)$/;"	f
M.delete_buf	plugged/toggleterm.nvim/lua/toggleterm/ui.lua	/^function M.delete_buf(term)$/;"	f
M.dismiss_preview 	plugged/goto-preview/lua/goto-preview/lib.lua	/^M.dismiss_preview = function(winnr)$/;"	f
M.escape_pattern	plugged/nvim-window-picker/lua/window-picker/util.lua	/^function M.escape_pattern(text)$/;"	f
M.exec	plugged/toggleterm.nvim/lua/toggleterm.lua	/^function M.exec(cmd, num, size, dir, direction, name, go_back, open)$/;"	f
M.exec_command	plugged/toggleterm.nvim/lua/toggleterm.lua	/^function M.exec_command(args, count)$/;"	f
M.find	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^function M.find(predicate)$/;"	f
M.find_open_windows	plugged/toggleterm.nvim/lua/toggleterm/ui.lua	/^function M.find_open_windows(comparator)$/;"	f
M.find_windows_by_bufnr	plugged/toggleterm.nvim/lua/toggleterm/ui.lua	/^function M.find_windows_by_bufnr(bufnr) return fn.win_findbuf(bufnr) end$/;"	f
M.get	plugged/toggleterm.nvim/lua/toggleterm/config.lua	/^function M.get(key)$/;"	f
M.get	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^function M.get(id, include_hidden)$/;"	f
M.get_all	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^function M.get_all(include_hidden)$/;"	f
M.get_chunk_range	plugged/hlchunk.nvim/lua/hlchunk/utils/utils.lua	/^function M.get_chunk_range(mod, line, opts)$/;"	f
M.get_focused_id	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^function M.get_focused_id()$/;"	f
M.get_handler 	plugged/goto-preview/lua/goto-preview/lib.lua	/^M.get_handler = function(lsp_call, opts)$/;"	f
M.get_hex	plugged/toggleterm.nvim/lua/toggleterm/colors.lua	/^function M.get_hex(name, attr)$/;"	f
M.get_hl	plugged/nvim-window-picker/lua/window-picker/hints/statusline-winbar-hint.lua	/^function M.get_hl(namespace, name)$/;"	f
M.get_indent_range	plugged/hlchunk.nvim/lua/hlchunk/utils/utils.lua	/^function M.get_indent_range(mod, line, opts)$/;"	f
M.get_last_focused	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^function M.get_last_focused()$/;"	f
M.get_line_selection	plugged/toggleterm.nvim/lua/toggleterm/utils.lua	/^function M.get_line_selection(mode)$/;"	f
M.get_or_create_term	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^function M.get_or_create_term(num, dir, direction, name)$/;"	f
M.get_origin_window	plugged/toggleterm.nvim/lua/toggleterm/ui.lua	/^function M.get_origin_window() return origin_window end$/;"	f
M.get_path_parts	plugged/toggleterm.nvim/lua/toggleterm/commandline.lua	/^function M.get_path_parts(typed_path)$/;"	f
M.get_rows_indent	plugged/hlchunk.nvim/lua/hlchunk/utils/utils.lua	/^function M.get_rows_indent(mod, begRow, endRow, opts)$/;"	f
M.get_size	plugged/toggleterm.nvim/lua/toggleterm/ui.lua	/^function M.get_size(size, direction)$/;"	f
M.get_terminal_view	plugged/toggleterm.nvim/lua/toggleterm/ui.lua	/^function M.get_terminal_view() return terminal_view end$/;"	f
M.get_toggled_id	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^function M.get_toggled_id(position)$/;"	f
M.get_user_input_char	plugged/nvim-window-picker/lua/window-picker/util.lua	/^function M.get_user_input_char()$/;"	f
M.get_visual_selection	plugged/toggleterm.nvim/lua/toggleterm/utils.lua	/^function M.get_visual_selection(res)$/;"	f
M.git_dir	plugged/toggleterm.nvim/lua/toggleterm/utils.lua	/^function M.git_dir()$/;"	f
M.goto_previous	plugged/toggleterm.nvim/lua/toggleterm/ui.lua	/^function M.goto_previous() vim.cmd("wincmd p") end$/;"	f
M.guess_direction	plugged/toggleterm.nvim/lua/toggleterm/ui.lua	/^function M.guess_direction()$/;"	f
M.hl_term	plugged/toggleterm.nvim/lua/toggleterm/ui.lua	/^function M.hl_term(term)$/;"	f
M.identify	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^function M.identify(name)$/;"	f
M.is_bright_background	plugged/toggleterm.nvim/lua/toggleterm/colors.lua	/^function M.is_bright_background()$/;"	f
M.is_float	plugged/nvim-window-picker/lua/window-picker/util.lua	/^function M.is_float(window)$/;"	f
M.is_nightly	plugged/toggleterm.nvim/lua/toggleterm/utils.lua	/^function M.is_nightly()$/;"	f
M.load	plugged/toggleterm.nvim/tests/minimal_init.lua	/^function M.load(plugin)$/;"	f
M.lsp_request_definition 	plugged/goto-preview/lua/goto-preview.lua	/^M.lsp_request_definition = function(opts)$/;"	f
M.lsp_request_implementation 	plugged/goto-preview/lua/goto-preview.lua	/^M.lsp_request_implementation = function(opts)$/;"	f
M.lsp_request_references 	plugged/goto-preview/lua/goto-preview.lua	/^M.lsp_request_references = function(opts)$/;"	f
M.lsp_request_type_definition 	plugged/goto-preview/lua/goto-preview.lua	/^M.lsp_request_type_definition = function(opts)$/;"	f
M.map_find	plugged/nvim-window-picker/lua/window-picker/util.lua	/^function M.map_find(tbl, match_func)$/;"	f
M.merge_config	plugged/nvim-window-picker/lua/window-picker/util.lua	/^function M.merge_config(current_config, new_config)$/;"	f
M.notify	plugged/toggleterm.nvim/lua/toggleterm/utils.lua	/^function M.notify(msg, level)$/;"	f
M.open_float	plugged/toggleterm.nvim/lua/toggleterm/ui.lua	/^function M.open_float(term)$/;"	f
M.open_floating_win 	plugged/goto-preview/lua/goto-preview/lib.lua	/^M.open_floating_win = function(target, position, opts)$/;"	f
M.open_split	plugged/toggleterm.nvim/lua/toggleterm/ui.lua	/^function M.open_split(size, term)$/;"	f
M.open_tab	plugged/toggleterm.nvim/lua/toggleterm/ui.lua	/^function M.open_tab(term)$/;"	f
M.open_terminal_view	plugged/toggleterm.nvim/lua/toggleterm/ui.lua	/^function M.open_terminal_view(size, direction)$/;"	f
M.parse	plugged/toggleterm.nvim/lua/toggleterm/commandline.lua	/^function M.parse(args)$/;"	f
M.pick_window	plugged/nvim-window-picker/lua/window-picker/init.lua	/^function M.pick_window(custom_config)$/;"	f
M.remove_win 	plugged/goto-preview/lua/goto-preview/lib.lua	/^M.remove_win = function(win)$/;"	f
M.resize_split	plugged/toggleterm.nvim/lua/toggleterm/ui.lua	/^function M.resize_split(term, size)$/;"	f
M.root	plugged/toggleterm.nvim/tests/minimal_init.lua	/^function M.root(root)$/;"	f
M.run_and_time	plugged/hlchunk.nvim/lua/hlchunk/utils/time.lua	/^function M.run_and_time(f, ...)$/;"	f
M.save_terminal_view	plugged/toggleterm.nvim/lua/toggleterm/ui.lua	/^function M.save_terminal_view(terminals, focus_term_id)$/;"	f
M.save_window_size	plugged/toggleterm.nvim/lua/toggleterm/ui.lua	/^function M.save_window_size(direction, window)$/;"	f
M.scroll_to_bottom	plugged/toggleterm.nvim/lua/toggleterm/ui.lua	/^function M.scroll_to_bottom()$/;"	f
M.send_lines_to_terminal	plugged/toggleterm.nvim/lua/toggleterm.lua	/^function M.send_lines_to_terminal(selection_type, trim_spaces, cmd_data)$/;"	f
M.set	plugged/toggleterm.nvim/lua/toggleterm/config.lua	/^function M.set(user_conf)$/;"	f
M.set_hl	plugged/toggleterm.nvim/lua/toggleterm/colors.lua	/^function M.set_hl(name, opts) api.nvim_set_hl(0, name, convert_options(opts)) end$/;"	f
M.set_winbar	plugged/toggleterm.nvim/lua/toggleterm/ui.lua	/^function M.set_winbar(term)$/;"	f
M.setup	plugged/nvim-cursorline/lua/nvim-cursorline.lua	/^function M.setup(options)$/;"	f
M.setup	plugged/nvim-window-picker/lua/window-picker/init.lua	/^function M.setup(opts)$/;"	f
M.setup	plugged/toggleterm.nvim/lua/toggleterm.lua	/^function M.setup(user_prefs)$/;"	f
M.setup	plugged/toggleterm.nvim/tests/minimal_init.lua	/^function M.setup()$/;"	f
M.setup 	plugged/goto-preview/lua/goto-preview.lua	/^M.setup = function(conf)$/;"	f
M.setup_aucmds 	plugged/goto-preview/lua/goto-preview/lib.lua	/^M.setup_aucmds = function()$/;"	f
M.setup_lib 	plugged/goto-preview/lua/goto-preview/lib.lua	/^M.setup_lib = function(conf)$/;"	f
M.shade_color	plugged/toggleterm.nvim/lua/toggleterm/colors.lua	/^function M.shade_color(color, percent)$/;"	f
M.stopinsert	plugged/toggleterm.nvim/lua/toggleterm/ui.lua	/^function M.stopinsert() vim.cmd("stopinsert!") end$/;"	f
M.switch_buf	plugged/toggleterm.nvim/lua/toggleterm/ui.lua	/^function M.switch_buf(buf)$/;"	f
M.tablefind	plugged/goto-preview/lua/goto-preview/lib.lua	/^function M.tablefind(tab, el)$/;"	f
M.tbl_any	plugged/nvim-window-picker/lua/window-picker/util.lua	/^function M.tbl_any(tbl, match_func)$/;"	f
M.tbl_filter	plugged/nvim-window-picker/lua/window-picker/util.lua	/^function M.tbl_filter(tbl, filter_func)$/;"	f
M.tbl_filter_empty	plugged/toggleterm.nvim/lua/toggleterm/utils.lua	/^function M.tbl_filter_empty(tbl)$/;"	f
M.term_has_open_win	plugged/toggleterm.nvim/lua/toggleterm/ui.lua	/^function M.term_has_open_win(term)$/;"	f
M.toggle	plugged/toggleterm.nvim/lua/toggleterm.lua	/^function M.toggle(count, size, dir, direction, name)$/;"	f
M.toggle_all	plugged/toggleterm.nvim/lua/toggleterm.lua	/^function M.toggle_all(force)$/;"	f
M.toggle_command	plugged/toggleterm.nvim/lua/toggleterm.lua	/^function M.toggle_command(args, count)$/;"	f
M.update_float	plugged/toggleterm.nvim/lua/toggleterm/ui.lua	/^function M.update_float(term)$/;"	f
M.update_origin_window	plugged/toggleterm.nvim/lua/toggleterm/ui.lua	/^function M.update_origin_window(term_window)$/;"	f
M.winbar	plugged/toggleterm.nvim/lua/toggleterm/ui.lua	/^function M.winbar(id)$/;"	f
M.wo_setlocal	plugged/toggleterm.nvim/lua/toggleterm/utils.lua	/^function M.wo_setlocal(win, option, value)$/;"	f
M:_buffer_options_filter	plugged/nvim-window-picker/lua/window-picker/filters/default-window-filter.lua	/^function M:_buffer_options_filter(windows)$/;"	f
M:_current_window_filter	plugged/nvim-window-picker/lua/window-picker/filters/default-window-filter.lua	/^function M:_current_window_filter(windows)$/;"	f
M:_file_name_contains_filter	plugged/nvim-window-picker/lua/window-picker/filters/default-window-filter.lua	/^function M:_file_name_contains_filter(windows)$/;"	f
M:_file_path_contains_filter	plugged/nvim-window-picker/lua/window-picker/filters/default-window-filter.lua	/^function M:_file_path_contains_filter(windows)$/;"	f
M:_find_matching_win_for_char	plugged/nvim-window-picker/lua/window-picker/pickers/window-picker.lua	/^function M:_find_matching_win_for_char(user_input_char, windows)$/;"	f
M:_get_float_win_pos	plugged/nvim-window-picker/lua/window-picker/hints/floating-big-letter-hint.lua	/^function M:_get_float_win_pos(window)$/;"	f
M:_get_windows	plugged/nvim-window-picker/lua/window-picker/pickers/window-picker.lua	/^function M:_get_windows()$/;"	f
M:_show_letter_in_window	plugged/nvim-window-picker/lua/window-picker/hints/floating-big-letter-hint.lua	/^function M:_show_letter_in_window(window, char)$/;"	f
M:_window_option_filter	plugged/nvim-window-picker/lua/window-picker/filters/default-window-filter.lua	/^function M:_window_option_filter(windows)$/;"	f
M:build	plugged/nvim-window-picker/lua/window-picker/builder.lua	/^function M:build()$/;"	f
M:clear	plugged/nvim-window-picker/lua/window-picker/hints/floating-big-letter-hint.lua	/^function M:clear()$/;"	f
M:clear	plugged/nvim-window-picker/lua/window-picker/hints/statusline-hint.lua	/^function M:clear()$/;"	f
M:clear	plugged/nvim-window-picker/lua/window-picker/hints/statusline-winbar-hint.lua	/^function M:clear()$/;"	f
M:config_filter	plugged/nvim-window-picker/lua/window-picker/configurer.lua	/^function M:config_filter(filter)$/;"	f
M:config_hint	plugged/nvim-window-picker/lua/window-picker/configurer.lua	/^function M:config_hint(hint)$/;"	f
M:config_picker	plugged/nvim-window-picker/lua/window-picker/configurer.lua	/^function M:config_picker(picker)$/;"	f
M:draw	plugged/nvim-window-picker/lua/window-picker/hints/floating-big-letter-hint.lua	/^function M:draw(windows)$/;"	f
M:draw	plugged/nvim-window-picker/lua/window-picker/hints/statusline-hint.lua	/^function M:draw(windows)$/;"	f
M:draw	plugged/nvim-window-picker/lua/window-picker/hints/statusline-winbar-hint.lua	/^function M:draw(windows)$/;"	f
M:filter_windows	plugged/nvim-window-picker/lua/window-picker/filters/default-window-filter.lua	/^function M:filter_windows(windows)$/;"	f
M:get_hint_type	plugged/nvim-window-picker/lua/window-picker/hints/statusline-winbar-hint.lua	/^function M:get_hint_type()$/;"	f
M:new	plugged/nvim-window-picker/lua/window-picker/builder.lua	/^function M:new(configurer)$/;"	f
M:new	plugged/nvim-window-picker/lua/window-picker/configurer.lua	/^function M:new(config)$/;"	f
M:new	plugged/nvim-window-picker/lua/window-picker/filters/default-window-filter.lua	/^function M:new()$/;"	f
M:new	plugged/nvim-window-picker/lua/window-picker/hints/floating-big-letter-hint.lua	/^function M:new()$/;"	f
M:new	plugged/nvim-window-picker/lua/window-picker/hints/statusline-hint.lua	/^function M:new()$/;"	f
M:new	plugged/nvim-window-picker/lua/window-picker/pickers/window-picker.lua	/^function M:new()$/;"	f
M:pick_window	plugged/nvim-window-picker/lua/window-picker/pickers/window-picker.lua	/^function M:pick_window()$/;"	f
M:restore_global_opts	plugged/nvim-window-picker/lua/window-picker/hints/statusline-winbar-hint.lua	/^function M:restore_global_opts()$/;"	f
M:restore_win_hl	plugged/nvim-window-picker/lua/window-picker/hints/statusline-winbar-hint.lua	/^function M:restore_win_hl()$/;"	f
M:restore_win_opts	plugged/nvim-window-picker/lua/window-picker/hints/statusline-winbar-hint.lua	/^function M:restore_win_opts()$/;"	f
M:save_window_options	plugged/nvim-window-picker/lua/window-picker/hints/statusline-hint.lua	/^function M:save_window_options(windows, win_opt_to_cap)$/;"	f
M:set_config	plugged/nvim-window-picker/lua/window-picker/builder.lua	/^function M:set_config(config)$/;"	f
M:set_config	plugged/nvim-window-picker/lua/window-picker/filters/default-window-filter.lua	/^function M:set_config(config)$/;"	f
M:set_config	plugged/nvim-window-picker/lua/window-picker/hints/floating-big-letter-hint.lua	/^function M:set_config(config)$/;"	f
M:set_config	plugged/nvim-window-picker/lua/window-picker/hints/statusline-hint.lua	/^function M:set_config(config)$/;"	f
M:set_config	plugged/nvim-window-picker/lua/window-picker/hints/statusline-winbar-hint.lua	/^function M:set_config(config)$/;"	f
M:set_config	plugged/nvim-window-picker/lua/window-picker/pickers/window-picker.lua	/^function M:set_config(config)$/;"	f
M:set_filter	plugged/nvim-window-picker/lua/window-picker/builder.lua	/^function M:set_filter(filter)$/;"	f
M:set_filter	plugged/nvim-window-picker/lua/window-picker/pickers/window-picker.lua	/^function M:set_filter(filter)$/;"	f
M:set_global_opts	plugged/nvim-window-picker/lua/window-picker/hints/statusline-winbar-hint.lua	/^function M:set_global_opts(opts)$/;"	f
M:set_hint	plugged/nvim-window-picker/lua/window-picker/builder.lua	/^function M:set_hint(hint)$/;"	f
M:set_hint	plugged/nvim-window-picker/lua/window-picker/pickers/window-picker.lua	/^function M:set_hint(hint)$/;"	f
M:set_picker	plugged/nvim-window-picker/lua/window-picker/builder.lua	/^function M:set_picker(picker)$/;"	f
M:set_plugin_hl	plugged/nvim-window-picker/lua/window-picker/hints/statusline-winbar-hint.lua	/^function M:set_plugin_hl()$/;"	f
M:set_temp_hint_hl	plugged/nvim-window-picker/lua/window-picker/hints/statusline-winbar-hint.lua	/^function M:set_temp_hint_hl(hint_type)$/;"	f
M:set_win_hl	plugged/nvim-window-picker/lua/window-picker/hints/statusline-winbar-hint.lua	/^function M:set_win_hl(window, hint_type)$/;"	f
M:set_win_opts	plugged/nvim-window-picker/lua/window-picker/hints/statusline-winbar-hint.lua	/^function M:set_win_opts(window, opts)$/;"	f
MIDDLE_BLOCKS	plugged/ale/test/script/block-padding-checker	/^MIDDLE_BLOCKS = set(['else', 'elseif', 'catch', 'finally'])$/;"	v
Map	plugged/vim-signature/autoload/signature/utils.vim	/^function! s:Map(mode, key, map_lhs_default, map_rhs)                                                              " {{{1$/;"	f
MapKeys	plugged/tagbar/autoload/tagbar.vim	/^function! s:MapKeys() abort$/;"	f
Message	plugged/ale/autoload/ale/lsp/reset.vim	/^function! s:Message(message) abort$/;"	f
Minimap	plugged/minimap.vim/plugin/minimap.vim	/^command! Minimap                call minimap#vim#MinimapOpen()$/;"	c
MinimapAutoStart	plugged/minimap.vim/plugin/minimap.vim	/^    augroup MinimapAutoStart$/;"	a
MinimapClose	plugged/minimap.vim/plugin/minimap.vim	/^command! MinimapClose           call minimap#vim#MinimapClose()$/;"	c
MinimapColorSchemes	plugged/minimap.vim/plugin/minimap.vim	/^    augroup MinimapColorSchemes$/;"	a
MinimapRefresh	plugged/minimap.vim/plugin/minimap.vim	/^command! MinimapRefresh         call minimap#vim#MinimapRefresh()$/;"	c
MinimapRescan	plugged/minimap.vim/plugin/minimap.vim	/^command! MinimapRescan          call minimap#vim#MinimapRescan()$/;"	c
MinimapToggle	plugged/minimap.vim/plugin/minimap.vim	/^command! MinimapToggle          call minimap#vim#MinimapToggle()$/;"	c
MinimapUpdateHighlight	plugged/minimap.vim/plugin/minimap.vim	/^command! MinimapUpdateHighlight call minimap#vim#MinimapUpdateHighlight()$/;"	c
MinimizeMaxFoldLevel	plugged/tagbar/autoload/tagbar.vim	/^function! s:MinimizeMaxFoldLevel(fileinfo, tags) abort$/;"	f
MultipleCursorsFind	plugged/vim-multiple-cursors/plugin/multiple_cursors.vim	/^command! -nargs=1 -range=% MultipleCursorsFind$/;"	c
NeoVimCallback	plugged/ale/autoload/ale/job.vim	/^function! s:NeoVimCallback(job, data, event) abort$/;"	f
NeoVimOutputCallback	plugged/ale/autoload/ale/socket.vim	/^function! s:NeoVimOutputCallback(channel_id, data, event) abort$/;"	f
NvimClose	plugged/ale/autoload/ale/floating_preview.vim	/^function! s:NvimClose() abort$/;"	f
NvimCreate	plugged/ale/autoload/ale/floating_preview.vim	/^function! s:NvimCreate(options) abort$/;"	f
NvimPrepareWindowContent	plugged/ale/autoload/ale/floating_preview.vim	/^function! s:NvimPrepareWindowContent(lines) abort$/;"	f
NvimShow	plugged/ale/autoload/ale/floating_preview.vim	/^function! s:NvimShow(lines, options) abort$/;"	f
O	plugged/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> O <NOP>$/;"	m
OPERATOR_END_RE	plugged/ale/test/script/block-padding-checker	/^OPERATOR_END_RE = re.compile(r'(&&|\\|\\||\\+|-|\\*\\| \/)$')$/;"	v
OnReady	plugged/ale/autoload/ale/codefix.vim	/^function! s:OnReady($/;"	f
OnReady	plugged/ale/autoload/ale/completion.vim	/^function! s:OnReady(linter, lsp_details) abort$/;"	f
OnReady	plugged/ale/autoload/ale/definition.vim	/^function! s:OnReady(line, column, options, capability, linter, lsp_details) abort$/;"	f
OnReady	plugged/ale/autoload/ale/filerename.vim	/^function! s:OnReady(options, linter, lsp_details) abort$/;"	f
OnReady	plugged/ale/autoload/ale/hover.vim	/^function! s:OnReady(line, column, opt, linter, lsp_details) abort$/;"	f
OnReady	plugged/ale/autoload/ale/organize_imports.vim	/^function! s:OnReady(linter, lsp_details) abort$/;"	f
OnReady	plugged/ale/autoload/ale/references.vim	/^function! s:OnReady(line, column, options, linter, lsp_details) abort$/;"	f
OnReady	plugged/ale/autoload/ale/rename.vim	/^function! s:OnReady(line, column, options, linter, lsp_details) abort$/;"	f
OnReady	plugged/ale/autoload/ale/symbol.vim	/^function! s:OnReady(query, options, linter, lsp_details) abort$/;"	f
OnReadyForCustomRequests	plugged/ale/autoload/ale/lsp_linter.vim	/^function! s:OnReadyForCustomRequests(args, linter, lsp_details) abort$/;"	f
Open	plugged/ale/autoload/ale/preview.vim	/^function! s:Open(open_in) abort$/;"	f
OpenCompletionMenu	plugged/ale/autoload/ale/completion.vim	/^function! s:OpenCompletionMenu(...) abort$/;"	f
OpenFold	plugged/tagbar/autoload/tagbar.vim	/^function! s:OpenFold() abort$/;"	f
OpenJDTLink	plugged/ale/autoload/ale/uri/jdt.vim	/^function! s:OpenJDTLink(root, uri, line, column, options, result) abort$/;"	f
OpenParents	plugged/tagbar/autoload/tagbar.vim	/^function! s:OpenParents(...) abort$/;"	f
OpenWindow	plugged/tagbar/autoload/tagbar.vim	/^function! s:OpenWindow(flags) abort$/;"	f
OrganizeImports	plugged/ale/autoload/ale/organize_imports.vim	/^function! s:OrganizeImports(linter) abort$/;"	f
PanicOutput	plugged/ale/autoload/ale/handlers/haskell.vim	/^function! s:PanicOutput(lines) abort$/;"	f
ParseInlinedFunctionProblems	plugged/ale/autoload/ale/handlers/gcc.vim	/^function! s:ParseInlinedFunctionProblems(buffer, lines) abort$/;"	f
ParseProblemsInHeaders	plugged/ale/autoload/ale/handlers/gcc.vim	/^function! s:ParseProblemsInHeaders(buffer, lines) abort$/;"	f
ParseTagline	plugged/tagbar/autoload/tagbar.vim	/^function! s:ParseTagline(part1, part2, typeinfo, fileinfo) abort$/;"	f
Place	plugged/vim-signature/autoload/signature/mark.vim	/^function! s:Place(mark)                                                                                           " {{{1$/;"	f
PrepareWrappedCommand	plugged/ale/autoload/ale/job.vim	/^function! s:PrepareWrappedCommand(original_wrapper, command) abort$/;"	f
PrintHelp	plugged/tagbar/autoload/tagbar.vim	/^function! s:PrintHelp() abort$/;"	f
PrintKinds	plugged/tagbar/autoload/tagbar.vim	/^function! s:PrintKinds(typeinfo, fileinfo) abort$/;"	f
PrintTag	plugged/tagbar/autoload/tagbar.vim	/^function! s:PrintTag(tag, depth, output, fileinfo, typeinfo) abort$/;"	f
PriorityCmd	plugged/ale/autoload/ale/sign.vim	/^function! s:PriorityCmd() abort$/;"	f
ProcessDeferredCommands	plugged/ale/autoload/ale/assert.vim	/^function! s:ProcessDeferredCommands(initial_result) abort$/;"	f
ProcessDeferredCwds	plugged/ale/autoload/ale/assert.vim	/^function! s:ProcessDeferredCwds(initial_command, initial_cwd) abort$/;"	f
ProcessFile	plugged/tagbar/autoload/tagbar.vim	/^function! s:ProcessFile(fname, ftype) abort$/;"	f
ProcessTag	plugged/tagbar/autoload/tagbar.vim	/^function! s:ProcessTag(name, filename, pattern, fields, is_split, typeinfo, fileinfo) abort$/;"	f
Pydocstring	plugged/vim-pydocstring/ftplugin/python/pydocstring.vim	/^command! -buffer -nargs=0 -range=0 Pydocstring call pydocstring#insert(<q-args>, <count>, <line1>, <line2>)$/;"	c
PydocstringFormat	plugged/vim-pydocstring/ftplugin/python/pydocstring.vim	/^command! -buffer -nargs=0 PydocstringFormat call pydocstring#format()$/;"	c
RUN_TESTS	plugged/ale/run-tests.bat	/^:RUN_TESTS$/;"	l
ReadClassFileContents	plugged/ale/autoload/ale/uri/jdt.vim	/^function! s:ReadClassFileContents(uri, result) abort$/;"	f
RefreshLine	plugged/vim-signature/autoload/signature/sign.vim	/^function! s:RefreshLine(lnum)                                                                                      "{{{1$/;"	f
RemapItemTypes	plugged/ale/autoload/ale/engine.vim	/^function! s:RemapItemTypes(type_map, loclist) abort$/;"	f
RemoveNewerKeys	plugged/ale/autoload/ale/test.vim	/^function! RemoveNewerKeys(results) abort$/;"	f
RemoveProblemsForDisabledLinters	plugged/ale/autoload/ale/engine.vim	/^function! s:RemoveProblemsForDisabledLinters(buffer, linters) abort$/;"	f
RemoveUnicodeQuotes	plugged/ale/autoload/ale/handlers/flawfinder.vim	/^function! s:RemoveUnicodeQuotes(text) abort$/;"	f
RemoveUnicodeQuotes	plugged/ale/autoload/ale/handlers/gcc.vim	/^function! s:RemoveUnicodeQuotes(text) abort$/;"	f
RemoveUnicodeQuotes	plugged/ale/autoload/ale/handlers/pony.vim	/^function! s:RemoveUnicodeQuotes(text) abort$/;"	f
RenderContent	plugged/tagbar/autoload/tagbar.vim	/^function! s:RenderContent(...) abort$/;"	f
RenderKeepView	plugged/tagbar/autoload/tagbar.vim	/^function! s:RenderKeepView(...) abort$/;"	f
ReopenWindow	plugged/tagbar/autoload/tagbar.vim	/^function! s:ReopenWindow(delbufname) abort$/;"	f
ReplaceCompletionOptions	plugged/ale/autoload/ale/completion.vim	/^function! s:ReplaceCompletionOptions(source) abort$/;"	f
ReportNoAvailableMarks	plugged/vim-signature/autoload/signature/mark.vim	/^function! s:ReportNoAvailableMarks()                                                                              " {{{1$/;"	f
RestoreSession	plugged/tagbar/autoload/tagbar.vim	/^function! s:RestoreSession() abort$/;"	f
RestoreViewIfNeeded	plugged/ale/autoload/ale/list.vim	/^function! s:RestoreViewIfNeeded(buffer) abort$/;"	f
RunFixer	plugged/ale/autoload/ale/fix.vim	/^function! s:RunFixer(options) abort$/;"	f
RunIfExecutable	plugged/ale/autoload/ale/engine.vim	/^function! s:RunIfExecutable(buffer, linter, lint_file, executable) abort$/;"	f
RunJob	plugged/ale/autoload/ale/engine.vim	/^function! s:RunJob(command, options) abort$/;"	f
RunJob	plugged/ale/autoload/ale/fix.vim	/^function! s:RunJob(result, options) abort$/;"	f
RunLinter	plugged/ale/autoload/ale/engine.vim	/^function! s:RunLinter(buffer, linter, lint_file) abort$/;"	f
RunLinters	plugged/ale/autoload/ale/engine.vim	/^function! s:RunLinters($/;"	f
SAME_INDENTATION_SET	plugged/ale/test/script/block-padding-checker	/^SAME_INDENTATION_SET = set(['\\\\'])$/;"	v
SHOW_RESULTS	plugged/ale/run-tests.bat	/^:SHOW_RESULTS$/;"	l
START_BLOCKS	plugged/ale/test/script/block-padding-checker	/^START_BLOCKS = set(['if', 'for', 'while', 'try', 'function'])$/;"	v
SendInitMessage	plugged/ale/autoload/ale/lsp.vim	/^function! s:SendInitMessage(conn) abort$/;"	f
SendMessageData	plugged/ale/autoload/ale/lsp.vim	/^function! s:SendMessageData(conn, data) abort$/;"	f
SetFoldLevel	plugged/tagbar/autoload/tagbar.vim	/^function! s:SetFoldLevel(level, force) abort$/;"	f
SetFoldLevelRecursive	plugged/tagbar/autoload/tagbar.vim	/^function! s:SetFoldLevelRecursive(fileinfo, tags, level) abort$/;"	f
SetListsImpl	plugged/ale/autoload/ale/list.vim	/^function! s:SetListsImpl(timer_id, buffer, loclist) abort$/;"	f
SetStatusLine	plugged/tagbar/autoload/tagbar.vim	/^function! s:SetStatusLine() abort$/;"	f
Setup	plugged/ale/autoload/ale/code_action.vim	/^function! s:Setup(enabled) abort$/;"	f
Setup	plugged/ale/autoload/ale/completion.vim	/^function! s:Setup(enabled) abort$/;"	f
ShouldClose	plugged/ale/autoload/ale/list.vim	/^function! s:ShouldClose(buffer) abort$/;"	f
ShouldIgnoreDiagnostics	plugged/ale/autoload/ale/lsp_linter.vim	/^function! s:ShouldIgnoreDiagnostics(buffer, linter) abort$/;"	f
ShouldOpen	plugged/ale/autoload/ale/list.vim	/^function! s:ShouldOpen(buffer, loclist_len) abort$/;"	f
ShouldSuggestForType	plugged/ale/autoload/ale/fix/registry.vim	/^function! s:ShouldSuggestForType(suggested_filetypes, type_list) abort$/;"	f
ShowCursorDetailForItem	plugged/ale/autoload/ale/cursor.vim	/^function! s:ShowCursorDetailForItem(loc, options) abort$/;"	f
ShowInPreviewWin	plugged/tagbar/autoload/tagbar.vim	/^function! s:ShowInPreviewWin() abort$/;"	f
ShowPrototype	plugged/tagbar/autoload/tagbar.vim	/^function! s:ShowPrototype(short) abort$/;"	f
ShrinkIfExpanded	plugged/tagbar/autoload/tagbar.vim	/^function! s:ShrinkIfExpanded() abort$/;"	f
SignatureListBufferMarks	plugged/vim-signature/plugin/signature.vim	/^command! -nargs=? SignatureListBufferMarks call signature#mark#List(0, <args>)$/;"	c
SignatureListGlobalMarks	plugged/vim-signature/plugin/signature.vim	/^command! -nargs=? SignatureListGlobalMarks call signature#mark#List(1, <args>)$/;"	c
SignatureListMarkers	plugged/vim-signature/plugin/signature.vim	/^command! -nargs=* SignatureListMarkers     call signature#marker#List(<args>)$/;"	c
SignatureRefresh	plugged/vim-signature/plugin/signature.vim	/^command! -nargs=0 SignatureRefresh         call signature#sign#Refresh(1)$/;"	c
SignatureToggleSigns	plugged/vim-signature/plugin/signature.vim	/^command! -nargs=0 SignatureToggleSigns     call signature#utils#Toggle()$/;"	c
Source	plugged/ale/rplugin/python3/deoplete/sources/ale.py	/^class Source(Base):$/;"	c
StartIfExecutable	plugged/ale/autoload/ale/lsp_linter.vim	/^function! s:StartIfExecutable(options, executable) abort$/;"	f
StartLSP	plugged/ale/autoload/ale/lsp_linter.vim	/^function! s:StartLSP(options, address, executable, command) abort$/;"	f
StartWithAddress	plugged/ale/autoload/ale/lsp_linter.vim	/^function! s:StartWithAddress(options, address) abort$/;"	f
StartWithCommand	plugged/ale/autoload/ale/lsp_linter.vim	/^function! s:StartWithCommand(options, executable, command) abort$/;"	f
State.New	plugged/tagbar/autoload/tagbar/state.vim	/^function! s:State.New() abort dict$/;"	f
State.getCurrent	plugged/tagbar/autoload/tagbar/state.vim	/^function! s:State.getCurrent(force_current) abort dict$/;"	f
State.setCurrentFile	plugged/tagbar/autoload/tagbar/state.vim	/^function! s:State.setCurrentFile(fileinfo) abort dict$/;"	f
State.setPaused	plugged/tagbar/autoload/tagbar/state.vim	/^function! s:State.setPaused() abort dict$/;"	f
StopCurrentJobs	plugged/ale/autoload/ale/engine.vim	/^function! s:StopCurrentJobs(buffer, clear_lint_file_jobs, linter_slots) abort$/;"	f
StopCursorTimer	plugged/ale/autoload/ale/cursor.vim	/^function! s:StopCursorTimer() abort$/;"	f
StopCursorTimer	plugged/ale/autoload/ale/virtualtext.vim	/^function! s:StopCursorTimer() abort$/;"	f
StripAnsiCodes	plugged/ale/ale_linters/bitbake/oelint_adv.vim	/^function! StripAnsiCodes(line) abort$/;"	f
Subst	plugged/ale/ale_linters/prolog/swipl.vim	/^function! s:Subst(format, vars) abort$/;"	f
SyntaxFileExists	plugged/ale/autoload/ale/hover.vim	/^function! s:SyntaxFileExists(syntax_file) abort$/;"	f
TERMINATORS	plugged/ale/test/script/block-padding-checker	/^TERMINATORS = set(['return', 'throw'])$/;"	v
Tagbar	plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=? Tagbar              call tagbar#ToggleWindow(<f-args>)$/;"	c
TagbarBalloonExpr	plugged/tagbar/autoload/tagbar.vim	/^function! TagbarBalloonExpr() abort$/;"	f
TagbarBufName	plugged/tagbar/autoload/tagbar.vim	/^function! s:TagbarBufName() abort$/;"	f
TagbarClose	plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarClose         call tagbar#CloseWindow()$/;"	c
TagbarCurrentTag	plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=* TagbarCurrentTag    echo tagbar#currenttag('%s', 'No current tag', <f-args>)$/;"	c
TagbarDebug	plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=? TagbarDebug         call tagbar#debug#start_debug(<f-args>)$/;"	c
TagbarDebugEnd	plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarDebugEnd      call tagbar#debug#stop_debug()$/;"	c
TagbarForceUpdate	plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarForceUpdate   call tagbar#ForceUpdate()$/;"	c
TagbarGetTypeConfig	plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=1 TagbarGetTypeConfig call tagbar#gettypeconfig(<f-args>)$/;"	c
TagbarJump	plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarJump   call tagbar#jump()$/;"	c
TagbarJumpNext	plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarJumpNext      call tagbar#jumpToNearbyTag(1)$/;"	c
TagbarJumpPrev	plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarJumpPrev      call tagbar#jumpToNearbyTag(-1)$/;"	c
TagbarOpen	plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=? TagbarOpen          call tagbar#OpenWindow(<f-args>)$/;"	c
TagbarOpenAutoClose	plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarOpenAutoClose call tagbar#OpenWindow('fcj')$/;"	c
TagbarSession	plugged/tagbar/plugin/tagbar.vim	/^augroup TagbarSession$/;"	a
TagbarSetFoldlevel	plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=1 -bang TagbarSetFoldlevel  call tagbar#SetFoldLevel(<args>, <bang>0)$/;"	c
TagbarShowTag	plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarShowTag       call tagbar#highlighttag(1, 1)$/;"	c
TagbarToggle	plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=? TagbarToggle        call tagbar#ToggleWindow(<f-args>)$/;"	c
TagbarTogglePause	plugged/tagbar/plugin/tagbar.vim	/^command! -nargs=0 TagbarTogglePause   call tagbar#toggle_pause()$/;"	c
TemporaryFilename	plugged/ale/autoload/ale/command.vim	/^function! s:TemporaryFilename(buffer) abort$/;"	f
TemporaryPSScript	plugged/ale/autoload/ale/powershell.vim	/^function! s:TemporaryPSScript(buffer, input) abort$/;"	f
Terminal:__add	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^function Terminal:__add()$/;"	f
Terminal:__make_output_handler	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^function Terminal:__make_output_handler(handler)$/;"	f
Terminal:__restore_mode	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^function Terminal:__restore_mode() self:set_mode(self.__state.mode) end$/;"	f
Terminal:__resurrect	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^function Terminal:__resurrect()$/;"	f
Terminal:__set_ft_options	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^function Terminal:__set_ft_options()$/;"	f
Terminal:__set_options	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^function Terminal:__set_options()$/;"	f
Terminal:__set_win_options	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^function Terminal:__set_win_options()$/;"	f
Terminal:__spawn	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^function Terminal:__spawn()$/;"	f
Terminal:_display_name	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^function Terminal:_display_name() return self.display_name or vim.split(self.name, ";")[1] end$/;"	f
Terminal:change_dir	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^function Terminal:change_dir(dir, go_back)$/;"	f
Terminal:change_direction	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^function Terminal:change_direction(direction)$/;"	f
Terminal:clear	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^function Terminal:clear() self:send("clear") end$/;"	f
Terminal:close	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^function Terminal:close()$/;"	f
Terminal:focus	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^function Terminal:focus()$/;"	f
Terminal:is_open	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^function Terminal:is_open()$/;"	f
Terminal:is_split	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^function Terminal:is_split()$/;"	f
Terminal:new	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^function Terminal:new(term)$/;"	f
Terminal:open	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^function Terminal:open(size, direction)$/;"	f
Terminal:persist_mode	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^function Terminal:persist_mode()$/;"	f
Terminal:resize	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^function Terminal:resize(size)$/;"	f
Terminal:scroll_bottom	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^function Terminal:scroll_bottom()$/;"	f
Terminal:send	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^function Terminal:send(cmd, go_back)$/;"	f
Terminal:set_mode	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^function Terminal:set_mode(m)$/;"	f
Terminal:shutdown	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^function Terminal:shutdown()$/;"	f
Terminal:spawn	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^function Terminal:spawn()$/;"	f
Terminal:toggle	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^function Terminal:toggle(size, direction)$/;"	f
Testfile	plugged/ale/test/test-files/ocaml/testfile.ml	1;"	M
TimerHandler	plugged/ale/autoload/ale/completion.vim	/^function! s:TimerHandler(...) abort$/;"	f
ToggleAutoclose	plugged/tagbar/autoload/tagbar.vim	/^function! s:ToggleAutoclose() abort$/;"	f
ToggleCaseInsensitive	plugged/tagbar/autoload/tagbar.vim	/^function! s:ToggleCaseInsensitive() abort$/;"	f
ToggleFold	plugged/tagbar/autoload/tagbar.vim	/^function! s:ToggleFold() abort$/;"	f
ToggleHelp	plugged/tagbar/autoload/tagbar.vim	/^function! s:ToggleHelp() abort$/;"	f
ToggleHideNonPublicTags	plugged/tagbar/autoload/tagbar.vim	/^function! s:ToggleHideNonPublicTags() abort$/;"	f
TogglePause	plugged/tagbar/autoload/tagbar.vim	/^function! s:TogglePause() abort$/;"	f
ToggleSort	plugged/tagbar/autoload/tagbar.vim	/^function! s:ToggleSort() abort$/;"	f
ToggleWindow	plugged/tagbar/autoload/tagbar.vim	/^function! s:ToggleWindow(flags) abort$/;"	f
TransformUserTypeDef	plugged/tagbar/autoload/tagbar.vim	/^function! s:TransformUserTypeDef(def) abort$/;"	f
Trim	plugged/ale/ale_linters/prolog/swipl.vim	/^function! s:Trim(str) abort$/;"	f
UpdateCacheIfNecessary	plugged/ale/autoload/ale/statusline.vim	/^function! s:UpdateCacheIfNecessary(buffer) abort$/;"	f
UpdateCapabilities	plugged/ale/autoload/ale/lsp.vim	/^function! s:UpdateCapabilities(conn, capabilities) abort$/;"	f
UpdateCursor	plugged/ale/autoload/ale/code_action.vim	/^function! s:UpdateCursor(cursor, start, end, offset) abort$/;"	f
UpdateLineNumbers	plugged/ale/autoload/ale/sign.vim	/^function! s:UpdateLineNumbers(buffer, current_sign_list, loclist) abort$/;"	f
UpdateMenu	plugged/ale/autoload/ale/code_action.vim	/^function! s:UpdateMenu(data, menu_items) abort$/;"	f
UsingModule	plugged/ale/ale_linters/python/flake8.vim	/^function! s:UsingModule(buffer) abort$/;"	f
UsingModule	plugged/ale/ale_linters/python/flakehell.vim	/^function! s:UsingModule(buffer) abort$/;"	f
VADER_OUTPUT_FILE	plugged/ale/run-tests.bat	/^set VADER_OUTPUT_FILE=%~dp0\\vader_output$/;"	v
VimClose	plugged/ale/autoload/ale/floating_preview.vim	/^function! s:VimClose() abort$/;"	f
VimCloseCallback	plugged/ale/autoload/ale/job.vim	/^function! s:VimCloseCallback(channel) abort$/;"	f
VimCreate	plugged/ale/autoload/ale/floating_preview.vim	/^function! s:VimCreate(options) abort$/;"	f
VimErrorCallback	plugged/ale/autoload/ale/job.vim	/^function! s:VimErrorCallback(channel, data) abort$/;"	f
VimExitCallback	plugged/ale/autoload/ale/job.vim	/^function! s:VimExitCallback(job, exit_code) abort$/;"	f
VimMock	plugged/ale/test/python/test_deoplete_source.py	/^class VimMock(object):$/;"	c
VimOutputCallback	plugged/ale/autoload/ale/job.vim	/^function! s:VimOutputCallback(channel, data) abort$/;"	f
VimOutputCallback	plugged/ale/autoload/ale/socket.vim	/^function! s:VimOutputCallback(channel, data) abort$/;"	f
VimShow	plugged/ale/autoload/ale/floating_preview.vim	/^function! s:VimShow(lines, options) abort$/;"	f
WHITESPACE_AFTER_SET	plugged/ale/test/script/block-padding-checker	/^WHITESPACE_AFTER_SET = END_BLOCKS$/;"	v
WHITESPACE_BEFORE_SET	plugged/ale/test/script/block-padding-checker	/^WHITESPACE_BEFORE_SET = START_BLOCKS | TERMINATORS$/;"	v
WHITESPACE_FORBIDDEN_AFTER_SET	plugged/ale/test/script/block-padding-checker	/^WHITESPACE_FORBIDDEN_AFTER_SET = START_BLOCKS | MIDDLE_BLOCKS$/;"	v
WHITESPACE_FORBIDDEN_BEFORE_SET	plugged/ale/test/script/block-padding-checker	/^WHITESPACE_FORBIDDEN_BEFORE_SET = END_BLOCKS | MIDDLE_BLOCKS$/;"	v
WinFindBuf	plugged/ale/autoload/ale/list.vim	/^function! s:WinFindBuf(buffer) abort$/;"	f
ZoomWindow	plugged/tagbar/autoload/tagbar.vim	/^function! s:ZoomWindow() abort$/;"	f
["<S-Tab>"] 	lua/plugins/example.lua	/^        ["<S-Tab>"] = cmp.mapping(function(fallback)$/;"	f
["<Tab>"] 	lua/plugins/example.lua	/^        ["<Tab>"] = cmp.mapping(function(fallback)$/;"	f
["function"] 	plugged/hlchunk.nvim/lua/hlchunk/utils/ts_node_type/lua.lua	/^    ["function"] = "function",$/;"	f
[self.func]	plugged/nvim-window-picker/lua/window-picker/utf-8.lua	/^				self.functions[self.func](-1)$/;"	f
[self.func]	plugged/nvim-window-picker/lua/window-picker/utf-8.lua	/^				self.functions[self.func](utf8unicode(ch))$/;"	f
_G.Reload_and_run	plugged/nvim-window-picker/dev/init.lua	/^function _G.Reload_and_run()$/;"	f
_G.___toggleterm_winbar_click	plugged/toggleterm.nvim/lua/toggleterm.lua	/^function _G.___toggleterm_winbar_click(id)$/;"	f
__author__	plugged/ale/rplugin/python3/deoplete/sources/ale.py	/^__author__ = 'Joao Paulo, w0rp'$/;"	v
__handle_exit	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^local function __handle_exit(term)$/;"	f
__index 	plugged/smoothcursor.nvim/lua/smoothcursor/callback.lua	/^    __index = function(t, k)$/;"	f
__index 	plugged/toggleterm.nvim/lua/toggleterm/config.lua	/^  __index = function(_, k) return config[k] end,$/;"	f
__index 	plugged/toggleterm.nvim/lua/toggleterm/lazy.lua	/^    __index = function(_, key) return require(require_path)[key] end,$/;"	f
__init__	plugged/ale/rplugin/python3/deoplete/sources/ale.py	/^        def __init__(self, vim):$/;"	m	class:Base
__init__	plugged/ale/rplugin/python3/deoplete/sources/ale.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	plugged/ale/test/python/test_deoplete_source.py	/^    def __init__(self, call_list, call_results, commands):$/;"	m	class:VimMock
__newindex 	plugged/smoothcursor.nvim/lua/smoothcursor/callback.lua	/^    __newindex = function(t, k, v)$/;"	f
__newindex 	plugged/toggleterm.nvim/lua/toggleterm/lazy.lua	/^    __newindex = function(_, key, value) require(require_path)[key] = value end,$/;"	f
_getPrefix	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:_getPrefix() abort dict$/;"	f
_get_dir	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^local function _get_dir(dir)$/;"	f
_open_references_window	plugged/goto-preview/lua/goto-preview/lib.lua	/^local function _open_references_window(val)$/;"	f
a	plugged/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> a <NOP>$/;"	m
addChild	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:addChild(tag) abort dict$/;"	f
addTag	plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:addTag(tag) abort dict$/;"	f
add_snr	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:add_snr(funcname) abort$/;"	f
add_snr	plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:add_snr(funcname) abort$/;"	f
add_snr	plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:add_snr(funcname) abort$/;"	f
add_snr	plugged/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:add_snr(funcname) abort$/;"	f
add_snr	plugged/tagbar/autoload/tagbar/prototypes/pseudotag.vim	/^function! s:add_snr(funcname) abort$/;"	f
add_snr	plugged/tagbar/autoload/tagbar/prototypes/splittag.vim	/^function! s:add_snr(funcname) abort$/;"	f
add_snr	plugged/tagbar/autoload/tagbar/prototypes/typeinfo.vim	/^function! s:add_snr(funcname) abort$/;"	f
add_tag_recursive	plugged/tagbar/autoload/tagbar.vim	/^function! s:add_tag_recursive(parent, taginfo, pathlist) abort$/;"	f
after	plugged/vim-multiple-cursors/spec/benchmark_spec.rb	/^def after(string)$/;"	f
after	plugged/vim-multiple-cursors/spec/multiple_cursors_spec.rb	/^def after(string)$/;"	f
ale#Env	plugged/ale/autoload/ale.vim	/^function! ale#Env(variable_name, value) abort$/;"	f
ale#Escape	plugged/ale/autoload/ale.vim	/^function! ale#Escape(str) abort$/;"	f
ale#FileTooLarge	plugged/ale/autoload/ale.vim	/^function! ale#FileTooLarge(buffer) abort$/;"	f
ale#GetFilenameMappings	plugged/ale/autoload/ale.vim	/^function! ale#GetFilenameMappings(buffer, name) abort$/;"	f
ale#GetLocItemMessage	plugged/ale/autoload/ale.vim	/^function! ale#GetLocItemMessage(item, format_string) abort$/;"	f
ale#Has	plugged/ale/autoload/ale.vim	/^function! ale#Has(feature) abort$/;"	f
ale#Pad	plugged/ale/autoload/ale.vim	/^function! ale#Pad(string) abort$/;"	f
ale#Queue	plugged/ale/autoload/ale.vim	/^function! ale#Queue(delay, ...) abort$/;"	f
ale#Set	plugged/ale/autoload/ale.vim	/^function! ale#Set(variable_name, default) abort$/;"	f
ale#ShouldDoNothing	plugged/ale/autoload/ale.vim	/^function! ale#ShouldDoNothing(buffer) abort$/;"	f
ale#Var	plugged/ale/autoload/ale.vim	/^function! ale#Var(buffer, variable_name) abort$/;"	f
ale#ant#BuildClasspathCommand	plugged/ale/autoload/ale/ant.vim	/^function! ale#ant#BuildClasspathCommand(buffer) abort$/;"	f
ale#ant#FindExecutable	plugged/ale/autoload/ale/ant.vim	/^function! ale#ant#FindExecutable(buffer) abort$/;"	f
ale#ant#FindProjectRoot	plugged/ale/autoload/ale/ant.vim	/^function! ale#ant#FindProjectRoot(buffer) abort$/;"	f
ale#args#Parse	plugged/ale/autoload/ale/args.vim	/^function! ale#args#Parse(arg_list, string) abort$/;"	f
ale#assert#Fixer	plugged/ale/autoload/ale/assert.vim	/^function! ale#assert#Fixer(expected_result) abort$/;"	f
ale#assert#FixerCwd	plugged/ale/autoload/ale/assert.vim	/^function! ale#assert#FixerCwd(expected_cwd) abort$/;"	f
ale#assert#FixerNotExecuted	plugged/ale/autoload/ale/assert.vim	/^function! ale#assert#FixerNotExecuted() abort$/;"	f
ale#assert#GivenCommandOutput	plugged/ale/autoload/ale/assert.vim	/^function! ale#assert#GivenCommandOutput(...) abort$/;"	f
ale#assert#LSPAddress	plugged/ale/autoload/ale/assert.vim	/^function! ale#assert#LSPAddress(expected_address) abort$/;"	f
ale#assert#LSPConfig	plugged/ale/autoload/ale/assert.vim	/^function! ale#assert#LSPConfig(expected_config) abort$/;"	f
ale#assert#LSPLanguage	plugged/ale/autoload/ale/assert.vim	/^function! ale#assert#LSPLanguage(expected_language) abort$/;"	f
ale#assert#LSPOptions	plugged/ale/autoload/ale/assert.vim	/^function! ale#assert#LSPOptions(expected_options) abort$/;"	f
ale#assert#LSPProject	plugged/ale/autoload/ale/assert.vim	/^function! ale#assert#LSPProject(expected_root) abort$/;"	f
ale#assert#Linter	plugged/ale/autoload/ale/assert.vim	/^function! ale#assert#Linter(expected_executable, expected_command) abort$/;"	f
ale#assert#LinterCwd	plugged/ale/autoload/ale/assert.vim	/^function! ale#assert#LinterCwd(expected_cwd) abort$/;"	f
ale#assert#LinterNotExecuted	plugged/ale/autoload/ale/assert.vim	/^function! ale#assert#LinterNotExecuted() abort$/;"	f
ale#assert#ResetVariables	plugged/ale/autoload/ale/assert.vim	/^function! ale#assert#ResetVariables(filetype, name, ...) abort$/;"	f
ale#assert#SetUpFixerTest	plugged/ale/autoload/ale/assert.vim	/^function! ale#assert#SetUpFixerTest(filetype, name, ...) abort$/;"	f
ale#assert#SetUpFixerTestCommands	plugged/ale/autoload/ale/assert.vim	/^function! ale#assert#SetUpFixerTestCommands() abort$/;"	f
ale#assert#SetUpLinterTest	plugged/ale/autoload/ale/assert.vim	/^function! ale#assert#SetUpLinterTest(filetype, name) abort$/;"	f
ale#assert#SetUpLinterTestCommands	plugged/ale/autoload/ale/assert.vim	/^function! ale#assert#SetUpLinterTestCommands() abort$/;"	f
ale#assert#TearDownFixerTest	plugged/ale/autoload/ale/assert.vim	/^function! ale#assert#TearDownFixerTest() abort$/;"	f
ale#assert#TearDownLinterTest	plugged/ale/autoload/ale/assert.vim	/^function! ale#assert#TearDownLinterTest() abort$/;"	f
ale#balloon#Disable	plugged/ale/autoload/ale/balloon.vim	/^function! ale#balloon#Disable() abort$/;"	f
ale#balloon#Enable	plugged/ale/autoload/ale/balloon.vim	/^function! ale#balloon#Enable() abort$/;"	f
ale#balloon#Expr	plugged/ale/autoload/ale/balloon.vim	/^function! ale#balloon#Expr() abort$/;"	f
ale#balloon#MessageForPos	plugged/ale/autoload/ale/balloon.vim	/^function! ale#balloon#MessageForPos(bufnr, lnum, col) abort$/;"	f
ale#c#ExpandAtArgs	plugged/ale/autoload/ale/c.vim	/^function! ale#c#ExpandAtArgs(path_prefix, raw_split_lines) abort$/;"	f
ale#c#FindCompileCommands	plugged/ale/autoload/ale/c.vim	/^function! ale#c#FindCompileCommands(buffer) abort$/;"	f
ale#c#FindLocalHeaderPaths	plugged/ale/autoload/ale/c.vim	/^function! ale#c#FindLocalHeaderPaths(buffer) abort$/;"	f
ale#c#FindProjectRoot	plugged/ale/autoload/ale/c.vim	/^function! ale#c#FindProjectRoot(buffer) abort$/;"	f
ale#c#FlagsFromCompileCommands	plugged/ale/autoload/ale/c.vim	/^function! ale#c#FlagsFromCompileCommands(buffer, compile_commands_file) abort$/;"	f
ale#c#GetBuildDirectory	plugged/ale/autoload/ale/c.vim	/^function! ale#c#GetBuildDirectory(buffer) abort$/;"	f
ale#c#GetCFlags	plugged/ale/autoload/ale/c.vim	/^function! ale#c#GetCFlags(buffer, output) abort$/;"	f
ale#c#GetLanguageFlag	plugged/ale/autoload/ale/c.vim	/^function! ale#c#GetLanguageFlag($/;"	f
ale#c#GetMakeCommand	plugged/ale/autoload/ale/c.vim	/^function! ale#c#GetMakeCommand(buffer) abort$/;"	f
ale#c#IncludeOptions	plugged/ale/autoload/ale/c.vim	/^function! ale#c#IncludeOptions(include_paths) abort$/;"	f
ale#c#ParseCFlags	plugged/ale/autoload/ale/c.vim	/^function! ale#c#ParseCFlags(path_prefix, should_quote, raw_arguments) abort$/;"	f
ale#c#ParseCFlagsFromMakeOutput	plugged/ale/autoload/ale/c.vim	/^function! ale#c#ParseCFlagsFromMakeOutput(buffer, make_output) abort$/;"	f
ale#c#ParseCompileCommandsFlags	plugged/ale/autoload/ale/c.vim	/^function! ale#c#ParseCompileCommandsFlags(buffer, file_lookup, dir_lookup) abort$/;"	f
ale#c#QuoteArg	plugged/ale/autoload/ale/c.vim	/^function! ale#c#QuoteArg(arg) abort$/;"	f
ale#c#ResetCompileCommandsCache	plugged/ale/autoload/ale/c.vim	/^function! ale#c#ResetCompileCommandsCache() abort$/;"	f
ale#c#RunMakeCommand	plugged/ale/autoload/ale/c.vim	/^function! ale#c#RunMakeCommand(buffer, Callback) abort$/;"	f
ale#c#ShellSplit	plugged/ale/autoload/ale/c.vim	/^function! ale#c#ShellSplit(line) abort$/;"	f
ale#code_action#ApplyChanges	plugged/ale/autoload/ale/code_action.vim	/^function! ale#code_action#ApplyChanges(filename, changes, options) abort$/;"	f
ale#code_action#BuildChangesList	plugged/ale/autoload/ale/code_action.vim	/^function! ale#code_action#BuildChangesList(changes_map) abort$/;"	f
ale#code_action#DisablePopUpMenu	plugged/ale/autoload/ale/code_action.vim	/^function! ale#code_action#DisablePopUpMenu() abort$/;"	f
ale#code_action#EnablePopUpMenu	plugged/ale/autoload/ale/code_action.vim	/^function! ale#code_action#EnablePopUpMenu() abort$/;"	f
ale#code_action#GetChanges	plugged/ale/autoload/ale/code_action.vim	/^function! ale#code_action#GetChanges(workspace_edit) abort$/;"	f
ale#code_action#GetCodeActions	plugged/ale/autoload/ale/code_action.vim	/^function! ale#code_action#GetCodeActions(options) abort$/;"	f
ale#code_action#HandleCodeAction	plugged/ale/autoload/ale/code_action.vim	/^function! ale#code_action#HandleCodeAction(code_action, options) abort$/;"	f
ale#code_action#ReloadBuffer	plugged/ale/autoload/ale/code_action.vim	/^function! ale#code_action#ReloadBuffer() abort$/;"	f
ale#codefix#ApplyLSPCodeAction	plugged/ale/autoload/ale/codefix.vim	/^function! ale#codefix#ApplyLSPCodeAction(data, item) abort$/;"	f
ale#codefix#ApplyTSServerCodeAction	plugged/ale/autoload/ale/codefix.vim	/^function! ale#codefix#ApplyTSServerCodeAction(data, item) abort$/;"	f
ale#codefix#ClearLSPData	plugged/ale/autoload/ale/codefix.vim	/^function! ale#codefix#ClearLSPData() abort$/;"	f
ale#codefix#Execute	plugged/ale/autoload/ale/codefix.vim	/^function! ale#codefix#Execute(range, ...) abort$/;"	f
ale#codefix#GetMap	plugged/ale/autoload/ale/codefix.vim	/^function! ale#codefix#GetMap() abort$/;"	f
ale#codefix#HandleLSPResponse	plugged/ale/autoload/ale/codefix.vim	/^function! ale#codefix#HandleLSPResponse(conn_id, response) abort$/;"	f
ale#codefix#HandleTSServerResponse	plugged/ale/autoload/ale/codefix.vim	/^function! ale#codefix#HandleTSServerResponse(conn_id, response) abort$/;"	f
ale#codefix#SetMap	plugged/ale/autoload/ale/codefix.vim	/^function! ale#codefix#SetMap(map) abort$/;"	f
ale#command#CdString	plugged/ale/autoload/ale/command.vim	/^function! ale#command#CdString(directory) abort$/;"	f
ale#command#ClearData	plugged/ale/autoload/ale/command.vim	/^function! ale#command#ClearData() abort$/;"	f
ale#command#CreateDirectory	plugged/ale/autoload/ale/command.vim	/^function! ale#command#CreateDirectory(buffer) abort$/;"	f
ale#command#CreateFile	plugged/ale/autoload/ale/command.vim	/^function! ale#command#CreateFile(buffer) abort$/;"	f
ale#command#CreateTempFile	plugged/ale/autoload/ale/command.vim	/^function! ale#command#CreateTempFile(buffer, temporary_file, input) abort$/;"	f
ale#command#EscapeCommandPart	plugged/ale/autoload/ale/command.vim	/^function! ale#command#EscapeCommandPart(command_part) abort$/;"	f
ale#command#FormatCommand	plugged/ale/autoload/ale/command.vim	/^function! ale#command#FormatCommand($/;"	f
ale#command#GetData	plugged/ale/autoload/ale/command.vim	/^function! ale#command#GetData() abort$/;"	f
ale#command#InitData	plugged/ale/autoload/ale/command.vim	/^function! ale#command#InitData(buffer) abort$/;"	f
ale#command#IsDeferred	plugged/ale/autoload/ale/command.vim	/^function! ale#command#IsDeferred(value) abort$/;"	f
ale#command#ManageDirectory	plugged/ale/autoload/ale/command.vim	/^function! ale#command#ManageDirectory(buffer, directory) abort$/;"	f
ale#command#ManageFile	plugged/ale/autoload/ale/command.vim	/^function! ale#command#ManageFile(buffer, file) abort$/;"	f
ale#command#RemoveManagedFiles	plugged/ale/autoload/ale/command.vim	/^function! ale#command#RemoveManagedFiles(buffer) abort$/;"	f
ale#command#ResetCwd	plugged/ale/autoload/ale/command.vim	/^function! ale#command#ResetCwd(buffer) abort$/;"	f
ale#command#Run	plugged/ale/autoload/ale/command.vim	/^function! ale#command#Run(buffer, command, Callback, ...) abort$/;"	f
ale#command#SetCwd	plugged/ale/autoload/ale/command.vim	/^function! ale#command#SetCwd(buffer, cwd) abort$/;"	f
ale#command#StopJobs	plugged/ale/autoload/ale/command.vim	/^function! ale#command#StopJobs(buffer, job_type) abort$/;"	f
ale#completion#AutomaticOmniFunc	plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#AutomaticOmniFunc(findstart, base) abort$/;"	f
ale#completion#CanProvideCompletions	plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#CanProvideCompletions() abort$/;"	f
ale#completion#Disable	plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#Disable() abort$/;"	f
ale#completion#Done	plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#Done() abort$/;"	f
ale#completion#Enable	plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#Enable() abort$/;"	f
ale#completion#Filter	plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#Filter($/;"	f
ale#completion#GetAllTriggers	plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#GetAllTriggers() abort$/;"	f
ale#completion#GetCompletionKind	plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#GetCompletionKind(kind) abort$/;"	f
ale#completion#GetCompletionPosition	plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#GetCompletionPosition() abort$/;"	f
ale#completion#GetCompletionPositionForDeoplete	plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#GetCompletionPositionForDeoplete(input) abort$/;"	f
ale#completion#GetCompletionResult	plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#GetCompletionResult() abort$/;"	f
ale#completion#GetCompletionSymbols	plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#GetCompletionSymbols(kind) abort$/;"	f
ale#completion#GetCompletions	plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#GetCompletions(...) abort$/;"	f
ale#completion#GetPrefix	plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#GetPrefix(filetype, line, column) abort$/;"	f
ale#completion#GetTriggerCharacter	plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#GetTriggerCharacter(filetype, prefix) abort$/;"	f
ale#completion#HandleLSPResponse	plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#HandleLSPResponse(conn_id, response) abort$/;"	f
ale#completion#HandleTSServerResponse	plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#HandleTSServerResponse(conn_id, response) abort$/;"	f
ale#completion#HandleUserData	plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#HandleUserData(completed_item) abort$/;"	f
ale#completion#Import	plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#Import() abort$/;"	f
ale#completion#NullFilter	plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#NullFilter(buffer, item) abort$/;"	f
ale#completion#OmniFunc	plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#OmniFunc(findstart, base) abort$/;"	f
ale#completion#ParseLSPCompletions	plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#ParseLSPCompletions(response) abort$/;"	f
ale#completion#ParseTSServerCompletionEntryDetails	plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#ParseTSServerCompletionEntryDetails(response) abort$/;"	f
ale#completion#ParseTSServerCompletions	plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#ParseTSServerCompletions(response) abort$/;"	f
ale#completion#Queue	plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#Queue() abort$/;"	f
ale#completion#RestoreCompletionOptions	plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#RestoreCompletionOptions() abort$/;"	f
ale#completion#Show	plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#Show(result) abort$/;"	f
ale#completion#StopTimer	plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#StopTimer() abort$/;"	f
ale#completion#python#CompletionItemFilter	plugged/ale/autoload/ale/completion/python.vim	/^function! ale#completion#python#CompletionItemFilter(buffer, item) abort$/;"	f
ale#cursor#EchoCursorWarning	plugged/ale/autoload/ale/cursor.vim	/^function! ale#cursor#EchoCursorWarning(...) abort$/;"	f
ale#cursor#EchoCursorWarningWithDelay	plugged/ale/autoload/ale/cursor.vim	/^function! ale#cursor#EchoCursorWarningWithDelay() abort$/;"	f
ale#cursor#Echom	plugged/ale/autoload/ale/cursor.vim	/^function! ale#cursor#Echom(message) abort$/;"	f
ale#cursor#ShowCursorDetail	plugged/ale/autoload/ale/cursor.vim	/^function! ale#cursor#ShowCursorDetail() abort$/;"	f
ale#cursor#TruncatedEcho	plugged/ale/autoload/ale/cursor.vim	/^function! ale#cursor#TruncatedEcho(original_message) abort$/;"	f
ale#d#FindDUBConfig	plugged/ale/autoload/ale/d.vim	/^function! ale#d#FindDUBConfig(buffer) abort$/;"	f
ale#debugging#Info	plugged/ale/autoload/ale/debugging.vim	/^function! ale#debugging#Info(...) abort$/;"	f
ale#debugging#InfoCommand	plugged/ale/autoload/ale/debugging.vim	/^function! ale#debugging#InfoCommand(...) abort$/;"	f
ale#debugging#InfoToClipboard	plugged/ale/autoload/ale/debugging.vim	/^function! ale#debugging#InfoToClipboard() abort$/;"	f
ale#debugging#InfoToClipboardDeprecatedCommand	plugged/ale/autoload/ale/debugging.vim	/^function! ale#debugging#InfoToClipboardDeprecatedCommand() abort$/;"	f
ale#debugging#InfoToFile	plugged/ale/autoload/ale/debugging.vim	/^function! ale#debugging#InfoToFile(filename) abort$/;"	f
ale#debugging#InfoToPreview	plugged/ale/autoload/ale/debugging.vim	/^function! ale#debugging#InfoToPreview() abort$/;"	f
ale#definition#ClearLSPData	plugged/ale/autoload/ale/definition.vim	/^function! ale#definition#ClearLSPData() abort$/;"	f
ale#definition#GetMap	plugged/ale/autoload/ale/definition.vim	/^function! ale#definition#GetMap() abort$/;"	f
ale#definition#GoTo	plugged/ale/autoload/ale/definition.vim	/^function! ale#definition#GoTo(options) abort$/;"	f
ale#definition#GoToCommandHandler	plugged/ale/autoload/ale/definition.vim	/^function! ale#definition#GoToCommandHandler(command, ...) abort$/;"	f
ale#definition#GoToImpl	plugged/ale/autoload/ale/definition.vim	/^function! ale#definition#GoToImpl(options) abort$/;"	f
ale#definition#GoToType	plugged/ale/autoload/ale/definition.vim	/^function! ale#definition#GoToType(options) abort$/;"	f
ale#definition#HandleLSPResponse	plugged/ale/autoload/ale/definition.vim	/^function! ale#definition#HandleLSPResponse(conn_id, response) abort$/;"	f
ale#definition#HandleTSServerResponse	plugged/ale/autoload/ale/definition.vim	/^function! ale#definition#HandleTSServerResponse(conn_id, response) abort$/;"	f
ale#definition#SetMap	plugged/ale/autoload/ale/definition.vim	/^function! ale#definition#SetMap(map) abort$/;"	f
ale#definition#UpdateTagStack	plugged/ale/autoload/ale/definition.vim	/^function! ale#definition#UpdateTagStack() abort$/;"	f
ale#dhall#GetCommand	plugged/ale/autoload/ale/dhall.vim	/^function! ale#dhall#GetCommand(buffer) abort$/;"	f
ale#dhall#GetExecutable	plugged/ale/autoload/ale/dhall.vim	/^function! ale#dhall#GetExecutable(buffer) abort$/;"	f
ale#dhall#GetExecutableWithOptions	plugged/ale/autoload/ale/dhall.vim	/^function! ale#dhall#GetExecutableWithOptions(buffer) abort$/;"	f
ale#engine#Cleanup	plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#Cleanup(buffer) abort$/;"	f
ale#engine#CleanupEveryBuffer	plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#CleanupEveryBuffer() abort$/;"	f
ale#engine#EscapeCommandPart	plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#EscapeCommandPart(command_part) abort$/;"	f
ale#engine#FixLocList	plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#FixLocList(buffer, linter_name, from_other_source, loclist) abort$/;"	f
ale#engine#GetLoclist	plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#GetLoclist(buffer) abort$/;"	f
ale#engine#HandleLoclist	plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#HandleLoclist(linter_name, buffer, loclist, from_other_source) abort$/;"	f
ale#engine#InitBufferInfo	plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#InitBufferInfo(buffer) abort$/;"	f
ale#engine#IsCheckingBuffer	plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#IsCheckingBuffer(buffer) abort$/;"	f
ale#engine#IsExecutable	plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#IsExecutable(buffer, executable) abort$/;"	f
ale#engine#MarkLinterActive	plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#MarkLinterActive(info, linter) abort$/;"	f
ale#engine#MarkLinterInactive	plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#MarkLinterInactive(info, linter_name) abort$/;"	f
ale#engine#ResetExecutableCache	plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#ResetExecutableCache() abort$/;"	f
ale#engine#RunLinters	plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#RunLinters(buffer, linters, should_lint_file) abort$/;"	f
ale#engine#SendResultsToNeovimDiagnostics	plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#SendResultsToNeovimDiagnostics(buffer, loclist) abort$/;"	f
ale#engine#SetResults	plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#SetResults(buffer, loclist) abort$/;"	f
ale#engine#Stop	plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#Stop(buffer) abort$/;"	f
ale#engine#ignore#Exclude	plugged/ale/autoload/ale/engine/ignore.vim	/^function! ale#engine#ignore#Exclude(filetype, all_linters, config, disable_lsp) abort$/;"	f
ale#engine#ignore#GetLSPConfigNames	plugged/ale/autoload/ale/engine/ignore.vim	/^function! ale#engine#ignore#GetLSPConfigNames() abort$/;"	f
ale#engine#ignore#GetList	plugged/ale/autoload/ale/engine/ignore.vim	/^function! ale#engine#ignore#GetList(filetype, config) abort$/;"	f
ale#events#ClockMilliseconds	plugged/ale/autoload/ale/events.vim	/^function! ale#events#ClockMilliseconds() abort$/;"	f
ale#events#EmulateInsertLeave	plugged/ale/autoload/ale/events.vim	/^function! ale#events#EmulateInsertLeave(buffer) abort$/;"	f
ale#events#FileChangedEvent	plugged/ale/autoload/ale/events.vim	/^function! ale#events#FileChangedEvent(buffer) abort$/;"	f
ale#events#FileTypeEvent	plugged/ale/autoload/ale/events.vim	/^function! ale#events#FileTypeEvent(buffer, new_filetype) abort$/;"	f
ale#events#Init	plugged/ale/autoload/ale/events.vim	/^function! ale#events#Init() abort$/;"	f
ale#events#InsertEnterEvent	plugged/ale/autoload/ale/events.vim	/^function! ale#events#InsertEnterEvent(buffer) abort$/;"	f
ale#events#InsertLeaveEvent	plugged/ale/autoload/ale/events.vim	/^function! ale#events#InsertLeaveEvent(buffer) abort$/;"	f
ale#events#LintOnEnter	plugged/ale/autoload/ale/events.vim	/^function! ale#events#LintOnEnter(buffer) abort$/;"	f
ale#events#QuitEvent	plugged/ale/autoload/ale/events.vim	/^function! ale#events#QuitEvent(buffer) abort$/;"	f
ale#events#QuitRecently	plugged/ale/autoload/ale/events.vim	/^function! ale#events#QuitRecently(buffer) abort$/;"	f
ale#events#ReadOrEnterEvent	plugged/ale/autoload/ale/events.vim	/^function! ale#events#ReadOrEnterEvent(buffer) abort$/;"	f
ale#events#SaveEvent	plugged/ale/autoload/ale/events.vim	/^function! ale#events#SaveEvent(buffer) abort$/;"	f
ale#filename_mapping#Invert	plugged/ale/autoload/ale/filename_mapping.vim	/^function! ale#filename_mapping#Invert(filename_mappings) abort$/;"	f
ale#filename_mapping#Map	plugged/ale/autoload/ale/filename_mapping.vim	/^function! ale#filename_mapping#Map(filename, filename_mappings) abort$/;"	f
ale#filerename#ClearLSPData	plugged/ale/autoload/ale/filerename.vim	/^function! ale#filerename#ClearLSPData() abort$/;"	f
ale#filerename#Execute	plugged/ale/autoload/ale/filerename.vim	/^function! ale#filerename#Execute() abort$/;"	f
ale#filerename#GetMap	plugged/ale/autoload/ale/filerename.vim	/^function! ale#filerename#GetMap() abort$/;"	f
ale#filerename#HandleTSServerResponse	plugged/ale/autoload/ale/filerename.vim	/^function! ale#filerename#HandleTSServerResponse(conn_id, response) abort$/;"	f
ale#filerename#SetMap	plugged/ale/autoload/ale/filerename.vim	/^function! ale#filerename#SetMap(map) abort$/;"	f
ale#filetypes#GuessExtension	plugged/ale/autoload/ale/filetypes.vim	/^function! ale#filetypes#GuessExtension(filetype) abort$/;"	f
ale#filetypes#LoadExtensionMap	plugged/ale/autoload/ale/filetypes.vim	/^function! ale#filetypes#LoadExtensionMap() abort$/;"	f
ale#fix#ApplyFixes	plugged/ale/autoload/ale/fix.vim	/^function! ale#fix#ApplyFixes(buffer, output) abort$/;"	f
ale#fix#ApplyQueuedFixes	plugged/ale/autoload/ale/fix.vim	/^function! ale#fix#ApplyQueuedFixes(buffer) abort$/;"	f
ale#fix#Fix	plugged/ale/autoload/ale/fix.vim	/^function! ale#fix#Fix(buffer, fixing_flag, ...) abort$/;"	f
ale#fix#InitBufferData	plugged/ale/autoload/ale/fix.vim	/^function! ale#fix#InitBufferData(buffer, fixing_flag) abort$/;"	f
ale#fix#registry#Add	plugged/ale/autoload/ale/fix/registry.vim	/^function! ale#fix#registry#Add(name, func, filetypes, desc, ...) abort$/;"	f
ale#fix#registry#Clear	plugged/ale/autoload/ale/fix/registry.vim	/^function! ale#fix#registry#Clear() abort$/;"	f
ale#fix#registry#CompleteFixers	plugged/ale/autoload/ale/fix/registry.vim	/^function! ale#fix#registry#CompleteFixers(ArgLead, CmdLine, CursorPos) abort$/;"	f
ale#fix#registry#GetApplicableFixers	plugged/ale/autoload/ale/fix/registry.vim	/^function! ale#fix#registry#GetApplicableFixers(filetype) abort$/;"	f
ale#fix#registry#GetFunc	plugged/ale/autoload/ale/fix/registry.vim	/^function! ale#fix#registry#GetFunc(name) abort$/;"	f
ale#fix#registry#ResetToDefaults	plugged/ale/autoload/ale/fix/registry.vim	/^function! ale#fix#registry#ResetToDefaults() abort$/;"	f
ale#fix#registry#Suggest	plugged/ale/autoload/ale/fix/registry.vim	/^function! ale#fix#registry#Suggest(filetype) abort$/;"	f
ale#fix#registry#SuggestedFixers	plugged/ale/autoload/ale/fix/registry.vim	/^function! ale#fix#registry#SuggestedFixers(filetype) abort$/;"	f
ale#fixers#alejandra#Fix	plugged/ale/autoload/ale/fixers/alejandra.vim	/^function! ale#fixers#alejandra#Fix(buffer) abort$/;"	f
ale#fixers#appleswiftformat#Fix	plugged/ale/autoload/ale/fixers/appleswiftformat.vim	/^function! ale#fixers#appleswiftformat#Fix(buffer) abort$/;"	f
ale#fixers#astyle#FindProjectOptions	plugged/ale/autoload/ale/fixers/astyle.vim	/^function! ale#fixers#astyle#FindProjectOptions(buffer) abort$/;"	f
ale#fixers#astyle#Fix	plugged/ale/autoload/ale/fixers/astyle.vim	/^function! ale#fixers#astyle#Fix(buffer) abort$/;"	f
ale#fixers#astyle#Var	plugged/ale/autoload/ale/fixers/astyle.vim	/^function! ale#fixers#astyle#Var(buffer, name) abort$/;"	f
ale#fixers#autoflake#Fix	plugged/ale/autoload/ale/fixers/autoflake.vim	/^function! ale#fixers#autoflake#Fix(buffer) abort$/;"	f
ale#fixers#autoimport#Fix	plugged/ale/autoload/ale/fixers/autoimport.vim	/^function! ale#fixers#autoimport#Fix(buffer) abort$/;"	f
ale#fixers#autopep8#Fix	plugged/ale/autoload/ale/fixers/autopep8.vim	/^function! ale#fixers#autopep8#Fix(buffer) abort$/;"	f
ale#fixers#bibclean#Fix	plugged/ale/autoload/ale/fixers/bibclean.vim	/^function! ale#fixers#bibclean#Fix(buffer) abort$/;"	f
ale#fixers#black#Fix	plugged/ale/autoload/ale/fixers/black.vim	/^function! ale#fixers#black#Fix(buffer) abort$/;"	f
ale#fixers#black#GetExecutable	plugged/ale/autoload/ale/fixers/black.vim	/^function! ale#fixers#black#GetExecutable(buffer) abort$/;"	f
ale#fixers#brittany#Fix	plugged/ale/autoload/ale/fixers/brittany.vim	/^function! ale#fixers#brittany#Fix(buffer) abort$/;"	f
ale#fixers#brittany#GetExecutable	plugged/ale/autoload/ale/fixers/brittany.vim	/^function! ale#fixers#brittany#GetExecutable(buffer) abort$/;"	f
ale#fixers#buf_format#Fix	plugged/ale/autoload/ale/fixers/buf_format.vim	/^function! ale#fixers#buf_format#Fix(buffer) abort$/;"	f
ale#fixers#buildifier#Fix	plugged/ale/autoload/ale/fixers/buildifier.vim	/^function! ale#fixers#buildifier#Fix(buffer) abort$/;"	f
ale#fixers#buildifier#GetExecutable	plugged/ale/autoload/ale/fixers/buildifier.vim	/^function! ale#fixers#buildifier#GetExecutable(buffer) abort$/;"	f
ale#fixers#clangformat#Fix	plugged/ale/autoload/ale/fixers/clangformat.vim	/^function! ale#fixers#clangformat#Fix(buffer) abort$/;"	f
ale#fixers#clangformat#GetExecutable	plugged/ale/autoload/ale/fixers/clangformat.vim	/^function! ale#fixers#clangformat#GetExecutable(buffer) abort$/;"	f
ale#fixers#clangtidy#Fix	plugged/ale/autoload/ale/fixers/clangtidy.vim	/^function! ale#fixers#clangtidy#Fix(buffer) abort$/;"	f
ale#fixers#clangtidy#GetCommand	plugged/ale/autoload/ale/fixers/clangtidy.vim	/^function! ale#fixers#clangtidy#GetCommand(buffer) abort$/;"	f
ale#fixers#clangtidy#Var	plugged/ale/autoload/ale/fixers/clangtidy.vim	/^function! ale#fixers#clangtidy#Var(buffer, name) abort$/;"	f
ale#fixers#cmakeformat#Fix	plugged/ale/autoload/ale/fixers/cmakeformat.vim	/^function! ale#fixers#cmakeformat#Fix(buffer) abort$/;"	f
ale#fixers#crystal#Fix	plugged/ale/autoload/ale/fixers/crystal.vim	/^function! ale#fixers#crystal#Fix(buffer) abort$/;"	f
ale#fixers#css_beautify#Fix	plugged/ale/autoload/ale/fixers/css_beautify.vim	/^function! ale#fixers#css_beautify#Fix(buffer) abort$/;"	f
ale#fixers#dart_format#Fix	plugged/ale/autoload/ale/fixers/dart_format.vim	/^function! ale#fixers#dart_format#Fix(buffer) abort$/;"	f
ale#fixers#dartfmt#Fix	plugged/ale/autoload/ale/fixers/dartfmt.vim	/^function! ale#fixers#dartfmt#Fix(buffer) abort$/;"	f
ale#fixers#deno#Fix	plugged/ale/autoload/ale/fixers/deno.vim	/^function! ale#fixers#deno#Fix(buffer) abort$/;"	f
ale#fixers#dfmt#Fix	plugged/ale/autoload/ale/fixers/dfmt.vim	/^function! ale#fixers#dfmt#Fix(buffer) abort$/;"	f
ale#fixers#dhall_format#Fix	plugged/ale/autoload/ale/fixers/dhall_format.vim	/^function! ale#fixers#dhall_format#Fix(buffer) abort$/;"	f
ale#fixers#dhall_freeze#Freeze	plugged/ale/autoload/ale/fixers/dhall_freeze.vim	/^function! ale#fixers#dhall_freeze#Freeze(buffer) abort$/;"	f
ale#fixers#dhall_lint#Fix	plugged/ale/autoload/ale/fixers/dhall_lint.vim	/^function! ale#fixers#dhall_lint#Fix(buffer) abort$/;"	f
ale#fixers#dotnet_format#Fix	plugged/ale/autoload/ale/fixers/dotnet_format.vim	/^function! ale#fixers#dotnet_format#Fix(buffer) abort$/;"	f
ale#fixers#dprint#Fix	plugged/ale/autoload/ale/fixers/dprint.vim	/^function! ale#fixers#dprint#Fix(buffer) abort$/;"	f
ale#fixers#dune#Fix	plugged/ale/autoload/ale/fixers/dune.vim	/^function! ale#fixers#dune#Fix(buffer) abort$/;"	f
ale#fixers#elm_format#Fix	plugged/ale/autoload/ale/fixers/elm_format.vim	/^function! ale#fixers#elm_format#Fix(buffer) abort$/;"	f
ale#fixers#elm_format#GetExecutable	plugged/ale/autoload/ale/fixers/elm_format.vim	/^function! ale#fixers#elm_format#GetExecutable(buffer) abort$/;"	f
ale#fixers#erbformatter#Fix	plugged/ale/autoload/ale/fixers/erbformatter.vim	/^function! ale#fixers#erbformatter#Fix(buffer) abort$/;"	f
ale#fixers#erblint#Fix	plugged/ale/autoload/ale/fixers/erblint.vim	/^function! ale#fixers#erblint#Fix(buffer) abort$/;"	f
ale#fixers#erblint#GetCommand	plugged/ale/autoload/ale/fixers/erblint.vim	/^function! ale#fixers#erblint#GetCommand(buffer) abort$/;"	f
ale#fixers#erblint#PostProcess	plugged/ale/autoload/ale/fixers/erblint.vim	/^function! ale#fixers#erblint#PostProcess(buffer, output) abort$/;"	f
ale#fixers#erlfmt#Fix	plugged/ale/autoload/ale/fixers/erlfmt.vim	/^function! ale#fixers#erlfmt#Fix(buffer) abort$/;"	f
ale#fixers#erlfmt#GetExecutable	plugged/ale/autoload/ale/fixers/erlfmt.vim	/^function! ale#fixers#erlfmt#GetExecutable(buffer) abort$/;"	f
ale#fixers#eslint#ApplyFixForVersion	plugged/ale/autoload/ale/fixers/eslint.vim	/^function! ale#fixers#eslint#ApplyFixForVersion(buffer, version) abort$/;"	f
ale#fixers#eslint#Fix	plugged/ale/autoload/ale/fixers/eslint.vim	/^function! ale#fixers#eslint#Fix(buffer) abort$/;"	f
ale#fixers#eslint#ProcessEslintDOutput	plugged/ale/autoload/ale/fixers/eslint.vim	/^function! ale#fixers#eslint#ProcessEslintDOutput(buffer, output) abort$/;"	f
ale#fixers#eslint#ProcessFixDryRunOutput	plugged/ale/autoload/ale/fixers/eslint.vim	/^function! ale#fixers#eslint#ProcessFixDryRunOutput(buffer, output) abort$/;"	f
ale#fixers#fecs#Fix	plugged/ale/autoload/ale/fixers/fecs.vim	/^function! ale#fixers#fecs#Fix(buffer) abort$/;"	f
ale#fixers#fish_indent#Fix	plugged/ale/autoload/ale/fixers/fish_indent.vim	/^function! ale#fixers#fish_indent#Fix(buffer) abort$/;"	f
ale#fixers#fixjson#Fix	plugged/ale/autoload/ale/fixers/fixjson.vim	/^function! ale#fixers#fixjson#Fix(buffer) abort$/;"	f
ale#fixers#fixjson#GetExecutable	plugged/ale/autoload/ale/fixers/fixjson.vim	/^function! ale#fixers#fixjson#GetExecutable(buffer) abort$/;"	f
ale#fixers#floskell#Fix	plugged/ale/autoload/ale/fixers/floskell.vim	/^function! ale#fixers#floskell#Fix(buffer) abort$/;"	f
ale#fixers#floskell#GetExecutable	plugged/ale/autoload/ale/fixers/floskell.vim	/^function! ale#fixers#floskell#GetExecutable(buffer) abort$/;"	f
ale#fixers#forge#Fix	plugged/ale/autoload/ale/fixers/forge.vim	/^function! ale#fixers#forge#Fix(buffer) abort$/;"	f
ale#fixers#fourmolu#Fix	plugged/ale/autoload/ale/fixers/fourmolu.vim	/^function! ale#fixers#fourmolu#Fix(buffer) abort$/;"	f
ale#fixers#fourmolu#GetExecutable	plugged/ale/autoload/ale/fixers/fourmolu.vim	/^function! ale#fixers#fourmolu#GetExecutable(buffer) abort$/;"	f
ale#fixers#generic#RemoveTrailingBlankLines	plugged/ale/autoload/ale/fixers/generic.vim	/^function! ale#fixers#generic#RemoveTrailingBlankLines(buffer, lines) abort$/;"	f
ale#fixers#generic#TrimWhitespace	plugged/ale/autoload/ale/fixers/generic.vim	/^function! ale#fixers#generic#TrimWhitespace(buffer, lines) abort$/;"	f
ale#fixers#generic_python#AddLinesBeforeControlStatements	plugged/ale/autoload/ale/fixers/generic_python.vim	/^function! ale#fixers#generic_python#AddLinesBeforeControlStatements(buffer, lines) abort$/;"	f
ale#fixers#generic_python#BreakUpLongLines	plugged/ale/autoload/ale/fixers/generic_python.vim	/^function! ale#fixers#generic_python#BreakUpLongLines(buffer, lines) abort$/;"	f
ale#fixers#gnatpp#Fix	plugged/ale/autoload/ale/fixers/gnatpp.vim	/^function! ale#fixers#gnatpp#Fix(buffer) abort$/;"	f
ale#fixers#gofmt#Fix	plugged/ale/autoload/ale/fixers/gofmt.vim	/^function! ale#fixers#gofmt#Fix(buffer) abort$/;"	f
ale#fixers#gofumpt#Fix	plugged/ale/autoload/ale/fixers/gofumpt.vim	/^function! ale#fixers#gofumpt#Fix(buffer) abort$/;"	f
ale#fixers#goimports#Fix	plugged/ale/autoload/ale/fixers/goimports.vim	/^function! ale#fixers#goimports#Fix(buffer) abort$/;"	f
ale#fixers#golines#Fix	plugged/ale/autoload/ale/fixers/golines.vim	/^function! ale#fixers#golines#Fix(buffer) abort$/;"	f
ale#fixers#gomod#Fix	plugged/ale/autoload/ale/fixers/gomod.vim	/^function! ale#fixers#gomod#Fix(buffer) abort$/;"	f
ale#fixers#google_java_format#Fix	plugged/ale/autoload/ale/fixers/google_java_format.vim	/^function! ale#fixers#google_java_format#Fix(buffer) abort$/;"	f
ale#fixers#gopls#Fix	plugged/ale/autoload/ale/fixers/gopls.vim	/^function! ale#fixers#gopls#Fix(buffer) abort$/;"	f
ale#fixers#hackfmt#Fix	plugged/ale/autoload/ale/fixers/hackfmt.vim	/^function! ale#fixers#hackfmt#Fix(buffer) abort$/;"	f
ale#fixers#help#AlignTags	plugged/ale/autoload/ale/fixers/help.vim	/^function! ale#fixers#help#AlignTags(buffer, lines) abort$/;"	f
ale#fixers#hfmt#Fix	plugged/ale/autoload/ale/fixers/hfmt.vim	/^function! ale#fixers#hfmt#Fix(buffer) abort$/;"	f
ale#fixers#hindent#Fix	plugged/ale/autoload/ale/fixers/hindent.vim	/^function! ale#fixers#hindent#Fix(buffer) abort$/;"	f
ale#fixers#hindent#GetExecutable	plugged/ale/autoload/ale/fixers/hindent.vim	/^function! ale#fixers#hindent#GetExecutable(buffer) abort$/;"	f
ale#fixers#hlint#Fix	plugged/ale/autoload/ale/fixers/hlint.vim	/^function! ale#fixers#hlint#Fix(buffer) abort$/;"	f
ale#fixers#html_beautify#Fix	plugged/ale/autoload/ale/fixers/html_beautify.vim	/^function! ale#fixers#html_beautify#Fix(buffer) abort$/;"	f
ale#fixers#importjs#Fix	plugged/ale/autoload/ale/fixers/importjs.vim	/^function! ale#fixers#importjs#Fix(buffer) abort$/;"	f
ale#fixers#importjs#ProcessOutput	plugged/ale/autoload/ale/fixers/importjs.vim	/^function! ale#fixers#importjs#ProcessOutput(buffer, output) abort$/;"	f
ale#fixers#isort#Fix	plugged/ale/autoload/ale/fixers/isort.vim	/^function! ale#fixers#isort#Fix(buffer) abort$/;"	f
ale#fixers#isort#FixForVersion	plugged/ale/autoload/ale/fixers/isort.vim	/^function! ale#fixers#isort#FixForVersion(buffer, version) abort$/;"	f
ale#fixers#isort#GetCmd	plugged/ale/autoload/ale/fixers/isort.vim	/^function! ale#fixers#isort#GetCmd(buffer) abort$/;"	f
ale#fixers#isort#GetExecutable	plugged/ale/autoload/ale/fixers/isort.vim	/^function! ale#fixers#isort#GetExecutable(buffer) abort$/;"	f
ale#fixers#jq#Fix	plugged/ale/autoload/ale/fixers/jq.vim	/^function! ale#fixers#jq#Fix(buffer) abort$/;"	f
ale#fixers#jq#GetExecutable	plugged/ale/autoload/ale/fixers/jq.vim	/^function! ale#fixers#jq#GetExecutable(buffer) abort$/;"	f
ale#fixers#jsonnetfmt#Fix	plugged/ale/autoload/ale/fixers/jsonnetfmt.vim	/^function! ale#fixers#jsonnetfmt#Fix(buffer) abort$/;"	f
ale#fixers#ktlint#Fix	plugged/ale/autoload/ale/fixers/ktlint.vim	/^function! ale#fixers#ktlint#Fix(buffer) abort$/;"	f
ale#fixers#latexindent#Fix	plugged/ale/autoload/ale/fixers/latexindent.vim	/^function! ale#fixers#latexindent#Fix(buffer) abort$/;"	f
ale#fixers#lua_format#Fix	plugged/ale/autoload/ale/fixers/lua_format.vim	/^function! ale#fixers#lua_format#Fix(buffer) abort$/;"	f
ale#fixers#luafmt#Fix	plugged/ale/autoload/ale/fixers/luafmt.vim	/^function! ale#fixers#luafmt#Fix(buffer) abort$/;"	f
ale#fixers#mix_format#Fix	plugged/ale/autoload/ale/fixers/mix_format.vim	/^function! ale#fixers#mix_format#Fix(buffer) abort$/;"	f
ale#fixers#mix_format#GetCommand	plugged/ale/autoload/ale/fixers/mix_format.vim	/^function! ale#fixers#mix_format#GetCommand(buffer) abort$/;"	f
ale#fixers#mix_format#GetExecutable	plugged/ale/autoload/ale/fixers/mix_format.vim	/^function! ale#fixers#mix_format#GetExecutable(buffer) abort$/;"	f
ale#fixers#nimpretty#Fix	plugged/ale/autoload/ale/fixers/nimpretty.vim	/^function! ale#fixers#nimpretty#Fix(buffer) abort$/;"	f
ale#fixers#nixfmt#Fix	plugged/ale/autoload/ale/fixers/nixfmt.vim	/^function! ale#fixers#nixfmt#Fix(buffer) abort$/;"	f
ale#fixers#nixpkgsfmt#Fix	plugged/ale/autoload/ale/fixers/nixpkgsfmt.vim	/^function! ale#fixers#nixpkgsfmt#Fix(buffer) abort$/;"	f
ale#fixers#npmgroovylint#Fix	plugged/ale/autoload/ale/fixers/npmgroovylint.vim	/^function! ale#fixers#npmgroovylint#Fix(buffer) abort$/;"	f
ale#fixers#ocamlformat#Fix	plugged/ale/autoload/ale/fixers/ocamlformat.vim	/^function! ale#fixers#ocamlformat#Fix(buffer) abort$/;"	f
ale#fixers#ocp_indent#Fix	plugged/ale/autoload/ale/fixers/ocp_indent.vim	/^function! ale#fixers#ocp_indent#Fix(buffer) abort$/;"	f
ale#fixers#opafmt#Fix	plugged/ale/autoload/ale/fixers/opafmt.vim	/^function! ale#fixers#opafmt#Fix(buffer) abort$/;"	f
ale#fixers#ormolu#Fix	plugged/ale/autoload/ale/fixers/ormolu.vim	/^function! ale#fixers#ormolu#Fix(buffer) abort$/;"	f
ale#fixers#packer#Fix	plugged/ale/autoload/ale/fixers/packer.vim	/^function! ale#fixers#packer#Fix(buffer) abort$/;"	f
ale#fixers#pandoc#Fix	plugged/ale/autoload/ale/fixers/pandoc.vim	/^function! ale#fixers#pandoc#Fix(buffer) abort$/;"	f
ale#fixers#perltidy#Fix	plugged/ale/autoload/ale/fixers/perltidy.vim	/^function! ale#fixers#perltidy#Fix(buffer) abort$/;"	f
ale#fixers#pgformatter#Fix	plugged/ale/autoload/ale/fixers/pgformatter.vim	/^function! ale#fixers#pgformatter#Fix(buffer) abort$/;"	f
ale#fixers#php_cs_fixer#Fix	plugged/ale/autoload/ale/fixers/php_cs_fixer.vim	/^function! ale#fixers#php_cs_fixer#Fix(buffer) abort$/;"	f
ale#fixers#php_cs_fixer#GetExecutable	plugged/ale/autoload/ale/fixers/php_cs_fixer.vim	/^function! ale#fixers#php_cs_fixer#GetExecutable(buffer) abort$/;"	f
ale#fixers#phpcbf#Fix	plugged/ale/autoload/ale/fixers/phpcbf.vim	/^function! ale#fixers#phpcbf#Fix(buffer) abort$/;"	f
ale#fixers#phpcbf#GetExecutable	plugged/ale/autoload/ale/fixers/phpcbf.vim	/^function! ale#fixers#phpcbf#GetExecutable(buffer) abort$/;"	f
ale#fixers#pint#Fix	plugged/ale/autoload/ale/fixers/pint.vim	/^function! ale#fixers#pint#Fix(buffer) abort$/;"	f
ale#fixers#pint#GetExecutable	plugged/ale/autoload/ale/fixers/pint.vim	/^function! ale#fixers#pint#GetExecutable(buffer) abort$/;"	f
ale#fixers#prettier#ApplyFixForVersion	plugged/ale/autoload/ale/fixers/prettier.vim	/^function! ale#fixers#prettier#ApplyFixForVersion(buffer, version) abort$/;"	f
ale#fixers#prettier#Fix	plugged/ale/autoload/ale/fixers/prettier.vim	/^function! ale#fixers#prettier#Fix(buffer) abort$/;"	f
ale#fixers#prettier#GetCwd	plugged/ale/autoload/ale/fixers/prettier.vim	/^function! ale#fixers#prettier#GetCwd(buffer) abort$/;"	f
ale#fixers#prettier#GetExecutable	plugged/ale/autoload/ale/fixers/prettier.vim	/^function! ale#fixers#prettier#GetExecutable(buffer) abort$/;"	f
ale#fixers#prettier#ProcessPrettierDOutput	plugged/ale/autoload/ale/fixers/prettier.vim	/^function! ale#fixers#prettier#ProcessPrettierDOutput(buffer, output) abort$/;"	f
ale#fixers#prettier_eslint#ApplyFixForVersion	plugged/ale/autoload/ale/fixers/prettier_eslint.vim	/^function! ale#fixers#prettier_eslint#ApplyFixForVersion(buffer, version) abort$/;"	f
ale#fixers#prettier_eslint#Fix	plugged/ale/autoload/ale/fixers/prettier_eslint.vim	/^function! ale#fixers#prettier_eslint#Fix(buffer) abort$/;"	f
ale#fixers#prettier_eslint#GetExecutable	plugged/ale/autoload/ale/fixers/prettier_eslint.vim	/^function! ale#fixers#prettier_eslint#GetExecutable(buffer) abort$/;"	f
ale#fixers#prettier_standard#Fix	plugged/ale/autoload/ale/fixers/prettier_standard.vim	/^function! ale#fixers#prettier_standard#Fix(buffer) abort$/;"	f
ale#fixers#prettier_standard#GetExecutable	plugged/ale/autoload/ale/fixers/prettier_standard.vim	/^function! ale#fixers#prettier_standard#GetExecutable(buffer) abort$/;"	f
ale#fixers#protolint#Fix	plugged/ale/autoload/ale/fixers/protolint.vim	/^function! ale#fixers#protolint#Fix(buffer) abort$/;"	f
ale#fixers#protolint#GetExecutable	plugged/ale/autoload/ale/fixers/protolint.vim	/^function! ale#fixers#protolint#GetExecutable(buffer) abort$/;"	f
ale#fixers#ptop#Fix	plugged/ale/autoload/ale/fixers/ptop.vim	/^function! ale#fixers#ptop#Fix(buffer) abort$/;"	f
ale#fixers#puppetlint#Fix	plugged/ale/autoload/ale/fixers/puppetlint.vim	/^function! ale#fixers#puppetlint#Fix(buffer) abort$/;"	f
ale#fixers#purs_tidy#Fix	plugged/ale/autoload/ale/fixers/purs_tidy.vim	/^function! ale#fixers#purs_tidy#Fix(buffer) abort$/;"	f
ale#fixers#purs_tidy#GetExecutable	plugged/ale/autoload/ale/fixers/purs_tidy.vim	/^function! ale#fixers#purs_tidy#GetExecutable(buffer) abort$/;"	f
ale#fixers#purty#Fix	plugged/ale/autoload/ale/fixers/purty.vim	/^function! ale#fixers#purty#Fix(buffer) abort$/;"	f
ale#fixers#purty#GetExecutable	plugged/ale/autoload/ale/fixers/purty.vim	/^function! ale#fixers#purty#GetExecutable(buffer) abort$/;"	f
ale#fixers#pycln#Fix	plugged/ale/autoload/ale/fixers/pycln.vim	/^function! ale#fixers#pycln#Fix(buffer) abort$/;"	f
ale#fixers#pycln#FixForVersion	plugged/ale/autoload/ale/fixers/pycln.vim	/^function! ale#fixers#pycln#FixForVersion(buffer, version) abort$/;"	f
ale#fixers#pycln#GetCommand	plugged/ale/autoload/ale/fixers/pycln.vim	/^function! ale#fixers#pycln#GetCommand(buffer) abort$/;"	f
ale#fixers#pycln#GetCwd	plugged/ale/autoload/ale/fixers/pycln.vim	/^function! ale#fixers#pycln#GetCwd(buffer) abort$/;"	f
ale#fixers#pycln#GetExecutable	plugged/ale/autoload/ale/fixers/pycln.vim	/^function! ale#fixers#pycln#GetExecutable(buffer) abort$/;"	f
ale#fixers#pyflyby#Fix	plugged/ale/autoload/ale/fixers/pyflyby.vim	/^function! ale#fixers#pyflyby#Fix(buffer) abort$/;"	f
ale#fixers#pyflyby#GetExecutable	plugged/ale/autoload/ale/fixers/pyflyby.vim	/^function! ale#fixers#pyflyby#GetExecutable(buffer) abort$/;"	f
ale#fixers#qmlfmt#Fix	plugged/ale/autoload/ale/fixers/qmlfmt.vim	/^function! ale#fixers#qmlfmt#Fix(buffer) abort$/;"	f
ale#fixers#qmlfmt#GetExecutable	plugged/ale/autoload/ale/fixers/qmlfmt.vim	/^function! ale#fixers#qmlfmt#GetExecutable(buffer) abort$/;"	f
ale#fixers#raco_fmt#Fix	plugged/ale/autoload/ale/fixers/raco_fmt.vim	/^function! ale#fixers#raco_fmt#Fix(buffer) abort$/;"	f
ale#fixers#refmt#Fix	plugged/ale/autoload/ale/fixers/refmt.vim	/^function! ale#fixers#refmt#Fix(buffer) abort$/;"	f
ale#fixers#remark_lint#Fix	plugged/ale/autoload/ale/fixers/remark_lint.vim	/^function! ale#fixers#remark_lint#Fix(buffer) abort$/;"	f
ale#fixers#remark_lint#GetExecutable	plugged/ale/autoload/ale/fixers/remark_lint.vim	/^function! ale#fixers#remark_lint#GetExecutable(buffer) abort$/;"	f
ale#fixers#reorder_python_imports#Fix	plugged/ale/autoload/ale/fixers/reorder_python_imports.vim	/^function! ale#fixers#reorder_python_imports#Fix(buffer) abort$/;"	f
ale#fixers#rubocop#Fix	plugged/ale/autoload/ale/fixers/rubocop.vim	/^function! ale#fixers#rubocop#Fix(buffer) abort$/;"	f
ale#fixers#rubocop#GetCommand	plugged/ale/autoload/ale/fixers/rubocop.vim	/^function! ale#fixers#rubocop#GetCommand(buffer) abort$/;"	f
ale#fixers#rubocop#PostProcess	plugged/ale/autoload/ale/fixers/rubocop.vim	/^function! ale#fixers#rubocop#PostProcess(buffer, output) abort$/;"	f
ale#fixers#ruff#Fix	plugged/ale/autoload/ale/fixers/ruff.vim	/^function! ale#fixers#ruff#Fix(buffer) abort$/;"	f
ale#fixers#ruff#FixForVersion	plugged/ale/autoload/ale/fixers/ruff.vim	/^function! ale#fixers#ruff#FixForVersion(buffer, version) abort$/;"	f
ale#fixers#ruff#GetCommand	plugged/ale/autoload/ale/fixers/ruff.vim	/^function! ale#fixers#ruff#GetCommand(buffer) abort$/;"	f
ale#fixers#ruff#GetCwd	plugged/ale/autoload/ale/fixers/ruff.vim	/^function! ale#fixers#ruff#GetCwd(buffer) abort$/;"	f
ale#fixers#ruff#GetExecutable	plugged/ale/autoload/ale/fixers/ruff.vim	/^function! ale#fixers#ruff#GetExecutable(buffer) abort$/;"	f
ale#fixers#rufo#Fix	plugged/ale/autoload/ale/fixers/rufo.vim	/^function! ale#fixers#rufo#Fix(buffer) abort$/;"	f
ale#fixers#rufo#GetCommand	plugged/ale/autoload/ale/fixers/rufo.vim	/^function! ale#fixers#rufo#GetCommand(buffer) abort$/;"	f
ale#fixers#rustfmt#Fix	plugged/ale/autoload/ale/fixers/rustfmt.vim	/^function! ale#fixers#rustfmt#Fix(buffer) abort$/;"	f
ale#fixers#rustywind#Fix	plugged/ale/autoload/ale/fixers/rustywind.vim	/^function! ale#fixers#rustywind#Fix(buffer) abort$/;"	f
ale#fixers#scalafmt#Fix	plugged/ale/autoload/ale/fixers/scalafmt.vim	/^function! ale#fixers#scalafmt#Fix(buffer) abort$/;"	f
ale#fixers#scalafmt#GetCommand	plugged/ale/autoload/ale/fixers/scalafmt.vim	/^function! ale#fixers#scalafmt#GetCommand(buffer) abort$/;"	f
ale#fixers#shfmt#Fix	plugged/ale/autoload/ale/fixers/shfmt.vim	/^function! ale#fixers#shfmt#Fix(buffer) abort$/;"	f
ale#fixers#sorbet#Fix	plugged/ale/autoload/ale/fixers/sorbet.vim	/^function! ale#fixers#sorbet#Fix(buffer) abort$/;"	f
ale#fixers#sorbet#GetCommand	plugged/ale/autoload/ale/fixers/sorbet.vim	/^function! ale#fixers#sorbet#GetCommand(buffer) abort$/;"	f
ale#fixers#sqlfluff#Fix	plugged/ale/autoload/ale/fixers/sqlfluff.vim	/^function! ale#fixers#sqlfluff#Fix(buffer) abort$/;"	f
ale#fixers#sqlfmt#Fix	plugged/ale/autoload/ale/fixers/sqlfmt.vim	/^function! ale#fixers#sqlfmt#Fix(buffer) abort$/;"	f
ale#fixers#sqlformat#Fix	plugged/ale/autoload/ale/fixers/sqlformat.vim	/^function! ale#fixers#sqlformat#Fix(buffer) abort$/;"	f
ale#fixers#standard#Fix	plugged/ale/autoload/ale/fixers/standard.vim	/^function! ale#fixers#standard#Fix(buffer) abort$/;"	f
ale#fixers#standard#GetExecutable	plugged/ale/autoload/ale/fixers/standard.vim	/^function! ale#fixers#standard#GetExecutable(buffer) abort$/;"	f
ale#fixers#standardrb#Fix	plugged/ale/autoload/ale/fixers/standardrb.vim	/^function! ale#fixers#standardrb#Fix(buffer) abort$/;"	f
ale#fixers#standardrb#GetCommand	plugged/ale/autoload/ale/fixers/standardrb.vim	/^function! ale#fixers#standardrb#GetCommand(buffer) abort$/;"	f
ale#fixers#statix#Fix	plugged/ale/autoload/ale/fixers/statix.vim	/^function! ale#fixers#statix#Fix(buffer) abort$/;"	f
ale#fixers#stylelint#Fix	plugged/ale/autoload/ale/fixers/stylelint.vim	/^function! ale#fixers#stylelint#Fix(buffer) abort$/;"	f
ale#fixers#stylelint#GetExecutable	plugged/ale/autoload/ale/fixers/stylelint.vim	/^function! ale#fixers#stylelint#GetExecutable(buffer) abort$/;"	f
ale#fixers#styler#Fix	plugged/ale/autoload/ale/fixers/styler.vim	/^function! ale#fixers#styler#Fix(buffer) abort$/;"	f
ale#fixers#stylish_haskell#Fix	plugged/ale/autoload/ale/fixers/stylish_haskell.vim	/^function! ale#fixers#stylish_haskell#Fix(buffer) abort$/;"	f
ale#fixers#stylish_haskell#GetExecutable	plugged/ale/autoload/ale/fixers/stylish_haskell.vim	/^function! ale#fixers#stylish_haskell#GetExecutable(buffer) abort$/;"	f
ale#fixers#stylua#Fix	plugged/ale/autoload/ale/fixers/stylua.vim	/^function! ale#fixers#stylua#Fix(buffer) abort$/;"	f
ale#fixers#swiftformat#Fix	plugged/ale/autoload/ale/fixers/swiftformat.vim	/^function! ale#fixers#swiftformat#Fix(buffer) abort$/;"	f
ale#fixers#swiftformat#GetExecutable	plugged/ale/autoload/ale/fixers/swiftformat.vim	/^function! ale#fixers#swiftformat#GetExecutable(buffer) abort$/;"	f
ale#fixers#syntax_tree#Fix	plugged/ale/autoload/ale/fixers/syntax_tree.vim	/^function! ale#fixers#syntax_tree#Fix(buffer) abort$/;"	f
ale#fixers#syntax_tree#GetCommand	plugged/ale/autoload/ale/fixers/syntax_tree.vim	/^function! ale#fixers#syntax_tree#GetCommand(buffer) abort$/;"	f
ale#fixers#terraform#Fix	plugged/ale/autoload/ale/fixers/terraform.vim	/^function! ale#fixers#terraform#Fix(buffer) abort$/;"	f
ale#fixers#textlint#Fix	plugged/ale/autoload/ale/fixers/textlint.vim	/^function! ale#fixers#textlint#Fix(buffer) abort$/;"	f
ale#fixers#tidy#Fix	plugged/ale/autoload/ale/fixers/tidy.vim	/^function! ale#fixers#tidy#Fix(buffer) abort$/;"	f
ale#fixers#tslint#Fix	plugged/ale/autoload/ale/fixers/tslint.vim	/^function! ale#fixers#tslint#Fix(buffer) abort$/;"	f
ale#fixers#uncrustify#Fix	plugged/ale/autoload/ale/fixers/uncrustify.vim	/^function! ale#fixers#uncrustify#Fix(buffer) abort$/;"	f
ale#fixers#uncrustify#Language	plugged/ale/autoload/ale/fixers/uncrustify.vim	/^function! ale#fixers#uncrustify#Language(buffer) abort$/;"	f
ale#fixers#vfmt#Fix	plugged/ale/autoload/ale/fixers/vfmt.vim	/^function! ale#fixers#vfmt#Fix(buffer) abort$/;"	f
ale#fixers#xmllint#Fix	plugged/ale/autoload/ale/fixers/xmllint.vim	/^function! ale#fixers#xmllint#Fix(buffer) abort$/;"	f
ale#fixers#xo#ApplyFixForVersion	plugged/ale/autoload/ale/fixers/xo.vim	/^function! ale#fixers#xo#ApplyFixForVersion(buffer, version, executable, options) abort$/;"	f
ale#fixers#xo#Fix	plugged/ale/autoload/ale/fixers/xo.vim	/^function! ale#fixers#xo#Fix(buffer) abort$/;"	f
ale#fixers#yamlfix#Fix	plugged/ale/autoload/ale/fixers/yamlfix.vim	/^function! ale#fixers#yamlfix#Fix(buffer) abort$/;"	f
ale#fixers#yamlfmt#Fix	plugged/ale/autoload/ale/fixers/yamlfmt.vim	/^function! ale#fixers#yamlfmt#Fix(buffer) abort$/;"	f
ale#fixers#yapf#Fix	plugged/ale/autoload/ale/fixers/yapf.vim	/^function! ale#fixers#yapf#Fix(buffer) abort$/;"	f
ale#fixers#zigfmt#Fix	plugged/ale/autoload/ale/fixers/zigfmt.vim	/^function! ale#fixers#zigfmt#Fix(buffer) abort$/;"	f
ale#floating_preview#Show	plugged/ale/autoload/ale/floating_preview.vim	/^function! ale#floating_preview#Show(lines, ...) abort$/;"	f
ale#go#EnvString	plugged/ale/autoload/ale/go.vim	/^function! ale#go#EnvString(buffer) abort$/;"	f
ale#go#FindProjectRoot	plugged/ale/autoload/ale/go.vim	/^function! ale#go#FindProjectRoot(buffer) abort$/;"	f
ale#go#GetGoPathExecutable	plugged/ale/autoload/ale/go.vim	/^function! ale#go#GetGoPathExecutable(suffix) abort$/;"	f
ale#gradle#BuildClasspathCommand	plugged/ale/autoload/ale/gradle.vim	/^function! ale#gradle#BuildClasspathCommand(buffer) abort$/;"	f
ale#gradle#FindExecutable	plugged/ale/autoload/ale/gradle.vim	/^function! ale#gradle#FindExecutable(buffer) abort$/;"	f
ale#gradle#FindProjectRoot	plugged/ale/autoload/ale/gradle.vim	/^function! ale#gradle#FindProjectRoot(buffer) abort$/;"	f
ale#gradle#GetInitPath	plugged/ale/autoload/ale/gradle.vim	/^function! ale#gradle#GetInitPath() abort$/;"	f
ale#handlers#alex#CreateCommandCallback	plugged/ale/autoload/ale/handlers/alex.vim	/^function! ale#handlers#alex#CreateCommandCallback(flags) abort$/;"	f
ale#handlers#alex#DefineLinter	plugged/ale/autoload/ale/handlers/alex.vim	/^function! ale#handlers#alex#DefineLinter(filetype, flags) abort$/;"	f
ale#handlers#alex#GetExecutable	plugged/ale/autoload/ale/handlers/alex.vim	/^function! ale#handlers#alex#GetExecutable(buffer) abort$/;"	f
ale#handlers#alex#Handle	plugged/ale/autoload/ale/handlers/alex.vim	/^function! ale#handlers#alex#Handle(buffer, lines) abort$/;"	f
ale#handlers#atools#Handle	plugged/ale/autoload/ale/handlers/atools.vim	/^function! ale#handlers#atools#Handle(buffer, lines) abort$/;"	f
ale#handlers#ccls#GetInitOpts	plugged/ale/autoload/ale/handlers/ccls.vim	/^function! ale#handlers#ccls#GetInitOpts(buffer, init_options_var) abort$/;"	f
ale#handlers#ccls#GetProjectRoot	plugged/ale/autoload/ale/handlers/ccls.vim	/^function! ale#handlers#ccls#GetProjectRoot(buffer) abort$/;"	f
ale#handlers#cppcheck#GetBufferPathIncludeOptions	plugged/ale/autoload/ale/handlers/cppcheck.vim	/^function! ale#handlers#cppcheck#GetBufferPathIncludeOptions(buffer) abort$/;"	f
ale#handlers#cppcheck#GetCompileCommandsOptions	plugged/ale/autoload/ale/handlers/cppcheck.vim	/^function! ale#handlers#cppcheck#GetCompileCommandsOptions(buffer) abort$/;"	f
ale#handlers#cppcheck#GetCwd	plugged/ale/autoload/ale/handlers/cppcheck.vim	/^function! ale#handlers#cppcheck#GetCwd(buffer) abort$/;"	f
ale#handlers#cppcheck#HandleCppCheckFormat	plugged/ale/autoload/ale/handlers/cppcheck.vim	/^function! ale#handlers#cppcheck#HandleCppCheckFormat(buffer, lines) abort$/;"	f
ale#handlers#cpplint#HandleCppLintFormat	plugged/ale/autoload/ale/handlers/cpplint.vim	/^function! ale#handlers#cpplint#HandleCppLintFormat(buffer, lines) abort$/;"	f
ale#handlers#cspell#DefineLinter	plugged/ale/autoload/ale/handlers/cspell.vim	/^function! ale#handlers#cspell#DefineLinter(filetype) abort$/;"	f
ale#handlers#cspell#GetCommand	plugged/ale/autoload/ale/handlers/cspell.vim	/^function! ale#handlers#cspell#GetCommand(buffer) abort$/;"	f
ale#handlers#cspell#GetExecutable	plugged/ale/autoload/ale/handlers/cspell.vim	/^function! ale#handlers#cspell#GetExecutable(buffer) abort$/;"	f
ale#handlers#cspell#Handle	plugged/ale/autoload/ale/handlers/cspell.vim	/^function! ale#handlers#cspell#Handle(buffer, lines) abort$/;"	f
ale#handlers#css#HandleCSSLintFormat	plugged/ale/autoload/ale/handlers/css.vim	/^function! ale#handlers#css#HandleCSSLintFormat(buffer, lines) abort$/;"	f
ale#handlers#css#HandleStyleLintFormat	plugged/ale/autoload/ale/handlers/css.vim	/^function! ale#handlers#css#HandleStyleLintFormat(buffer, lines) abort$/;"	f
ale#handlers#deadnix#Handle	plugged/ale/autoload/ale/handlers/deadnix.vim	/^function! ale#handlers#deadnix#Handle(buffer, lines) abort$/;"	f
ale#handlers#deno#GetExecutable	plugged/ale/autoload/ale/handlers/deno.vim	/^function! ale#handlers#deno#GetExecutable(buffer) abort$/;"	f
ale#handlers#deno#GetInitializationOptions	plugged/ale/autoload/ale/handlers/deno.vim	/^function! ale#handlers#deno#GetInitializationOptions(buffer) abort$/;"	f
ale#handlers#deno#GetProjectRoot	plugged/ale/autoload/ale/handlers/deno.vim	/^function! ale#handlers#deno#GetProjectRoot(buffer) abort$/;"	f
ale#handlers#elixir#FindMixProjectRoot	plugged/ale/autoload/ale/handlers/elixir.vim	/^function! ale#handlers#elixir#FindMixProjectRoot(buffer) abort$/;"	f
ale#handlers#elixir#FindMixUmbrellaRoot	plugged/ale/autoload/ale/handlers/elixir.vim	/^function! ale#handlers#elixir#FindMixUmbrellaRoot(buffer) abort$/;"	f
ale#handlers#eslint#FindConfig	plugged/ale/autoload/ale/handlers/eslint.vim	/^function! ale#handlers#eslint#FindConfig(buffer) abort$/;"	f
ale#handlers#eslint#GetCommand	plugged/ale/autoload/ale/handlers/eslint.vim	/^function! ale#handlers#eslint#GetCommand(buffer) abort$/;"	f
ale#handlers#eslint#GetCwd	plugged/ale/autoload/ale/handlers/eslint.vim	/^function! ale#handlers#eslint#GetCwd(buffer) abort$/;"	f
ale#handlers#eslint#GetExecutable	plugged/ale/autoload/ale/handlers/eslint.vim	/^function! ale#handlers#eslint#GetExecutable(buffer) abort$/;"	f
ale#handlers#eslint#Handle	plugged/ale/autoload/ale/handlers/eslint.vim	/^function! ale#handlers#eslint#Handle(buffer, lines) abort$/;"	f
ale#handlers#eslint#HandleJSON	plugged/ale/autoload/ale/handlers/eslint.vim	/^function! ale#handlers#eslint#HandleJSON(buffer, lines) abort$/;"	f
ale#handlers#fecs#GetCommand	plugged/ale/autoload/ale/handlers/fecs.vim	/^function! ale#handlers#fecs#GetCommand(buffer) abort$/;"	f
ale#handlers#fecs#GetExecutable	plugged/ale/autoload/ale/handlers/fecs.vim	/^function! ale#handlers#fecs#GetExecutable(buffer) abort$/;"	f
ale#handlers#fecs#Handle	plugged/ale/autoload/ale/handlers/fecs.vim	/^function! ale#handlers#fecs#Handle(buffer, lines) abort$/;"	f
ale#handlers#flawfinder#HandleFlawfinderFormat	plugged/ale/autoload/ale/handlers/flawfinder.vim	/^function! ale#handlers#flawfinder#HandleFlawfinderFormat(buffer, lines) abort$/;"	f
ale#handlers#gawk#HandleGawkFormat	plugged/ale/autoload/ale/handlers/gawk.vim	/^function! ale#handlers#gawk#HandleGawkFormat(buffer, lines) abort$/;"	f
ale#handlers#gcc#HandleGCCFormat	plugged/ale/autoload/ale/handlers/gcc.vim	/^function! ale#handlers#gcc#HandleGCCFormat(buffer, lines) abort$/;"	f
ale#handlers#gcc#HandleGCCFormatWithIncludes	plugged/ale/autoload/ale/handlers/gcc.vim	/^function! ale#handlers#gcc#HandleGCCFormatWithIncludes(buffer, lines) abort$/;"	f
ale#handlers#go#Handler	plugged/ale/autoload/ale/handlers/go.vim	/^function! ale#handlers#go#Handler(buffer, lines) abort$/;"	f
ale#handlers#haskell#GetStackExecutable	plugged/ale/autoload/ale/handlers/haskell.vim	/^function! ale#handlers#haskell#GetStackExecutable(bufnr) abort$/;"	f
ale#handlers#haskell#HandleGHCFormat	plugged/ale/autoload/ale/handlers/haskell.vim	/^function! ale#handlers#haskell#HandleGHCFormat(buffer, lines) abort$/;"	f
ale#handlers#haskell_stack#EscapeExecutable	plugged/ale/autoload/ale/handlers/haskell_stack.vim	/^function! ale#handlers#haskell_stack#EscapeExecutable(executable, stack_exec) abort$/;"	f
ale#handlers#hdl_checker#DefineLinter	plugged/ale/autoload/ale/handlers/hdl_checker.vim	/^function! ale#handlers#hdl_checker#DefineLinter(filetype) abort$/;"	f
ale#handlers#hdl_checker#GetCommand	plugged/ale/autoload/ale/handlers/hdl_checker.vim	/^function! ale#handlers#hdl_checker#GetCommand(buffer) abort$/;"	f
ale#handlers#hdl_checker#GetExecutable	plugged/ale/autoload/ale/handlers/hdl_checker.vim	/^function! ale#handlers#hdl_checker#GetExecutable(buffer) abort$/;"	f
ale#handlers#hdl_checker#GetInitOptions	plugged/ale/autoload/ale/handlers/hdl_checker.vim	/^function! ale#handlers#hdl_checker#GetInitOptions(buffer) abort$/;"	f
ale#handlers#hdl_checker#GetProjectRoot	plugged/ale/autoload/ale/handlers/hdl_checker.vim	/^function! ale#handlers#hdl_checker#GetProjectRoot(buffer) abort$/;"	f
ale#handlers#hdl_checker#IsDotGit	plugged/ale/autoload/ale/handlers/hdl_checker.vim	/^function! ale#handlers#hdl_checker#IsDotGit(path) abort$/;"	f
ale#handlers#hlint#GetExecutable	plugged/ale/autoload/ale/handlers/hlint.vim	/^function! ale#handlers#hlint#GetExecutable(buffer) abort$/;"	f
ale#handlers#inko#GetType	plugged/ale/autoload/ale/handlers/inko.vim	/^function! ale#handlers#inko#GetType(severity) abort$/;"	f
ale#handlers#inko#Handle	plugged/ale/autoload/ale/handlers/inko.vim	/^function! ale#handlers#inko#Handle(buffer, lines) abort$/;"	f
ale#handlers#ktlint#GetCommand	plugged/ale/autoload/ale/handlers/ktlint.vim	/^function! ale#handlers#ktlint#GetCommand(buffer) abort$/;"	f
ale#handlers#ktlint#GetRulesets	plugged/ale/autoload/ale/handlers/ktlint.vim	/^function! ale#handlers#ktlint#GetRulesets(buffer) abort$/;"	f
ale#handlers#ktlint#Handle	plugged/ale/autoload/ale/handlers/ktlint.vim	/^function! ale#handlers#ktlint#Handle(buffer, lines) abort$/;"	f
ale#handlers#languagetool#DefineLinter	plugged/ale/autoload/ale/handlers/languagetool.vim	/^function! ale#handlers#languagetool#DefineLinter(filetype) abort$/;"	f
ale#handlers#languagetool#GetCommand	plugged/ale/autoload/ale/handlers/languagetool.vim	/^function! ale#handlers#languagetool#GetCommand(buffer) abort$/;"	f
ale#handlers#languagetool#GetExecutable	plugged/ale/autoload/ale/handlers/languagetool.vim	/^function! ale#handlers#languagetool#GetExecutable(buffer) abort$/;"	f
ale#handlers#languagetool#HandleOutput	plugged/ale/autoload/ale/handlers/languagetool.vim	/^function! ale#handlers#languagetool#HandleOutput(buffer, lines) abort$/;"	f
ale#handlers#markdownlint#Handle	plugged/ale/autoload/ale/handlers/markdownlint.vim	/^function! ale#handlers#markdownlint#Handle(buffer, lines) abort$/;"	f
ale#handlers#naga#Handle	plugged/ale/autoload/ale/handlers/naga.vim	/^function! ale#handlers#naga#Handle(buffer, lines) abort$/;"	f
ale#handlers#ocamllsp#GetCommand	plugged/ale/autoload/ale/handlers/ocamllsp.vim	/^function! ale#handlers#ocamllsp#GetCommand(buffer) abort$/;"	f
ale#handlers#ocamllsp#GetExecutable	plugged/ale/autoload/ale/handlers/ocamllsp.vim	/^function! ale#handlers#ocamllsp#GetExecutable(buffer) abort$/;"	f
ale#handlers#ocamllsp#GetLanguage	plugged/ale/autoload/ale/handlers/ocamllsp.vim	/^function! ale#handlers#ocamllsp#GetLanguage(buffer) abort$/;"	f
ale#handlers#ocamllsp#GetProjectRoot	plugged/ale/autoload/ale/handlers/ocamllsp.vim	/^function! ale#handlers#ocamllsp#GetProjectRoot(buffer) abort$/;"	f
ale#handlers#ols#GetCommand	plugged/ale/autoload/ale/handlers/ols.vim	/^function! ale#handlers#ols#GetCommand(buffer) abort$/;"	f
ale#handlers#ols#GetExecutable	plugged/ale/autoload/ale/handlers/ols.vim	/^function! ale#handlers#ols#GetExecutable(buffer) abort$/;"	f
ale#handlers#ols#GetLanguage	plugged/ale/autoload/ale/handlers/ols.vim	/^function! ale#handlers#ols#GetLanguage(buffer) abort$/;"	f
ale#handlers#ols#GetProjectRoot	plugged/ale/autoload/ale/handlers/ols.vim	/^function! ale#handlers#ols#GetProjectRoot(buffer) abort$/;"	f
ale#handlers#openscad#SCA2D_callback	plugged/ale/autoload/ale/handlers/openscad.vim	/^function! ale#handlers#openscad#SCA2D_callback(buffer, lines) abort$/;"	f
ale#handlers#pony#HandlePonycFormat	plugged/ale/autoload/ale/handlers/pony.vim	/^function! ale#handlers#pony#HandlePonycFormat(buffer, lines) abort$/;"	f
ale#handlers#redpen#HandleRedpenOutput	plugged/ale/autoload/ale/handlers/redpen.vim	/^function! ale#handlers#redpen#HandleRedpenOutput(buffer, lines) abort$/;"	f
ale#handlers#ruby#HandleSyntaxErrors	plugged/ale/autoload/ale/handlers/ruby.vim	/^function! ale#handlers#ruby#HandleSyntaxErrors(buffer, lines) abort$/;"	f
ale#handlers#rust#HandleRustErrors	plugged/ale/autoload/ale/handlers/rust.vim	/^function! ale#handlers#rust#HandleRustErrors(buffer, lines) abort$/;"	f
ale#handlers#scala#HandleScalacLintFormat	plugged/ale/autoload/ale/handlers/scala.vim	/^function! ale#handlers#scala#HandleScalacLintFormat(buffer, lines) abort$/;"	f
ale#handlers#sh#GetShellType	plugged/ale/autoload/ale/handlers/sh.vim	/^function! ale#handlers#sh#GetShellType(buffer) abort$/;"	f
ale#handlers#shellcheck#DefineLinter	plugged/ale/autoload/ale/handlers/shellcheck.vim	/^function! ale#handlers#shellcheck#DefineLinter(filetype) abort$/;"	f
ale#handlers#shellcheck#GetCommand	plugged/ale/autoload/ale/handlers/shellcheck.vim	/^function! ale#handlers#shellcheck#GetCommand(buffer, version) abort$/;"	f
ale#handlers#shellcheck#GetCwd	plugged/ale/autoload/ale/handlers/shellcheck.vim	/^function! ale#handlers#shellcheck#GetCwd(buffer) abort$/;"	f
ale#handlers#shellcheck#GetDialectArgument	plugged/ale/autoload/ale/handlers/shellcheck.vim	/^function! ale#handlers#shellcheck#GetDialectArgument(buffer) abort$/;"	f
ale#handlers#shellcheck#GetShellcheckDialectDirective	plugged/ale/autoload/ale/handlers/shellcheck.vim	/^function! ale#handlers#shellcheck#GetShellcheckDialectDirective(buffer) abort$/;"	f
ale#handlers#shellcheck#Handle	plugged/ale/autoload/ale/handlers/shellcheck.vim	/^function! ale#handlers#shellcheck#Handle(buffer, lines) abort$/;"	f
ale#handlers#sml#GetCmFile	plugged/ale/autoload/ale/handlers/sml.vim	/^function! ale#handlers#sml#GetCmFile(buffer) abort$/;"	f
ale#handlers#sml#GetExecutableSmlnjCm	plugged/ale/autoload/ale/handlers/sml.vim	/^function! ale#handlers#sml#GetExecutableSmlnjCm(buffer) abort$/;"	f
ale#handlers#sml#GetExecutableSmlnjFile	plugged/ale/autoload/ale/handlers/sml.vim	/^function! ale#handlers#sml#GetExecutableSmlnjFile(buffer) abort$/;"	f
ale#handlers#sml#Handle	plugged/ale/autoload/ale/handlers/sml.vim	/^function! ale#handlers#sml#Handle(buffer, lines) abort$/;"	f
ale#handlers#solhint#FindConfig	plugged/ale/autoload/ale/handlers/solhint.vim	/^function! ale#handlers#solhint#FindConfig(buffer) abort$/;"	f
ale#handlers#solhint#GetCommand	plugged/ale/autoload/ale/handlers/solhint.vim	/^function! ale#handlers#solhint#GetCommand(buffer) abort$/;"	f
ale#handlers#solhint#GetCwd	plugged/ale/autoload/ale/handlers/solhint.vim	/^function! ale#handlers#solhint#GetCwd(buffer) abort$/;"	f
ale#handlers#solhint#GetExecutable	plugged/ale/autoload/ale/handlers/solhint.vim	/^function! ale#handlers#solhint#GetExecutable(buffer) abort$/;"	f
ale#handlers#solhint#Handle	plugged/ale/autoload/ale/handlers/solhint.vim	/^function! ale#handlers#solhint#Handle(buffer, lines) abort$/;"	f
ale#handlers#spectral#HandleSpectralOutput	plugged/ale/autoload/ale/handlers/spectral.vim	/^function! ale#handlers#spectral#HandleSpectralOutput(buffer, lines) abort$/;"	f
ale#handlers#statix#Handle	plugged/ale/autoload/ale/handlers/statix.vim	/^function! ale#handlers#statix#Handle(buffer, lines) abort$/;"	f
ale#handlers#textlint#GetCommand	plugged/ale/autoload/ale/handlers/textlint.vim	/^function! ale#handlers#textlint#GetCommand(buffer) abort$/;"	f
ale#handlers#textlint#GetExecutable	plugged/ale/autoload/ale/handlers/textlint.vim	/^function! ale#handlers#textlint#GetExecutable(buffer) abort$/;"	f
ale#handlers#textlint#HandleTextlintOutput	plugged/ale/autoload/ale/handlers/textlint.vim	/^function! ale#handlers#textlint#HandleTextlintOutput(buffer, lines) abort$/;"	f
ale#handlers#tslint#GetExecutable	plugged/ale/autoload/ale/handlers/tslint.vim	/^function! ale#handlers#tslint#GetExecutable(buffer) abort$/;"	f
ale#handlers#tslint#InitVariables	plugged/ale/autoload/ale/handlers/tslint.vim	/^function! ale#handlers#tslint#InitVariables() abort$/;"	f
ale#handlers#tsserver#GetProjectRoot	plugged/ale/autoload/ale/handlers/tsserver.vim	/^function! ale#handlers#tsserver#GetProjectRoot(buffer) abort$/;"	f
ale#handlers#unix#HandleAsError	plugged/ale/autoload/ale/handlers/unix.vim	/^function! ale#handlers#unix#HandleAsError(buffer, lines) abort$/;"	f
ale#handlers#unix#HandleAsWarning	plugged/ale/autoload/ale/handlers/unix.vim	/^function! ale#handlers#unix#HandleAsWarning(buffer, lines) abort$/;"	f
ale#handlers#vale#GetType	plugged/ale/autoload/ale/handlers/vale.vim	/^function! ale#handlers#vale#GetType(severity) abort$/;"	f
ale#handlers#vale#Handle	plugged/ale/autoload/ale/handlers/vale.vim	/^function! ale#handlers#vale#Handle(buffer, lines) abort$/;"	f
ale#handlers#writegood#DefineLinter	plugged/ale/autoload/ale/handlers/writegood.vim	/^function! ale#handlers#writegood#DefineLinter(filetype) abort$/;"	f
ale#handlers#writegood#GetCommand	plugged/ale/autoload/ale/handlers/writegood.vim	/^function! ale#handlers#writegood#GetCommand(buffer) abort$/;"	f
ale#handlers#writegood#GetExecutable	plugged/ale/autoload/ale/handlers/writegood.vim	/^function! ale#handlers#writegood#GetExecutable(buffer) abort$/;"	f
ale#handlers#writegood#Handle	plugged/ale/autoload/ale/handlers/writegood.vim	/^function! ale#handlers#writegood#Handle(buffer, lines) abort$/;"	f
ale#handlers#writegood#ResetOptions	plugged/ale/autoload/ale/handlers/writegood.vim	/^function! ale#handlers#writegood#ResetOptions() abort$/;"	f
ale#handlers#xo#GetExecutable	plugged/ale/autoload/ale/handlers/xo.vim	/^function! ale#handlers#xo#GetExecutable(buffer) abort$/;"	f
ale#handlers#xo#GetLintCommand	plugged/ale/autoload/ale/handlers/xo.vim	/^function! ale#handlers#xo#GetLintCommand(buffer) abort$/;"	f
ale#handlers#xo#GetOptions	plugged/ale/autoload/ale/handlers/xo.vim	/^function! ale#handlers#xo#GetOptions(buffer) abort$/;"	f
ale#handlers#xo#GetType	plugged/ale/autoload/ale/handlers/xo.vim	/^function! ale#handlers#xo#GetType(buffer) abort$/;"	f
ale#handlers#xo#HandleJSON	plugged/ale/autoload/ale/handlers/xo.vim	/^function! ale#handlers#xo#HandleJSON(buffer, lines) abort$/;"	f
ale#handlers#yamllint#GetCommand	plugged/ale/autoload/ale/handlers/yamllint.vim	/^function! ale#handlers#yamllint#GetCommand(buffer) abort$/;"	f
ale#handlers#yamllint#Handle	plugged/ale/autoload/ale/handlers/yamllint.vim	/^function! ale#handlers#yamllint#Handle(buffer, lines) abort$/;"	f
ale#highlight#BufferHidden	plugged/ale/autoload/ale/highlight.vim	/^function! ale#highlight#BufferHidden(buffer) abort$/;"	f
ale#highlight#CreatePositions	plugged/ale/autoload/ale/highlight.vim	/^function! ale#highlight#CreatePositions(line, col, end_line, end_col) abort$/;"	f
ale#highlight#RemoveHighlights	plugged/ale/autoload/ale/highlight.vim	/^function! ale#highlight#RemoveHighlights() abort$/;"	f
ale#highlight#SetHighlights	plugged/ale/autoload/ale/highlight.vim	/^function! ale#highlight#SetHighlights(buffer, loclist) abort$/;"	f
ale#highlight#UpdateHighlights	plugged/ale/autoload/ale/highlight.vim	/^function! ale#highlight#UpdateHighlights() abort$/;"	f
ale#highlight#nvim_buf_add_highlight	plugged/ale/autoload/ale/highlight.vim	/^function! ale#highlight#nvim_buf_add_highlight(buffer, ns_id, hl_group, line, col_start, col_end) abort$/;"	f
ale#highlight#nvim_buf_clear_namespace	plugged/ale/autoload/ale/highlight.vim	/^function! ale#highlight#nvim_buf_clear_namespace(buffer, ns_id, line_start, line_end) abort$/;"	f
ale#history#Add	plugged/ale/autoload/ale/history.vim	/^function! ale#history#Add(buffer, status, job_id, command) abort$/;"	f
ale#history#Get	plugged/ale/autoload/ale/history.vim	/^function! ale#history#Get(buffer) abort$/;"	f
ale#history#RememberOutput	plugged/ale/autoload/ale/history.vim	/^function! ale#history#RememberOutput(buffer, job_id, output) abort$/;"	f
ale#history#SetExitCode	plugged/ale/autoload/ale/history.vim	/^function! ale#history#SetExitCode(buffer, job_id, exit_code) abort$/;"	f
ale#hover#ClearLSPData	plugged/ale/autoload/ale/hover.vim	/^function! ale#hover#ClearLSPData() abort$/;"	f
ale#hover#GetMap	plugged/ale/autoload/ale/hover.vim	/^function! ale#hover#GetMap() abort$/;"	f
ale#hover#HandleLSPResponse	plugged/ale/autoload/ale/hover.vim	/^function! ale#hover#HandleLSPResponse(conn_id, response) abort$/;"	f
ale#hover#HandleTSServerResponse	plugged/ale/autoload/ale/hover.vim	/^function! ale#hover#HandleTSServerResponse(conn_id, response) abort$/;"	f
ale#hover#ParseLSPResult	plugged/ale/autoload/ale/hover.vim	/^function! ale#hover#ParseLSPResult(contents) abort$/;"	f
ale#hover#SetMap	plugged/ale/autoload/ale/hover.vim	/^function! ale#hover#SetMap(map) abort$/;"	f
ale#hover#Show	plugged/ale/autoload/ale/hover.vim	/^function! ale#hover#Show(buffer, line, col, opt) abort$/;"	f
ale#hover#ShowAtCursor	plugged/ale/autoload/ale/hover.vim	/^function! ale#hover#ShowAtCursor() abort$/;"	f
ale#hover#ShowDocumentationAtCursor	plugged/ale/autoload/ale/hover.vim	/^function! ale#hover#ShowDocumentationAtCursor() abort$/;"	f
ale#hover#ShowTruncatedMessageAtCursor	plugged/ale/autoload/ale/hover.vim	/^function! ale#hover#ShowTruncatedMessageAtCursor() abort$/;"	f
ale#java#FindProjectRoot	plugged/ale/autoload/ale/java.vim	/^function! ale#java#FindProjectRoot(buffer) abort$/;"	f
ale#job#HasOpenChannel	plugged/ale/autoload/ale/job.vim	/^function! ale#job#HasOpenChannel(job_id) abort$/;"	f
ale#job#IsRunning	plugged/ale/autoload/ale/job.vim	/^function! ale#job#IsRunning(job_id) abort$/;"	f
ale#job#ParseVim8ProcessID	plugged/ale/autoload/ale/job.vim	/^function! ale#job#ParseVim8ProcessID(job_string) abort$/;"	f
ale#job#PrepareCommand	plugged/ale/autoload/ale/job.vim	/^function! ale#job#PrepareCommand(buffer, command) abort$/;"	f
ale#job#SendRaw	plugged/ale/autoload/ale/job.vim	/^function! ale#job#SendRaw(job_id, string) abort$/;"	f
ale#job#Start	plugged/ale/autoload/ale/job.vim	/^function! ale#job#Start(command, options) abort$/;"	f
ale#job#StartWithCmd	plugged/ale/autoload/ale/job.vim	/^function! ale#job#StartWithCmd(command, options) abort$/;"	f
ale#job#Stop	plugged/ale/autoload/ale/job.vim	/^function! ale#job#Stop(job_id) abort$/;"	f
ale#job#ValidateArguments	plugged/ale/autoload/ale/job.vim	/^function! ale#job#ValidateArguments(command, options) abort$/;"	f
ale#julia#FindProjectRoot	plugged/ale/autoload/ale/julia.vim	/^function! ale#julia#FindProjectRoot(buffer) abort$/;"	f
ale#linter#Define	plugged/ale/autoload/ale/linter.vim	/^function! ale#linter#Define(filetype, linter) abort$/;"	f
ale#linter#Get	plugged/ale/autoload/ale/linter.vim	/^function! ale#linter#Get(original_filetypes) abort$/;"	f
ale#linter#GetAddress	plugged/ale/autoload/ale/linter.vim	/^function! ale#linter#GetAddress(buffer, linter) abort$/;"	f
ale#linter#GetAll	plugged/ale/autoload/ale/linter.vim	/^function! ale#linter#GetAll(filetypes) abort$/;"	f
ale#linter#GetCommand	plugged/ale/autoload/ale/linter.vim	/^function! ale#linter#GetCommand(buffer, linter) abort$/;"	f
ale#linter#GetCwd	plugged/ale/autoload/ale/linter.vim	/^function! ale#linter#GetCwd(buffer, linter) abort$/;"	f
ale#linter#GetExecutable	plugged/ale/autoload/ale/linter.vim	/^function! ale#linter#GetExecutable(buffer, linter) abort$/;"	f
ale#linter#GetLanguage	plugged/ale/autoload/ale/linter.vim	/^function! ale#linter#GetLanguage(buffer, linter) abort$/;"	f
ale#linter#GetLintersLoaded	plugged/ale/autoload/ale/linter.vim	/^function! ale#linter#GetLintersLoaded() abort$/;"	f
ale#linter#PreProcess	plugged/ale/autoload/ale/linter.vim	/^function! ale#linter#PreProcess(filetype, linter) abort$/;"	f
ale#linter#PreventLoading	plugged/ale/autoload/ale/linter.vim	/^function! ale#linter#PreventLoading(filetype) abort$/;"	f
ale#linter#Reset	plugged/ale/autoload/ale/linter.vim	/^function! ale#linter#Reset() abort$/;"	f
ale#linter#ResolveFiletype	plugged/ale/autoload/ale/linter.vim	/^function! ale#linter#ResolveFiletype(original_filetype) abort$/;"	f
ale#list#ForcePopulateErrorList	plugged/ale/autoload/ale/list.vim	/^function! ale#list#ForcePopulateErrorList(populate_quickfix) abort$/;"	f
ale#list#GetCombinedList	plugged/ale/autoload/ale/list.vim	/^function! ale#list#GetCombinedList() abort$/;"	f
ale#list#IsQuickfixOpen	plugged/ale/autoload/ale/list.vim	/^function! ale#list#IsQuickfixOpen() abort$/;"	f
ale#list#SetLists	plugged/ale/autoload/ale/list.vim	/^function! ale#list#SetLists(buffer, loclist) abort$/;"	f
ale#loclist_jumping#FindNearest	plugged/ale/autoload/ale/loclist_jumping.vim	/^function! ale#loclist_jumping#FindNearest(direction, wrap, ...) abort$/;"	f
ale#loclist_jumping#Jump	plugged/ale/autoload/ale/loclist_jumping.vim	/^function! ale#loclist_jumping#Jump(direction, ...) abort$/;"	f
ale#loclist_jumping#JumpToIndex	plugged/ale/autoload/ale/loclist_jumping.vim	/^function! ale#loclist_jumping#JumpToIndex(index) abort$/;"	f
ale#loclist_jumping#WrapJump	plugged/ale/autoload/ale/loclist_jumping.vim	/^function! ale#loclist_jumping#WrapJump(direction, sargs) abort$/;"	f
ale#lsp#CloseDocument	plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#CloseDocument(buffer) abort$/;"	f
ale#lsp#CloseDocument	plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#CloseDocument(conn_id) abort$/;"	f
ale#lsp#ConnectToAddress	plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#ConnectToAddress(conn_id, address) abort$/;"	f
ale#lsp#CreateMessageData	plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#CreateMessageData(message) abort$/;"	f
ale#lsp#GetConnections	plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#GetConnections() abort$/;"	f
ale#lsp#GetNextMessageID	plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#GetNextMessageID() abort$/;"	f
ale#lsp#HandleInitResponse	plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#HandleInitResponse(conn, response) abort$/;"	f
ale#lsp#HandleMessage	plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#HandleMessage(conn_id, message) abort$/;"	f
ale#lsp#HasCapability	plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#HasCapability(conn_id, capability) abort$/;"	f
ale#lsp#MarkConnectionAsTsserver	plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#MarkConnectionAsTsserver(conn_id) abort$/;"	f
ale#lsp#MarkDocumentAsOpen	plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#MarkDocumentAsOpen(id, buffer) abort$/;"	f
ale#lsp#NotifyForChanges	plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#NotifyForChanges(conn_id, buffer) abort$/;"	f
ale#lsp#OnInit	plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#OnInit(conn_id, Callback) abort$/;"	f
ale#lsp#OpenDocument	plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#OpenDocument(conn_id, buffer, language_id) abort$/;"	f
ale#lsp#ReadMessageData	plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#ReadMessageData(data) abort$/;"	f
ale#lsp#Register	plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#Register(executable_or_address, project, init_options) abort$/;"	f
ale#lsp#RegisterCallback	plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#RegisterCallback(conn_id, callback) abort$/;"	f
ale#lsp#RemoveConnectionWithID	plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#RemoveConnectionWithID(id) abort$/;"	f
ale#lsp#ResetConnections	plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#ResetConnections() abort$/;"	f
ale#lsp#Send	plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#Send(conn_id, message) abort$/;"	f
ale#lsp#StartProgram	plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#StartProgram(conn_id, executable, command) abort$/;"	f
ale#lsp#Stop	plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#Stop(conn_id) abort$/;"	f
ale#lsp#StopAll	plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#StopAll() abort$/;"	f
ale#lsp#UpdateConfig	plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#UpdateConfig(conn_id, buffer, config) abort$/;"	f
ale#lsp#message#CodeAction	plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#CodeAction(buffer, line, column, end_line, end_column, diagnostics) abort$/;"	f
ale#lsp#message#Completion	plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#Completion(buffer, line, column, trigger_character) abort$/;"	f
ale#lsp#message#Definition	plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#Definition(buffer, line, column) abort$/;"	f
ale#lsp#message#DidChange	plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#DidChange(buffer) abort$/;"	f
ale#lsp#message#DidChangeConfiguration	plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#DidChangeConfiguration(buffer, config) abort$/;"	f
ale#lsp#message#DidClose	plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#DidClose(buffer) abort$/;"	f
ale#lsp#message#DidOpen	plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#DidOpen(buffer, language_id) abort$/;"	f
ale#lsp#message#DidSave	plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#DidSave(buffer, include_text) abort$/;"	f
ale#lsp#message#ExecuteCommand	plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#ExecuteCommand(command, arguments) abort$/;"	f
ale#lsp#message#Exit	plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#Exit() abort$/;"	f
ale#lsp#message#GetNextVersionID	plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#GetNextVersionID() abort$/;"	f
ale#lsp#message#Hover	plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#Hover(buffer, line, column) abort$/;"	f
ale#lsp#message#Implementation	plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#Implementation(buffer, line, column) abort$/;"	f
ale#lsp#message#Initialize	plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#Initialize(root_path, options, capabilities) abort$/;"	f
ale#lsp#message#Initialized	plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#Initialized() abort$/;"	f
ale#lsp#message#References	plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#References(buffer, line, column) abort$/;"	f
ale#lsp#message#Rename	plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#Rename(buffer, line, column, new_name) abort$/;"	f
ale#lsp#message#Shutdown	plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#Shutdown() abort$/;"	f
ale#lsp#message#Symbol	plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#Symbol(query) abort$/;"	f
ale#lsp#message#TypeDefinition	plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#TypeDefinition(buffer, line, column) abort$/;"	f
ale#lsp#reset#Complete	plugged/ale/autoload/ale/lsp/reset.vim	/^function! ale#lsp#reset#Complete(arg, line, pos) abort$/;"	f
ale#lsp#reset#StopAllLSPs	plugged/ale/autoload/ale/lsp/reset.vim	/^function! ale#lsp#reset#StopAllLSPs() abort$/;"	f
ale#lsp#reset#StopLSP	plugged/ale/autoload/ale/lsp/reset.vim	/^function! ale#lsp#reset#StopLSP(name, bang) abort$/;"	f
ale#lsp#response#GetErrorMessage	plugged/ale/autoload/ale/lsp/response.vim	/^function! ale#lsp#response#GetErrorMessage(response) abort$/;"	f
ale#lsp#response#ReadDiagnostics	plugged/ale/autoload/ale/lsp/response.vim	/^function! ale#lsp#response#ReadDiagnostics(response) abort$/;"	f
ale#lsp#response#ReadTSServerDiagnostics	plugged/ale/autoload/ale/lsp/response.vim	/^function! ale#lsp#response#ReadTSServerDiagnostics(response) abort$/;"	f
ale#lsp#tsserver_message#Change	plugged/ale/autoload/ale/lsp/tsserver_message.vim	/^function! ale#lsp#tsserver_message#Change(buffer) abort$/;"	f
ale#lsp#tsserver_message#Close	plugged/ale/autoload/ale/lsp/tsserver_message.vim	/^function! ale#lsp#tsserver_message#Close(buffer) abort$/;"	f
ale#lsp#tsserver_message#CompletionEntryDetails	plugged/ale/autoload/ale/lsp/tsserver_message.vim	/^function! ale#lsp#tsserver_message#CompletionEntryDetails(buffer, line, column, entry_names) abort$/;"	f
ale#lsp#tsserver_message#Completions	plugged/ale/autoload/ale/lsp/tsserver_message.vim	/^function! ale#lsp#tsserver_message#Completions($/;"	f
ale#lsp#tsserver_message#Definition	plugged/ale/autoload/ale/lsp/tsserver_message.vim	/^function! ale#lsp#tsserver_message#Definition(buffer, line, column) abort$/;"	f
ale#lsp#tsserver_message#GetApplicableRefactors	plugged/ale/autoload/ale/lsp/tsserver_message.vim	/^function! ale#lsp#tsserver_message#GetApplicableRefactors(buffer, line, column, end_line, end_column) abort$/;"	f
ale#lsp#tsserver_message#GetCodeFixes	plugged/ale/autoload/ale/lsp/tsserver_message.vim	/^function! ale#lsp#tsserver_message#GetCodeFixes(buffer, line, column, end_line, end_column, error_codes) abort$/;"	f
ale#lsp#tsserver_message#GetEditsForFileRename	plugged/ale/autoload/ale/lsp/tsserver_message.vim	/^function! ale#lsp#tsserver_message#GetEditsForFileRename($/;"	f
ale#lsp#tsserver_message#GetEditsForRefactor	plugged/ale/autoload/ale/lsp/tsserver_message.vim	/^function! ale#lsp#tsserver_message#GetEditsForRefactor(buffer, line, column, end_line, end_column, refactor, action) abort$/;"	f
ale#lsp#tsserver_message#Geterr	plugged/ale/autoload/ale/lsp/tsserver_message.vim	/^function! ale#lsp#tsserver_message#Geterr(buffer) abort$/;"	f
ale#lsp#tsserver_message#Implementation	plugged/ale/autoload/ale/lsp/tsserver_message.vim	/^function! ale#lsp#tsserver_message#Implementation(buffer, line, column) abort$/;"	f
ale#lsp#tsserver_message#Open	plugged/ale/autoload/ale/lsp/tsserver_message.vim	/^function! ale#lsp#tsserver_message#Open(buffer) abort$/;"	f
ale#lsp#tsserver_message#OrganizeImports	plugged/ale/autoload/ale/lsp/tsserver_message.vim	/^function! ale#lsp#tsserver_message#OrganizeImports(buffer) abort$/;"	f
ale#lsp#tsserver_message#Quickinfo	plugged/ale/autoload/ale/lsp/tsserver_message.vim	/^function! ale#lsp#tsserver_message#Quickinfo(buffer, line, column) abort$/;"	f
ale#lsp#tsserver_message#References	plugged/ale/autoload/ale/lsp/tsserver_message.vim	/^function! ale#lsp#tsserver_message#References(buffer, line, column) abort$/;"	f
ale#lsp#tsserver_message#Rename	plugged/ale/autoload/ale/lsp/tsserver_message.vim	/^function! ale#lsp#tsserver_message#Rename($/;"	f
ale#lsp#tsserver_message#TypeDefinition	plugged/ale/autoload/ale/lsp/tsserver_message.vim	/^function! ale#lsp#tsserver_message#TypeDefinition(buffer, line, column) abort$/;"	f
ale#lsp_linter#AddErrorMessage	plugged/ale/autoload/ale/lsp_linter.vim	/^function! ale#lsp_linter#AddErrorMessage(linter_name, message) abort$/;"	f
ale#lsp_linter#CheckWithLSP	plugged/ale/autoload/ale/lsp_linter.vim	/^function! ale#lsp_linter#CheckWithLSP(buffer, linter) abort$/;"	f
ale#lsp_linter#ClearLSPData	plugged/ale/autoload/ale/lsp_linter.vim	/^function! ale#lsp_linter#ClearLSPData() abort$/;"	f
ale#lsp_linter#FindProjectRoot	plugged/ale/autoload/ale/lsp_linter.vim	/^function! ale#lsp_linter#FindProjectRoot(buffer, linter) abort$/;"	f
ale#lsp_linter#GetConfig	plugged/ale/autoload/ale/lsp_linter.vim	/^function! ale#lsp_linter#GetConfig(buffer, linter) abort$/;"	f
ale#lsp_linter#GetEnabled	plugged/ale/autoload/ale/lsp_linter.vim	/^function! ale#lsp_linter#GetEnabled(buffer) abort$/;"	f
ale#lsp_linter#GetLSPLinterMap	plugged/ale/autoload/ale/lsp_linter.vim	/^function! ale#lsp_linter#GetLSPLinterMap() abort$/;"	f
ale#lsp_linter#GetOptions	plugged/ale/autoload/ale/lsp_linter.vim	/^function! ale#lsp_linter#GetOptions(buffer, linter) abort$/;"	f
ale#lsp_linter#HandleLSPResponse	plugged/ale/autoload/ale/lsp_linter.vim	/^function! ale#lsp_linter#HandleLSPResponse(conn_id, response) abort$/;"	f
ale#lsp_linter#OnInit	plugged/ale/autoload/ale/lsp_linter.vim	/^function! ale#lsp_linter#OnInit(linter, details, Callback) abort$/;"	f
ale#lsp_linter#SendRequest	plugged/ale/autoload/ale/lsp_linter.vim	/^function! ale#lsp_linter#SendRequest(buffer, linter_name, message, ...) abort$/;"	f
ale#lsp_linter#SetLSPLinterMap	plugged/ale/autoload/ale/lsp_linter.vim	/^function! ale#lsp_linter#SetLSPLinterMap(replacement_map) abort$/;"	f
ale#lsp_linter#StartLSP	plugged/ale/autoload/ale/lsp_linter.vim	/^function! ale#lsp_linter#StartLSP(buffer, linter, Callback) abort$/;"	f
ale#lsp_window#HandleShowMessage	plugged/ale/autoload/ale/lsp_window.vim	/^function! ale#lsp_window#HandleShowMessage(linter_name, format, params) abort$/;"	f
ale#lua#FindProjectRoot	plugged/ale/autoload/ale/lua.vim	/^function! ale#lua#FindProjectRoot(buffer) abort$/;"	f
ale#maven#BuildClasspathCommand	plugged/ale/autoload/ale/maven.vim	/^function! ale#maven#BuildClasspathCommand(buffer) abort$/;"	f
ale#maven#FindExecutable	plugged/ale/autoload/ale/maven.vim	/^function! ale#maven#FindExecutable(buffer) abort$/;"	f
ale#maven#FindProjectRoot	plugged/ale/autoload/ale/maven.vim	/^function! ale#maven#FindProjectRoot(buffer) abort$/;"	f
ale#node#Executable	plugged/ale/autoload/ale/node.vim	/^function! ale#node#Executable(buffer, executable) abort$/;"	f
ale#organize_imports#Execute	plugged/ale/autoload/ale/organize_imports.vim	/^function! ale#organize_imports#Execute() abort$/;"	f
ale#organize_imports#HandleTSServerResponse	plugged/ale/autoload/ale/organize_imports.vim	/^function! ale#organize_imports#HandleTSServerResponse(conn_id, response) abort$/;"	f
ale#other_source#ShowResults	plugged/ale/autoload/ale/other_source.vim	/^function! ale#other_source#ShowResults(buffer, linter_name, loclist) abort$/;"	f
ale#other_source#StartChecking	plugged/ale/autoload/ale/other_source.vim	/^function! ale#other_source#StartChecking(buffer, linter_name) abort$/;"	f
ale#path#Dirname	plugged/ale/autoload/ale/path.vim	/^function! ale#path#Dirname(path) abort$/;"	f
ale#path#FindExecutable	plugged/ale/autoload/ale/path.vim	/^function! ale#path#FindExecutable(buffer, base_var_name, path_list) abort$/;"	f
ale#path#FindNearestDirectory	plugged/ale/autoload/ale/path.vim	/^function! ale#path#FindNearestDirectory(buffer, directory_name) abort$/;"	f
ale#path#FindNearestExecutable	plugged/ale/autoload/ale/path.vim	/^function! ale#path#FindNearestExecutable(buffer, path_list) abort$/;"	f
ale#path#FindNearestFile	plugged/ale/autoload/ale/path.vim	/^function! ale#path#FindNearestFile(buffer, filename) abort$/;"	f
ale#path#FromFileURI	plugged/ale/autoload/ale/path.vim	/^function! ale#path#FromFileURI(uri) abort$/;"	f
ale#path#GetAbsPath	plugged/ale/autoload/ale/path.vim	/^function! ale#path#GetAbsPath(base_directory, filename) abort$/;"	f
ale#path#IsAbsolute	plugged/ale/autoload/ale/path.vim	/^function! ale#path#IsAbsolute(filename) abort$/;"	f
ale#path#IsBufferPath	plugged/ale/autoload/ale/path.vim	/^function! ale#path#IsBufferPath(buffer, complex_filename) abort$/;"	f
ale#path#IsTempName	plugged/ale/autoload/ale/path.vim	/^function! ale#path#IsTempName(filename) abort$/;"	f
ale#path#RemoveDriveLetter	plugged/ale/autoload/ale/path.vim	/^function! ale#path#RemoveDriveLetter(path) abort$/;"	f
ale#path#ResolveLocalPath	plugged/ale/autoload/ale/path.vim	/^function! ale#path#ResolveLocalPath(buffer, search_string, global_fallback) abort$/;"	f
ale#path#Simplify	plugged/ale/autoload/ale/path.vim	/^function! ale#path#Simplify(path) abort$/;"	f
ale#path#ToFileURI	plugged/ale/autoload/ale/path.vim	/^function! ale#path#ToFileURI(path) abort$/;"	f
ale#path#Upwards	plugged/ale/autoload/ale/path.vim	/^function! ale#path#Upwards(path) abort$/;"	f
ale#pattern_options#SetOptions	plugged/ale/autoload/ale/pattern_options.vim	/^function! ale#pattern_options#SetOptions(buffer) abort$/;"	f
ale#powershell#RunPowerShell	plugged/ale/autoload/ale/powershell.vim	/^function! ale#powershell#RunPowerShell(buffer, base_var_name, command) abort$/;"	f
ale#preview#CloseIfTypeMatches	plugged/ale/autoload/ale/preview.vim	/^function! ale#preview#CloseIfTypeMatches(filetype) abort$/;"	f
ale#preview#OpenSelection	plugged/ale/autoload/ale/preview.vim	/^function! ale#preview#OpenSelection() abort$/;"	f
ale#preview#OpenSelectionInTab	plugged/ale/autoload/ale/preview.vim	/^function! ale#preview#OpenSelectionInTab() abort$/;"	f
ale#preview#RepeatSelection	plugged/ale/autoload/ale/preview.vim	/^function! ale#preview#RepeatSelection() abort$/;"	f
ale#preview#SetLastSelection	plugged/ale/autoload/ale/preview.vim	/^function! ale#preview#SetLastSelection(item_list, options) abort$/;"	f
ale#preview#Show	plugged/ale/autoload/ale/preview.vim	/^function! ale#preview#Show(lines, ...) abort$/;"	f
ale#preview#ShowSelection	plugged/ale/autoload/ale/preview.vim	/^function! ale#preview#ShowSelection(item_list, ...) abort$/;"	f
ale#python#AutoVirtualenvEnvString	plugged/ale/autoload/ale/python.vim	/^function! ale#python#AutoVirtualenvEnvString(buffer) abort$/;"	f
ale#python#FindExecutable	plugged/ale/autoload/ale/python.vim	/^function! ale#python#FindExecutable(buffer, base_var_name, path_list) abort$/;"	f
ale#python#FindProjectRoot	plugged/ale/autoload/ale/python.vim	/^function! ale#python#FindProjectRoot(buffer) abort$/;"	f
ale#python#FindProjectRootIni	plugged/ale/autoload/ale/python.vim	/^function! ale#python#FindProjectRootIni(buffer) abort$/;"	f
ale#python#FindVirtualenv	plugged/ale/autoload/ale/python.vim	/^function! ale#python#FindVirtualenv(buffer) abort$/;"	f
ale#python#HandleTraceback	plugged/ale/autoload/ale/python.vim	/^function! ale#python#HandleTraceback(lines, limit) abort$/;"	f
ale#python#PipenvPresent	plugged/ale/autoload/ale/python.vim	/^function! ale#python#PipenvPresent(buffer) abort$/;"	f
ale#python#PoetryPresent	plugged/ale/autoload/ale/python.vim	/^function! ale#python#PoetryPresent(buffer) abort$/;"	f
ale#racket#FindProjectRoot	plugged/ale/autoload/ale/racket.vim	/^function! ale#racket#FindProjectRoot(buffer) abort$/;"	f
ale#references#ClearLSPData	plugged/ale/autoload/ale/references.vim	/^function! ale#references#ClearLSPData() abort$/;"	f
ale#references#Find	plugged/ale/autoload/ale/references.vim	/^function! ale#references#Find(...) abort$/;"	f
ale#references#FormatLSPResponseItem	plugged/ale/autoload/ale/references.vim	/^function! ale#references#FormatLSPResponseItem(response_item, options) abort$/;"	f
ale#references#FormatTSResponseItem	plugged/ale/autoload/ale/references.vim	/^function! ale#references#FormatTSResponseItem(response_item, options) abort$/;"	f
ale#references#GetMap	plugged/ale/autoload/ale/references.vim	/^function! ale#references#GetMap() abort$/;"	f
ale#references#HandleLSPResponse	plugged/ale/autoload/ale/references.vim	/^function! ale#references#HandleLSPResponse(conn_id, response) abort$/;"	f
ale#references#HandleTSServerResponse	plugged/ale/autoload/ale/references.vim	/^function! ale#references#HandleTSServerResponse(conn_id, response) abort$/;"	f
ale#references#SetMap	plugged/ale/autoload/ale/references.vim	/^function! ale#references#SetMap(map) abort$/;"	f
ale#rename#ClearLSPData	plugged/ale/autoload/ale/rename.vim	/^function! ale#rename#ClearLSPData() abort$/;"	f
ale#rename#Execute	plugged/ale/autoload/ale/rename.vim	/^function! ale#rename#Execute() abort$/;"	f
ale#rename#GetMap	plugged/ale/autoload/ale/rename.vim	/^function! ale#rename#GetMap() abort$/;"	f
ale#rename#HandleLSPResponse	plugged/ale/autoload/ale/rename.vim	/^function! ale#rename#HandleLSPResponse(conn_id, response) abort$/;"	f
ale#rename#HandleTSServerResponse	plugged/ale/autoload/ale/rename.vim	/^function! ale#rename#HandleTSServerResponse(conn_id, response) abort$/;"	f
ale#rename#SetMap	plugged/ale/autoload/ale/rename.vim	/^function! ale#rename#SetMap(map) abort$/;"	f
ale#ruby#EscapeExecutable	plugged/ale/autoload/ale/ruby.vim	/^function! ale#ruby#EscapeExecutable(executable, bundle_exec) abort$/;"	f
ale#ruby#FindProjectRoot	plugged/ale/autoload/ale/ruby.vim	/^function! ale#ruby#FindProjectRoot(buffer) abort$/;"	f
ale#ruby#FindRailsRoot	plugged/ale/autoload/ale/ruby.vim	/^function! ale#ruby#FindRailsRoot(buffer) abort$/;"	f
ale#ruby#HandleRubocopOutput	plugged/ale/autoload/ale/ruby.vim	/^function! ale#ruby#HandleRubocopOutput(buffer, lines) abort$/;"	f
ale#semver#GTE	plugged/ale/autoload/ale/semver.vim	/^function! ale#semver#GTE(lhs, rhs) abort$/;"	f
ale#semver#ParseVersion	plugged/ale/autoload/ale/semver.vim	/^function! ale#semver#ParseVersion(version_lines) abort$/;"	f
ale#semver#ResetVersionCache	plugged/ale/autoload/ale/semver.vim	/^function! ale#semver#ResetVersionCache() abort$/;"	f
ale#semver#RunWithVersionCheck	plugged/ale/autoload/ale/semver.vim	/^function! ale#semver#RunWithVersionCheck(buffer, executable, command, Callback) abort$/;"	f
ale#sign#Clear	plugged/ale/autoload/ale/sign.vim	/^function! ale#sign#Clear() abort$/;"	f
ale#sign#FindCurrentSigns	plugged/ale/autoload/ale/sign.vim	/^function! ale#sign#FindCurrentSigns(buffer) abort$/;"	f
ale#sign#GetSignCommands	plugged/ale/autoload/ale/sign.vim	/^function! ale#sign#GetSignCommands(buffer, was_sign_set, sign_map) abort$/;"	f
ale#sign#GetSignName	plugged/ale/autoload/ale/sign.vim	/^function! ale#sign#GetSignName(sublist) abort$/;"	f
ale#sign#ParsePattern	plugged/ale/autoload/ale/sign.vim	/^function! ale#sign#ParsePattern() abort$/;"	f
ale#sign#ParseSigns	plugged/ale/autoload/ale/sign.vim	/^function! ale#sign#ParseSigns(line_list) abort$/;"	f
ale#sign#ParseSignsWithGetPlaced	plugged/ale/autoload/ale/sign.vim	/^function! ale#sign#ParseSignsWithGetPlaced(buffer) abort$/;"	f
ale#sign#ReadSigns	plugged/ale/autoload/ale/sign.vim	/^function! ale#sign#ReadSigns(buffer) abort$/;"	f
ale#sign#SetSigns	plugged/ale/autoload/ale/sign.vim	/^function! ale#sign#SetSigns(buffer, loclist) abort$/;"	f
ale#sign#SetUpDefaultColumnWithoutErrorsHighlight	plugged/ale/autoload/ale/sign.vim	/^function! ale#sign#SetUpDefaultColumnWithoutErrorsHighlight() abort$/;"	f
ale#socket#Close	plugged/ale/autoload/ale/socket.vim	/^function! ale#socket#Close(channel_id) abort$/;"	f
ale#socket#GetAddress	plugged/ale/autoload/ale/socket.vim	/^function! ale#socket#GetAddress(channel_id) abort$/;"	f
ale#socket#IsOpen	plugged/ale/autoload/ale/socket.vim	/^function! ale#socket#IsOpen(channel_id) abort$/;"	f
ale#socket#Open	plugged/ale/autoload/ale/socket.vim	/^function! ale#socket#Open(address, options) abort$/;"	f
ale#socket#Send	plugged/ale/autoload/ale/socket.vim	/^function! ale#socket#Send(channel_id, data) abort$/;"	f
ale#statusline#Count	plugged/ale/autoload/ale/statusline.vim	/^function! ale#statusline#Count(buffer) abort$/;"	f
ale#statusline#FirstProblem	plugged/ale/autoload/ale/statusline.vim	/^function! ale#statusline#FirstProblem(buffer, type) abort$/;"	f
ale#statusline#Update	plugged/ale/autoload/ale/statusline.vim	/^function! ale#statusline#Update(buffer, loclist) abort$/;"	f
ale#swift#FindProjectRoot	plugged/ale/autoload/ale/swift.vim	/^function! ale#swift#FindProjectRoot(buffer) abort$/;"	f
ale#swift#GetAppleSwiftFormatCommand	plugged/ale/autoload/ale/swift.vim	/^function! ale#swift#GetAppleSwiftFormatCommand(buffer) abort$/;"	f
ale#swift#GetAppleSwiftFormatConfigArgs	plugged/ale/autoload/ale/swift.vim	/^function! ale#swift#GetAppleSwiftFormatConfigArgs(buffer) abort$/;"	f
ale#swift#GetAppleSwiftFormatExecutable	plugged/ale/autoload/ale/swift.vim	/^function! ale#swift#GetAppleSwiftFormatExecutable(buffer) abort$/;"	f
ale#symbol#ClearLSPData	plugged/ale/autoload/ale/symbol.vim	/^function! ale#symbol#ClearLSPData() abort$/;"	f
ale#symbol#GetMap	plugged/ale/autoload/ale/symbol.vim	/^function! ale#symbol#GetMap() abort$/;"	f
ale#symbol#HandleLSPResponse	plugged/ale/autoload/ale/symbol.vim	/^function! ale#symbol#HandleLSPResponse(conn_id, response) abort$/;"	f
ale#symbol#Search	plugged/ale/autoload/ale/symbol.vim	/^function! ale#symbol#Search(args) abort$/;"	f
ale#symbol#SetMap	plugged/ale/autoload/ale/symbol.vim	/^function! ale#symbol#SetMap(map) abort$/;"	f
ale#test#FlushJobs	plugged/ale/autoload/ale/test.vim	/^function! ale#test#FlushJobs() abort$/;"	f
ale#test#GetFilename	plugged/ale/autoload/ale/test.vim	/^function! ale#test#GetFilename(path) abort$/;"	f
ale#test#GetLoclistWithoutNewerKeys	plugged/ale/autoload/ale/test.vim	/^function! ale#test#GetLoclistWithoutNewerKeys() abort$/;"	f
ale#test#GetPreviewWindowText	plugged/ale/autoload/ale/test.vim	/^function! ale#test#GetPreviewWindowText() abort$/;"	f
ale#test#GetQflistWithoutNewerKeys	plugged/ale/autoload/ale/test.vim	/^function! ale#test#GetQflistWithoutNewerKeys() abort$/;"	f
ale#test#RestoreDirectory	plugged/ale/autoload/ale/test.vim	/^function! ale#test#RestoreDirectory() abort$/;"	f
ale#test#SetDirectory	plugged/ale/autoload/ale/test.vim	/^function! ale#test#SetDirectory(docker_path) abort$/;"	f
ale#test#SetFilename	plugged/ale/autoload/ale/test.vim	/^function! ale#test#SetFilename(path) abort$/;"	f
ale#test#WaitForJobs	plugged/ale/autoload/ale/test.vim	/^function! ale#test#WaitForJobs(deadline) abort$/;"	f
ale#toggle#Disable	plugged/ale/autoload/ale/toggle.vim	/^function! ale#toggle#Disable() abort$/;"	f
ale#toggle#DisableBuffer	plugged/ale/autoload/ale/toggle.vim	/^function! ale#toggle#DisableBuffer(buffer) abort$/;"	f
ale#toggle#Enable	plugged/ale/autoload/ale/toggle.vim	/^function! ale#toggle#Enable() abort$/;"	f
ale#toggle#EnableBuffer	plugged/ale/autoload/ale/toggle.vim	/^function! ale#toggle#EnableBuffer(buffer) abort$/;"	f
ale#toggle#Reset	plugged/ale/autoload/ale/toggle.vim	/^function! ale#toggle#Reset() abort$/;"	f
ale#toggle#ResetBuffer	plugged/ale/autoload/ale/toggle.vim	/^function! ale#toggle#ResetBuffer(buffer) abort$/;"	f
ale#toggle#Toggle	plugged/ale/autoload/ale/toggle.vim	/^function! ale#toggle#Toggle() abort$/;"	f
ale#toggle#ToggleBuffer	plugged/ale/autoload/ale/toggle.vim	/^function! ale#toggle#ToggleBuffer(buffer) abort$/;"	f
ale#uri#Decode	plugged/ale/autoload/ale/uri.vim	/^function! ale#uri#Decode(value) abort$/;"	f
ale#uri#Encode	plugged/ale/autoload/ale/uri.vim	/^function! ale#uri#Encode(value) abort$/;"	f
ale#uri#GetURIHandler	plugged/ale/autoload/ale/uri.vim	/^function! ale#uri#GetURIHandler(uri) abort$/;"	f
ale#uri#jdt#OpenJDTLink	plugged/ale/autoload/ale/uri/jdt.vim	/^function! ale#uri#jdt#OpenJDTLink(encoded_uri, line, column, options, conn_id) abort$/;"	f
ale#uri#jdt#ReadJDTLink	plugged/ale/autoload/ale/uri/jdt.vim	/^function! ale#uri#jdt#ReadJDTLink(encoded_uri) abort$/;"	f
ale#util#BinarySearch	plugged/ale/autoload/ale/util.vim	/^function! ale#util#BinarySearch(loclist, buffer, line, column) abort$/;"	f
ale#util#Col	plugged/ale/autoload/ale/util.vim	/^function! ale#util#Col(str, chr) abort$/;"	f
ale#util#EscapePCRE	plugged/ale/autoload/ale/util.vim	/^function! ale#util#EscapePCRE(unsafe_string) abort$/;"	f
ale#util#EscapeVim	plugged/ale/autoload/ale/util.vim	/^function! ale#util#EscapeVim(unsafe_string) abort$/;"	f
ale#util#Execute	plugged/ale/autoload/ale/util.vim	/^function! ale#util#Execute(expr) abort$/;"	f
ale#util#FeedKeys	plugged/ale/autoload/ale/util.vim	/^function! ale#util#FeedKeys(...) abort$/;"	f
ale#util#FindItemAtCursor	plugged/ale/autoload/ale/util.vim	/^function! ale#util#FindItemAtCursor(buffer) abort$/;"	f
ale#util#FunctionArgCount	plugged/ale/autoload/ale/util.vim	/^function! ale#util#FunctionArgCount(function) abort$/;"	f
ale#util#FuzzyJSONDecode	plugged/ale/autoload/ale/util.vim	/^function! ale#util#FuzzyJSONDecode(data, default) abort$/;"	f
ale#util#GetBufferContents	plugged/ale/autoload/ale/util.vim	/^function! ale#util#GetBufferContents(buffer) abort$/;"	f
ale#util#GetFunction	plugged/ale/autoload/ale/util.vim	/^function! ale#util#GetFunction(string_or_ref) abort$/;"	f
ale#util#GetItemPriority	plugged/ale/autoload/ale/util.vim	/^function! ale#util#GetItemPriority(item) abort$/;"	f
ale#util#GetLineCount	plugged/ale/autoload/ale/util.vim	/^function! ale#util#GetLineCount(buffer) abort$/;"	f
ale#util#GetMatches	plugged/ale/autoload/ale/util.vim	/^function! ale#util#GetMatches(lines, patterns) abort$/;"	f
ale#util#HasBuflineApi	plugged/ale/autoload/ale/util.vim	/^function! ale#util#HasBuflineApi() abort$/;"	f
ale#util#InSandbox	plugged/ale/autoload/ale/util.vim	/^function! ale#util#InSandbox() abort$/;"	f
ale#util#Input	plugged/ale/autoload/ale/util.vim	/^function! ale#util#Input(message, value, ...) abort$/;"	f
ale#util#JoinNeovimOutput	plugged/ale/autoload/ale/util.vim	/^function! ale#util#JoinNeovimOutput(job, last_line, data, mode, callback) abort$/;"	f
ale#util#LocItemCompare	plugged/ale/autoload/ale/util.vim	/^function! ale#util#LocItemCompare(left, right) abort$/;"	f
ale#util#LocItemCompareWithText	plugged/ale/autoload/ale/util.vim	/^function! ale#util#LocItemCompareWithText(left, right) abort$/;"	f
ale#util#MapMatches	plugged/ale/autoload/ale/util.vim	/^function! ale#util#MapMatches(lines, patterns, Callback) abort$/;"	f
ale#util#Mode	plugged/ale/autoload/ale/util.vim	/^function! ale#util#Mode(...) abort$/;"	f
ale#util#Open	plugged/ale/autoload/ale/util.vim	/^function! ale#util#Open(filename, line, column, options) abort$/;"	f
ale#util#SetBufferContents	plugged/ale/autoload/ale/util.vim	/^function! ale#util#SetBufferContents(buffer, lines) abort$/;"	f
ale#util#ShowMessage	plugged/ale/autoload/ale/util.vim	/^function! ale#util#ShowMessage(string, ...) abort$/;"	f
ale#util#StartPartialTimer	plugged/ale/autoload/ale/util.vim	/^function! ale#util#StartPartialTimer(delay, callback, args) abort$/;"	f
ale#util#StopPartialTimer	plugged/ale/autoload/ale/util.vim	/^function! ale#util#StopPartialTimer(timer_id) abort$/;"	f
ale#util#Tempname	plugged/ale/autoload/ale/util.vim	/^function! ale#util#Tempname() abort$/;"	f
ale#util#ToResource	plugged/ale/autoload/ale/util.vim	/^function! ale#util#ToResource(uri) abort$/;"	f
ale#util#ToURI	plugged/ale/autoload/ale/util.vim	/^function! ale#util#ToURI(resource) abort$/;"	f
ale#util#Writefile	plugged/ale/autoload/ale/util.vim	/^function! ale#util#Writefile(buffer, lines, filename) abort$/;"	f
ale#virtualtext#Clear	plugged/ale/autoload/ale/virtualtext.vim	/^function! ale#virtualtext#Clear(buffer) abort$/;"	f
ale#virtualtext#CompareSeverityPerLine	plugged/ale/autoload/ale/virtualtext.vim	/^function! ale#virtualtext#CompareSeverityPerLine(left, right) abort$/;"	f
ale#virtualtext#GetColumnPadding	plugged/ale/autoload/ale/virtualtext.vim	/^function! ale#virtualtext#GetColumnPadding(buffer, line) abort$/;"	f
ale#virtualtext#GetComment	plugged/ale/autoload/ale/virtualtext.vim	/^function! ale#virtualtext#GetComment(buffer) abort$/;"	f
ale#virtualtext#GetGroup	plugged/ale/autoload/ale/virtualtext.vim	/^function! ale#virtualtext#GetGroup(item) abort$/;"	f
ale#virtualtext#GetLastMessageForTests	plugged/ale/autoload/ale/virtualtext.vim	/^function! ale#virtualtext#GetLastMessageForTests() abort$/;"	f
ale#virtualtext#ResetDataForTests	plugged/ale/autoload/ale/virtualtext.vim	/^function! ale#virtualtext#ResetDataForTests() abort$/;"	f
ale#virtualtext#SetTexts	plugged/ale/autoload/ale/virtualtext.vim	/^function! ale#virtualtext#SetTexts(buffer, loclist) abort$/;"	f
ale#virtualtext#ShowCursorWarning	plugged/ale/autoload/ale/virtualtext.vim	/^function! ale#virtualtext#ShowCursorWarning(...) abort$/;"	f
ale#virtualtext#ShowCursorWarningWithDelay	plugged/ale/autoload/ale/virtualtext.vim	/^function! ale#virtualtext#ShowCursorWarningWithDelay() abort$/;"	f
ale#virtualtext#ShowMessage	plugged/ale/autoload/ale/virtualtext.vim	/^function! ale#virtualtext#ShowMessage(buffer, item) abort$/;"	f
ale_linters#ada#adals#GetAdaLSConfig	plugged/ale/ale_linters/ada/adals.vim	/^function! ale_linters#ada#adals#GetAdaLSConfig(buffer) abort$/;"	f
ale_linters#ada#adals#GetRootDirectory	plugged/ale/ale_linters/ada/adals.vim	/^function! ale_linters#ada#adals#GetRootDirectory(buffer) abort$/;"	f
ale_linters#ada#gcc#GetCommand	plugged/ale/ale_linters/ada/gcc.vim	/^function! ale_linters#ada#gcc#GetCommand(buffer) abort$/;"	f
ale_linters#ada#gcc#Handle	plugged/ale/ale_linters/ada/gcc.vim	/^function! ale_linters#ada#gcc#Handle(buffer, lines) abort$/;"	f
ale_linters#ansible#ansible_lint#GetCommand	plugged/ale/ale_linters/ansible/ansible_lint.vim	/^function! ale_linters#ansible#ansible_lint#GetCommand(buffer, version) abort$/;"	f
ale_linters#ansible#ansible_lint#GetExecutable	plugged/ale/ale_linters/ansible/ansible_lint.vim	/^function! ale_linters#ansible#ansible_lint#GetExecutable(buffer) abort$/;"	f
ale_linters#ansible#ansible_lint#Handle	plugged/ale/ale_linters/ansible/ansible_lint.vim	/^function! ale_linters#ansible#ansible_lint#Handle(buffer, version, lines) abort$/;"	f
ale_linters#ansible#language_server#Executable	plugged/ale/ale_linters/ansible/language_server.vim	/^function! ale_linters#ansible#language_server#Executable(buffer) abort$/;"	f
ale_linters#ansible#language_server#FindProjectRoot	plugged/ale/ale_linters/ansible/language_server.vim	/^function! ale_linters#ansible#language_server#FindProjectRoot(buffer) abort$/;"	f
ale_linters#ansible#language_server#GetCommand	plugged/ale/ale_linters/ansible/language_server.vim	/^function! ale_linters#ansible#language_server#GetCommand(buffer) abort$/;"	f
ale_linters#apiblueprint#drafter#HandleErrors	plugged/ale/ale_linters/apiblueprint/drafter.vim	/^function! ale_linters#apiblueprint#drafter#HandleErrors(buffer, lines) abort$/;"	f
ale_linters#asm#gcc#GetCommand	plugged/ale/ale_linters/asm/gcc.vim	/^function! ale_linters#asm#gcc#GetCommand(buffer) abort$/;"	f
ale_linters#asm#gcc#Handle	plugged/ale/ale_linters/asm/gcc.vim	/^function! ale_linters#asm#gcc#Handle(buffer, lines) abort$/;"	f
ale_linters#asm#llvm_mc#GetCommand	plugged/ale/ale_linters/asm/llvm_mc.vim	/^function! ale_linters#asm#llvm_mc#GetCommand(buffer) abort$/;"	f
ale_linters#asm#llvm_mc#Handle	plugged/ale/ale_linters/asm/llvm_mc.vim	/^function! ale_linters#asm#llvm_mc#Handle(buffer, lines) abort$/;"	f
ale_linters#avra#avra#GetCommand	plugged/ale/ale_linters/avra/avra.vim	/^function! ale_linters#avra#avra#GetCommand(buffer) abort$/;"	f
ale_linters#avra#avra#Handle	plugged/ale/ale_linters/avra/avra.vim	/^function! ale_linters#avra#avra#Handle(buffer, lines) abort$/;"	f
ale_linters#awk#gawk#GetCommand	plugged/ale/ale_linters/awk/gawk.vim	/^function! ale_linters#awk#gawk#GetCommand(buffer) abort$/;"	f
ale_linters#bib#bibclean#GetCommand	plugged/ale/ale_linters/bib/bibclean.vim	/^function! ale_linters#bib#bibclean#GetCommand(buffer) abort$/;"	f
ale_linters#bib#bibclean#Handle	plugged/ale/ale_linters/bib/bibclean.vim	/^function! ale_linters#bib#bibclean#Handle(buffer, lines) abort$/;"	f
ale_linters#bib#bibclean#get_type	plugged/ale/ale_linters/bib/bibclean.vim	/^function! ale_linters#bib#bibclean#get_type(str) abort$/;"	f
ale_linters#bib#bibclean#match_entry	plugged/ale/ale_linters/bib/bibclean.vim	/^function! ale_linters#bib#bibclean#match_entry(line) abort$/;"	f
ale_linters#bib#bibclean#match_msg	plugged/ale/ale_linters/bib/bibclean.vim	/^function! ale_linters#bib#bibclean#match_msg(line) abort$/;"	f
ale_linters#bib#bibclean#match_value	plugged/ale/ale_linters/bib/bibclean.vim	/^function! ale_linters#bib#bibclean#match_value(line) abort$/;"	f
ale_linters#bicep#az_bicep#Command	plugged/ale/ale_linters/bicep/az_bicep.vim	/^function! ale_linters#bicep#az_bicep#Command(buffer) abort$/;"	f
ale_linters#bicep#az_bicep#Executable	plugged/ale/ale_linters/bicep/az_bicep.vim	/^function! ale_linters#bicep#az_bicep#Executable(buffer) abort$/;"	f
ale_linters#bicep#az_bicep#Handle	plugged/ale/ale_linters/bicep/az_bicep.vim	/^function! ale_linters#bicep#az_bicep#Handle(buffer, lines) abort$/;"	f
ale_linters#bicep#bicep#Command	plugged/ale/ale_linters/bicep/bicep.vim	/^function! ale_linters#bicep#bicep#Command(buffer) abort$/;"	f
ale_linters#bicep#bicep#Executable	plugged/ale/ale_linters/bicep/bicep.vim	/^function! ale_linters#bicep#bicep#Executable(buffer) abort$/;"	f
ale_linters#bicep#bicep#Handle	plugged/ale/ale_linters/bicep/bicep.vim	/^function! ale_linters#bicep#bicep#Handle(buffer, lines) abort$/;"	f
ale_linters#bitbake#oelint_adv#Command	plugged/ale/ale_linters/bitbake/oelint_adv.vim	/^function! ale_linters#bitbake#oelint_adv#Command(buffer) abort$/;"	f
ale_linters#bitbake#oelint_adv#Handle	plugged/ale/ale_linters/bitbake/oelint_adv.vim	/^function! ale_linters#bitbake#oelint_adv#Handle(buffer, lines) abort$/;"	f
ale_linters#bzl#buildifier#GetCommand	plugged/ale/ale_linters/bzl/buildifier.vim	/^function! ale_linters#bzl#buildifier#GetCommand(buffer) abort$/;"	f
ale_linters#bzl#buildifier#Handle	plugged/ale/ale_linters/bzl/buildifier.vim	/^function! ale_linters#bzl#buildifier#Handle(buffer, lines) abort$/;"	f
ale_linters#c#cc#GetCommand	plugged/ale/ale_linters/c/cc.vim	/^function! ale_linters#c#cc#GetCommand(buffer, output) abort$/;"	f
ale_linters#c#cc#GetExecutable	plugged/ale/ale_linters/c/cc.vim	/^function! ale_linters#c#cc#GetExecutable(buffer) abort$/;"	f
ale_linters#c#clangd#GetCommand	plugged/ale/ale_linters/c/clangd.vim	/^function! ale_linters#c#clangd#GetCommand(buffer) abort$/;"	f
ale_linters#c#clangtidy#GetCommand	plugged/ale/ale_linters/c/clangtidy.vim	/^function! ale_linters#c#clangtidy#GetCommand(buffer, output) abort$/;"	f
ale_linters#c#cppcheck#GetCommand	plugged/ale/ale_linters/c/cppcheck.vim	/^function! ale_linters#c#cppcheck#GetCommand(buffer) abort$/;"	f
ale_linters#c#cpplint#GetCommand	plugged/ale/ale_linters/c/cpplint.vim	/^function! ale_linters#c#cpplint#GetCommand(buffer) abort$/;"	f
ale_linters#c#cquery#GetInitializationOptions	plugged/ale/ale_linters/c/cquery.vim	/^function! ale_linters#c#cquery#GetInitializationOptions(buffer) abort$/;"	f
ale_linters#c#cquery#GetProjectRoot	plugged/ale/ale_linters/c/cquery.vim	/^function! ale_linters#c#cquery#GetProjectRoot(buffer) abort$/;"	f
ale_linters#c#flawfinder#GetCommand	plugged/ale/ale_linters/c/flawfinder.vim	/^function! ale_linters#c#flawfinder#GetCommand(buffer) abort$/;"	f
ale_linters#cairo#sierra#GetCommand	plugged/ale/ale_linters/cairo/sierra.vim	/^function! ale_linters#cairo#sierra#GetCommand(buffer) abort$/;"	f
ale_linters#cairo#sierra#Handle	plugged/ale/ale_linters/cairo/sierra.vim	/^function! ale_linters#cairo#sierra#Handle(buffer, lines) abort$/;"	f
ale_linters#cairo#starknet#GetCommand	plugged/ale/ale_linters/cairo/starknet.vim	/^function! ale_linters#cairo#starknet#GetCommand(buffer) abort$/;"	f
ale_linters#cairo#starknet#Handle	plugged/ale/ale_linters/cairo/starknet.vim	/^function! ale_linters#cairo#starknet#Handle(buffer, lines) abort$/;"	f
ale_linters#chef#cookstyle#GetCommand	plugged/ale/ale_linters/chef/cookstyle.vim	/^function! ale_linters#chef#cookstyle#GetCommand(buffer) abort$/;"	f
ale_linters#chef#cookstyle#Handle	plugged/ale/ale_linters/chef/cookstyle.vim	/^function! ale_linters#chef#cookstyle#Handle(buffer, lines) abort$/;"	f
ale_linters#chef#foodcritic#GetCommand	plugged/ale/ale_linters/chef/foodcritic.vim	/^function! ale_linters#chef#foodcritic#GetCommand(buffer) abort$/;"	f
ale_linters#chef#foodcritic#Handle	plugged/ale/ale_linters/chef/foodcritic.vim	/^function! ale_linters#chef#foodcritic#Handle(buffer, lines) abort$/;"	f
ale_linters#clojure#clj_kondo#GetCommand	plugged/ale/ale_linters/clojure/clj_kondo.vim	/^function! ale_linters#clojure#clj_kondo#GetCommand(buffer) abort$/;"	f
ale_linters#clojure#clj_kondo#HandleCljKondoFormat	plugged/ale/ale_linters/clojure/clj_kondo.vim	/^function! ale_linters#clojure#clj_kondo#HandleCljKondoFormat(buffer, lines) abort$/;"	f
ale_linters#clojure#joker#HandleJokerFormat	plugged/ale/ale_linters/clojure/joker.vim	/^function! ale_linters#clojure#joker#HandleJokerFormat(buffer, lines) abort$/;"	f
ale_linters#cloudformation#cfn_python_lint#Handle	plugged/ale/ale_linters/cloudformation/cfn_python_lint.vim	/^function! ale_linters#cloudformation#cfn_python_lint#Handle(buffer, lines) abort$/;"	f
ale_linters#cmake#cmake_lint#Command	plugged/ale/ale_linters/cmake/cmake_lint.vim	/^function! ale_linters#cmake#cmake_lint#Command(buffer) abort$/;"	f
ale_linters#cmake#cmake_lint#Executable	plugged/ale/ale_linters/cmake/cmake_lint.vim	/^function! ale_linters#cmake#cmake_lint#Executable(buffer) abort$/;"	f
ale_linters#cmake#cmake_lint#Handle	plugged/ale/ale_linters/cmake/cmake_lint.vim	/^function! ale_linters#cmake#cmake_lint#Handle(buffer, lines) abort$/;"	f
ale_linters#cmake#cmakelint#Command	plugged/ale/ale_linters/cmake/cmakelint.vim	/^function! ale_linters#cmake#cmakelint#Command(buffer) abort$/;"	f
ale_linters#cmake#cmakelint#Executable	plugged/ale/ale_linters/cmake/cmakelint.vim	/^function! ale_linters#cmake#cmakelint#Executable(buffer) abort$/;"	f
ale_linters#coffee#coffee#GetCommand	plugged/ale/ale_linters/coffee/coffee.vim	/^function! ale_linters#coffee#coffee#GetCommand(buffer) abort$/;"	f
ale_linters#coffee#coffee#GetExecutable	plugged/ale/ale_linters/coffee/coffee.vim	/^function! ale_linters#coffee#coffee#GetExecutable(buffer) abort$/;"	f
ale_linters#coffee#coffeelint#GetCommand	plugged/ale/ale_linters/coffee/coffeelint.vim	/^function! ale_linters#coffee#coffeelint#GetCommand(buffer) abort$/;"	f
ale_linters#coffee#coffeelint#GetExecutable	plugged/ale/ale_linters/coffee/coffeelint.vim	/^function! ale_linters#coffee#coffeelint#GetExecutable(buffer) abort$/;"	f
ale_linters#coffee#coffeelint#Handle	plugged/ale/ale_linters/coffee/coffeelint.vim	/^function! ale_linters#coffee#coffeelint#Handle(buffer, lines) abort$/;"	f
ale_linters#cpp#cc#GetCommand	plugged/ale/ale_linters/cpp/cc.vim	/^function! ale_linters#cpp#cc#GetCommand(buffer, output) abort$/;"	f
ale_linters#cpp#cc#GetExecutable	plugged/ale/ale_linters/cpp/cc.vim	/^function! ale_linters#cpp#cc#GetExecutable(buffer) abort$/;"	f
ale_linters#cpp#clangcheck#GetCommand	plugged/ale/ale_linters/cpp/clangcheck.vim	/^function! ale_linters#cpp#clangcheck#GetCommand(buffer) abort$/;"	f
ale_linters#cpp#clangd#GetCommand	plugged/ale/ale_linters/cpp/clangd.vim	/^function! ale_linters#cpp#clangd#GetCommand(buffer) abort$/;"	f
ale_linters#cpp#clangtidy#GetCommand	plugged/ale/ale_linters/cpp/clangtidy.vim	/^function! ale_linters#cpp#clangtidy#GetCommand(buffer, output) abort$/;"	f
ale_linters#cpp#clazy#GetCommand	plugged/ale/ale_linters/cpp/clazy.vim	/^function! ale_linters#cpp#clazy#GetCommand(buffer) abort$/;"	f
ale_linters#cpp#cppcheck#GetCommand	plugged/ale/ale_linters/cpp/cppcheck.vim	/^function! ale_linters#cpp#cppcheck#GetCommand(buffer) abort$/;"	f
ale_linters#cpp#cpplint#GetCommand	plugged/ale/ale_linters/cpp/cpplint.vim	/^function! ale_linters#cpp#cpplint#GetCommand(buffer) abort$/;"	f
ale_linters#cpp#cquery#GetInitializationOptions	plugged/ale/ale_linters/cpp/cquery.vim	/^function! ale_linters#cpp#cquery#GetInitializationOptions(buffer) abort$/;"	f
ale_linters#cpp#cquery#GetProjectRoot	plugged/ale/ale_linters/cpp/cquery.vim	/^function! ale_linters#cpp#cquery#GetProjectRoot(buffer) abort$/;"	f
ale_linters#cpp#flawfinder#GetCommand	plugged/ale/ale_linters/cpp/flawfinder.vim	/^function! ale_linters#cpp#flawfinder#GetCommand(buffer) abort$/;"	f
ale_linters#crystal#ameba#GetCommand	plugged/ale/ale_linters/crystal/ameba.vim	/^function! ale_linters#crystal#ameba#GetCommand(buffer) abort$/;"	f
ale_linters#crystal#ameba#HandleAmebaOutput	plugged/ale/ale_linters/crystal/ameba.vim	/^function! ale_linters#crystal#ameba#HandleAmebaOutput(buffer, lines) abort$/;"	f
ale_linters#crystal#crystal#GetCommand	plugged/ale/ale_linters/crystal/crystal.vim	/^function! ale_linters#crystal#crystal#GetCommand(buffer) abort$/;"	f
ale_linters#crystal#crystal#Handle	plugged/ale/ale_linters/crystal/crystal.vim	/^function! ale_linters#crystal#crystal#Handle(buffer, lines) abort$/;"	f
ale_linters#cs#csc#GetCommand	plugged/ale/ale_linters/cs/csc.vim	/^function! ale_linters#cs#csc#GetCommand(buffer) abort$/;"	f
ale_linters#cs#csc#GetCwd	plugged/ale/ale_linters/cs/csc.vim	/^function! ale_linters#cs#csc#GetCwd(buffer) abort$/;"	f
ale_linters#cs#csc#Handle	plugged/ale/ale_linters/cs/csc.vim	/^function! ale_linters#cs#csc#Handle(buffer, lines) abort$/;"	f
ale_linters#cs#mcs#GetCommand	plugged/ale/ale_linters/cs/mcs.vim	/^function! ale_linters#cs#mcs#GetCommand(buffer) abort$/;"	f
ale_linters#cs#mcs#Handle	plugged/ale/ale_linters/cs/mcs.vim	/^function! ale_linters#cs#mcs#Handle(buffer, lines) abort$/;"	f
ale_linters#cs#mcsc#GetCommand	plugged/ale/ale_linters/cs/mcsc.vim	/^function! ale_linters#cs#mcsc#GetCommand(buffer) abort$/;"	f
ale_linters#cs#mcsc#GetCwd	plugged/ale/ale_linters/cs/mcsc.vim	/^function! ale_linters#cs#mcsc#GetCwd(buffer) abort$/;"	f
ale_linters#cs#mcsc#Handle	plugged/ale/ale_linters/cs/mcsc.vim	/^function! ale_linters#cs#mcsc#Handle(buffer, lines) abort$/;"	f
ale_linters#css#csslint#GetCommand	plugged/ale/ale_linters/css/csslint.vim	/^function! ale_linters#css#csslint#GetCommand(buffer) abort$/;"	f
ale_linters#css#stylelint#GetCommand	plugged/ale/ale_linters/css/stylelint.vim	/^function! ale_linters#css#stylelint#GetCommand(buffer) abort$/;"	f
ale_linters#css#vscodecss#GetProjectRoot	plugged/ale/ale_linters/css/vscodecss.vim	/^function! ale_linters#css#vscodecss#GetProjectRoot(buffer) abort$/;"	f
ale_linters#cucumber#cucumber#GetCommand	plugged/ale/ale_linters/cucumber/cucumber.vim	/^function! ale_linters#cucumber#cucumber#GetCommand(buffer) abort$/;"	f
ale_linters#cucumber#cucumber#Handle	plugged/ale/ale_linters/cucumber/cucumber.vim	/^function! ale_linters#cucumber#cucumber#Handle(buffer, lines) abort$/;"	f
ale_linters#cuda#clangd#GetCommand	plugged/ale/ale_linters/cuda/clangd.vim	/^function! ale_linters#cuda#clangd#GetCommand(buffer) abort$/;"	f
ale_linters#cuda#nvcc#GetCommand	plugged/ale/ale_linters/cuda/nvcc.vim	/^function! ale_linters#cuda#nvcc#GetCommand(buffer) abort$/;"	f
ale_linters#cuda#nvcc#HandleNVCCFormat	plugged/ale/ale_linters/cuda/nvcc.vim	/^function! ale_linters#cuda#nvcc#HandleNVCCFormat(buffer, lines) abort$/;"	f
ale_linters#cypher#cypher_lint#Handle	plugged/ale/ale_linters/cypher/cypher_lint.vim	/^function! ale_linters#cypher#cypher_lint#Handle(buffer, lines) abort$/;"	f
ale_linters#d#dls#FindProjectRoot	plugged/ale/ale_linters/d/dls.vim	/^function! ale_linters#d#dls#FindProjectRoot(buffer) abort$/;"	f
ale_linters#d#dls#GetExecutable	plugged/ale/ale_linters/d/dls.vim	/^function! ale_linters#d#dls#GetExecutable(buffer) abort$/;"	f
ale_linters#d#dmd#DMDCommand	plugged/ale/ale_linters/d/dmd.vim	/^function! ale_linters#d#dmd#DMDCommand(buffer, dub_output, meta) abort$/;"	f
ale_linters#d#dmd#Handle	plugged/ale/ale_linters/d/dmd.vim	/^function! ale_linters#d#dmd#Handle(buffer, lines) abort$/;"	f
ale_linters#d#dmd#RunDUBCommand	plugged/ale/ale_linters/d/dmd.vim	/^function! ale_linters#d#dmd#RunDUBCommand(buffer) abort$/;"	f
ale_linters#dafny#dafny#GetCommand	plugged/ale/ale_linters/dafny/dafny.vim	/^function! ale_linters#dafny#dafny#GetCommand(buffer) abort$/;"	f
ale_linters#dafny#dafny#Handle	plugged/ale/ale_linters/dafny/dafny.vim	/^function! ale_linters#dafny#dafny#Handle(buffer, lines) abort$/;"	f
ale_linters#dart#analysis_server#GetCommand	plugged/ale/ale_linters/dart/analysis_server.vim	/^function! ale_linters#dart#analysis_server#GetCommand(buffer) abort$/;"	f
ale_linters#dart#analysis_server#GetProjectRoot	plugged/ale/ale_linters/dart/analysis_server.vim	/^function! ale_linters#dart#analysis_server#GetProjectRoot(buffer) abort$/;"	f
ale_linters#dart#dart_analyze#Handle	plugged/ale/ale_linters/dart/dart_analyze.vim	/^function! ale_linters#dart#dart_analyze#Handle(buffer, lines) abort$/;"	f
ale_linters#dart#language_server#GetProjectRoot	plugged/ale/ale_linters/dart/language_server.vim	/^function! ale_linters#dart#language_server#GetProjectRoot(buffer) abort$/;"	f
ale_linters#desktop#desktop_file_validate#Handle	plugged/ale/ale_linters/desktop/desktop_file_validate.vim	/^function! ale_linters#desktop#desktop_file_validate#Handle(buffer, lines) abort$/;"	f
ale_linters#dockerfile#dockerfile_lint#GetCommand	plugged/ale/ale_linters/dockerfile/dockerfile_lint.vim	/^function! ale_linters#dockerfile#dockerfile_lint#GetCommand(buffer) abort$/;"	f
ale_linters#dockerfile#dockerfile_lint#GetType	plugged/ale/ale_linters/dockerfile/dockerfile_lint.vim	/^function! ale_linters#dockerfile#dockerfile_lint#GetType(type) abort$/;"	f
ale_linters#dockerfile#dockerfile_lint#Handle	plugged/ale/ale_linters/dockerfile/dockerfile_lint.vim	/^function! ale_linters#dockerfile#dockerfile_lint#Handle(buffer, lines) abort$/;"	f
ale_linters#dockerfile#dockerlinter#GetCommand	plugged/ale/ale_linters/dockerfile/dockerlinter.vim	/^function! ale_linters#dockerfile#dockerlinter#GetCommand(buffer) abort$/;"	f
ale_linters#dockerfile#dockerlinter#GetType	plugged/ale/ale_linters/dockerfile/dockerlinter.vim	/^function! ale_linters#dockerfile#dockerlinter#GetType(type) abort$/;"	f
ale_linters#dockerfile#dockerlinter#Handle	plugged/ale/ale_linters/dockerfile/dockerlinter.vim	/^function! ale_linters#dockerfile#dockerlinter#Handle(buffer, lines) abort$/;"	f
ale_linters#dockerfile#hadolint#GetCommand	plugged/ale/ale_linters/dockerfile/hadolint.vim	/^function! ale_linters#dockerfile#hadolint#GetCommand(buffer) abort$/;"	f
ale_linters#dockerfile#hadolint#GetExecutable	plugged/ale/ale_linters/dockerfile/hadolint.vim	/^function! ale_linters#dockerfile#hadolint#GetExecutable(buffer) abort$/;"	f
ale_linters#dockerfile#hadolint#Handle	plugged/ale/ale_linters/dockerfile/hadolint.vim	/^function! ale_linters#dockerfile#hadolint#Handle(buffer, lines) abort$/;"	f
ale_linters#elixir#credo#GetCommand	plugged/ale/ale_linters/elixir/credo.vim	/^function! ale_linters#elixir#credo#GetCommand(buffer) abort$/;"	f
ale_linters#elixir#credo#GetConfigFile	plugged/ale/ale_linters/elixir/credo.vim	/^function! ale_linters#elixir#credo#GetConfigFile() abort$/;"	f
ale_linters#elixir#credo#GetMode	plugged/ale/ale_linters/elixir/credo.vim	/^function! ale_linters#elixir#credo#GetMode() abort$/;"	f
ale_linters#elixir#credo#Handle	plugged/ale/ale_linters/elixir/credo.vim	/^function! ale_linters#elixir#credo#Handle(buffer, lines) abort$/;"	f
ale_linters#elixir#dialyxir#Handle	plugged/ale/ale_linters/elixir/dialyxir.vim	/^function! ale_linters#elixir#dialyxir#Handle(buffer, lines) abort$/;"	f
ale_linters#elixir#dogma#Handle	plugged/ale/ale_linters/elixir/dogma.vim	/^function! ale_linters#elixir#dogma#Handle(buffer, lines) abort$/;"	f
ale_linters#elixir#elixir_ls#GetExecutable	plugged/ale/ale_linters/elixir/elixir_ls.vim	/^function! ale_linters#elixir#elixir_ls#GetExecutable(buffer) abort$/;"	f
ale_linters#elixir#lexical#GetExecutable	plugged/ale/ale_linters/elixir/lexical.vim	/^function! ale_linters#elixir#lexical#GetExecutable(buffer) abort$/;"	f
ale_linters#elixir#mix#GetCommand	plugged/ale/ale_linters/elixir/mix.vim	/^function! ale_linters#elixir#mix#GetCommand(buffer) abort$/;"	f
ale_linters#elixir#mix#Handle	plugged/ale/ale_linters/elixir/mix.vim	/^function! ale_linters#elixir#mix#Handle(buffer, lines) abort$/;"	f
ale_linters#elm#ls#GetOptions	plugged/ale/ale_linters/elm/ls.vim	/^function! ale_linters#elm#ls#GetOptions(buffer) abort$/;"	f
ale_linters#elm#ls#GetProjectRoot	plugged/ale/ale_linters/elm/ls.vim	/^function! ale_linters#elm#ls#GetProjectRoot(buffer) abort$/;"	f
ale_linters#elm#make#FileIsBuffer	plugged/ale/ale_linters/elm/make.vim	/^function! ale_linters#elm#make#FileIsBuffer(path) abort$/;"	f
ale_linters#elm#make#GetCommand	plugged/ale/ale_linters/elm/make.vim	/^function! ale_linters#elm#make#GetCommand(buffer) abort$/;"	f
ale_linters#elm#make#GetCwd	plugged/ale/ale_linters/elm/make.vim	/^function! ale_linters#elm#make#GetCwd(buffer) abort$/;"	f
ale_linters#elm#make#GetExecutable	plugged/ale/ale_linters/elm/make.vim	/^function! ale_linters#elm#make#GetExecutable(buffer) abort$/;"	f
ale_linters#elm#make#GetPackageFile	plugged/ale/ale_linters/elm/make.vim	/^function! ale_linters#elm#make#GetPackageFile(buffer) abort$/;"	f
ale_linters#elm#make#GetRootDir	plugged/ale/ale_linters/elm/make.vim	/^function! ale_linters#elm#make#GetRootDir(buffer) abort$/;"	f
ale_linters#elm#make#Handle	plugged/ale/ale_linters/elm/make.vim	/^function! ale_linters#elm#make#Handle(buffer, lines) abort$/;"	f
ale_linters#elm#make#HandleElm018Line	plugged/ale/ale_linters/elm/make.vim	/^function! ale_linters#elm#make#HandleElm018Line(line, output) abort$/;"	f
ale_linters#elm#make#HandleElm019Line	plugged/ale/ale_linters/elm/make.vim	/^function! ale_linters#elm#make#HandleElm019Line(line, output) abort$/;"	f
ale_linters#elm#make#IsTest	plugged/ale/ale_linters/elm/make.vim	/^function! ale_linters#elm#make#IsTest(buffer) abort$/;"	f
ale_linters#elm#make#IsVersionGte19	plugged/ale/ale_linters/elm/make.vim	/^function! ale_linters#elm#make#IsVersionGte19(buffer) abort$/;"	f
ale_linters#elm#make#ParseMessage	plugged/ale/ale_linters/elm/make.vim	/^function! ale_linters#elm#make#ParseMessage(message) abort$/;"	f
ale_linters#elm#make#ParseMessageItem	plugged/ale/ale_linters/elm/make.vim	/^function! ale_linters#elm#make#ParseMessageItem(item) abort$/;"	f
ale_linters#erlang#dialyzer#FindPlt	plugged/ale/ale_linters/erlang/dialyzer.vim	/^function! ale_linters#erlang#dialyzer#FindPlt(buffer) abort$/;"	f
ale_linters#erlang#dialyzer#GetCommand	plugged/ale/ale_linters/erlang/dialyzer.vim	/^function! ale_linters#erlang#dialyzer#GetCommand(buffer) abort$/;"	f
ale_linters#erlang#dialyzer#GetExecutable	plugged/ale/ale_linters/erlang/dialyzer.vim	/^function! ale_linters#erlang#dialyzer#GetExecutable(buffer) abort$/;"	f
ale_linters#erlang#dialyzer#GetPlt	plugged/ale/ale_linters/erlang/dialyzer.vim	/^function! ale_linters#erlang#dialyzer#GetPlt(buffer) abort$/;"	f
ale_linters#erlang#dialyzer#GetRebar3Profile	plugged/ale/ale_linters/erlang/dialyzer.vim	/^function! ale_linters#erlang#dialyzer#GetRebar3Profile(buffer) abort$/;"	f
ale_linters#erlang#dialyzer#Handle	plugged/ale/ale_linters/erlang/dialyzer.vim	/^function! ale_linters#erlang#dialyzer#Handle(buffer, lines) abort$/;"	f
ale_linters#erlang#elvis#Handle	plugged/ale/ale_linters/erlang/elvis.vim	/^function! ale_linters#erlang#elvis#Handle(buffer, lines) abort$/;"	f
ale_linters#erlang#erlc#GetCommand	plugged/ale/ale_linters/erlang/erlc.vim	/^function! ale_linters#erlang#erlc#GetCommand(buffer) abort$/;"	f
ale_linters#erlang#erlc#GetExecutable	plugged/ale/ale_linters/erlang/erlc.vim	/^function! ale_linters#erlang#erlc#GetExecutable(buffer) abort$/;"	f
ale_linters#erlang#erlc#Handle	plugged/ale/ale_linters/erlang/erlc.vim	/^function! ale_linters#erlang#erlc#Handle(buffer, lines) abort$/;"	f
ale_linters#erlang#syntaxerl#GetCommand	plugged/ale/ale_linters/erlang/syntaxerl.vim	/^function! ale_linters#erlang#syntaxerl#GetCommand(buffer, output, meta) abort$/;"	f
ale_linters#erlang#syntaxerl#Handle	plugged/ale/ale_linters/erlang/syntaxerl.vim	/^function! ale_linters#erlang#syntaxerl#Handle(buffer, lines) abort$/;"	f
ale_linters#erlang#syntaxerl#RunHelpCommand	plugged/ale/ale_linters/erlang/syntaxerl.vim	/^function! ale_linters#erlang#syntaxerl#RunHelpCommand(buffer) abort$/;"	f
ale_linters#eruby#erb#GetCommand	plugged/ale/ale_linters/eruby/erb.vim	/^function! ale_linters#eruby#erb#GetCommand(buffer) abort$/;"	f
ale_linters#eruby#erblint#GetCommand	plugged/ale/ale_linters/eruby/erblint.vim	/^function! ale_linters#eruby#erblint#GetCommand(buffer) abort$/;"	f
ale_linters#eruby#erblint#Handle	plugged/ale/ale_linters/eruby/erblint.vim	/^function! ale_linters#eruby#erblint#Handle(buffer, lines) abort$/;"	f
ale_linters#eruby#erubi#GetCommand	plugged/ale/ale_linters/eruby/erubi.vim	/^function! ale_linters#eruby#erubi#GetCommand(buffer, output, meta) abort$/;"	f
ale_linters#eruby#erubis#GetCommand	plugged/ale/ale_linters/eruby/erubis.vim	/^function! ale_linters#eruby#erubis#GetCommand(buffer) abort$/;"	f
ale_linters#eruby#ruumba#GetCommand	plugged/ale/ale_linters/eruby/ruumba.vim	/^function! ale_linters#eruby#ruumba#GetCommand(buffer) abort$/;"	f
ale_linters#eruby#ruumba#GetType	plugged/ale/ale_linters/eruby/ruumba.vim	/^function! ale_linters#eruby#ruumba#GetType(severity) abort$/;"	f
ale_linters#eruby#ruumba#Handle	plugged/ale/ale_linters/eruby/ruumba.vim	/^function! ale_linters#eruby#ruumba#Handle(buffer, lines) abort$/;"	f
ale_linters#fish#fish#Handle	plugged/ale/ale_linters/fish/fish.vim	/^function! ale_linters#fish#fish#Handle(buffer, lines) abort$/;"	f
ale_linters#fortran#gcc#GetCommand	plugged/ale/ale_linters/fortran/gcc.vim	/^function! ale_linters#fortran#gcc#GetCommand(buffer) abort$/;"	f
ale_linters#fortran#gcc#Handle	plugged/ale/ale_linters/fortran/gcc.vim	/^function! ale_linters#fortran#gcc#Handle(buffer, lines) abort$/;"	f
ale_linters#fortran#language_server#GetProjectRoot	plugged/ale/ale_linters/fortran/language_server.vim	/^function! ale_linters#fortran#language_server#GetProjectRoot(buffer) abort$/;"	f
ale_linters#fuse#fusionlint#GetCommand	plugged/ale/ale_linters/fuse/fusionlint.vim	/^function! ale_linters#fuse#fusionlint#GetCommand(buffer) abort$/;"	f
ale_linters#fuse#fusionlint#Handle	plugged/ale/ale_linters/fuse/fusionlint.vim	/^function! ale_linters#fuse#fusionlint#Handle(buffer, lines) abort$/;"	f
ale_linters#gitcommit#gitlint#GetCommand	plugged/ale/ale_linters/gitcommit/gitlint.vim	/^function! ale_linters#gitcommit#gitlint#GetCommand(buffer) abort$/;"	f
ale_linters#gitcommit#gitlint#GetExecutable	plugged/ale/ale_linters/gitcommit/gitlint.vim	/^function! ale_linters#gitcommit#gitlint#GetExecutable(buffer) abort$/;"	f
ale_linters#gitcommit#gitlint#Handle	plugged/ale/ale_linters/gitcommit/gitlint.vim	/^function! ale_linters#gitcommit#gitlint#Handle(buffer, lines) abort$/;"	f
ale_linters#glsl#glslang#GetCommand	plugged/ale/ale_linters/glsl/glslang.vim	/^function! ale_linters#glsl#glslang#GetCommand(buffer) abort$/;"	f
ale_linters#glsl#glslang#Handle	plugged/ale/ale_linters/glsl/glslang.vim	/^function! ale_linters#glsl#glslang#Handle(buffer, lines) abort$/;"	f
ale_linters#glsl#glslls#GetCommand	plugged/ale/ale_linters/glsl/glslls.vim	/^function! ale_linters#glsl#glslls#GetCommand(buffer) abort$/;"	f
ale_linters#glsl#glslls#GetProjectRoot	plugged/ale/ale_linters/glsl/glslls.vim	/^function! ale_linters#glsl#glslls#GetProjectRoot(buffer) abort$/;"	f
ale_linters#go#bingo#FindProjectRoot	plugged/ale/ale_linters/go/bingo.vim	/^function! ale_linters#go#bingo#FindProjectRoot(buffer) abort$/;"	f
ale_linters#go#bingo#GetCommand	plugged/ale/ale_linters/go/bingo.vim	/^function! ale_linters#go#bingo#GetCommand(buffer) abort$/;"	f
ale_linters#go#gobuild#GetMatches	plugged/ale/ale_linters/go/gobuild.vim	/^function! ale_linters#go#gobuild#GetMatches(lines) abort$/;"	f
ale_linters#go#gobuild#Handler	plugged/ale/ale_linters/go/gobuild.vim	/^function! ale_linters#go#gobuild#Handler(buffer, lines) abort$/;"	f
ale_linters#go#gofmt#GetCommand	plugged/ale/ale_linters/go/gofmt.vim	/^function! ale_linters#go#gofmt#GetCommand(buffer) abort$/;"	f
ale_linters#go#golangci_lint#GetCommand	plugged/ale/ale_linters/go/golangci_lint.vim	/^function! ale_linters#go#golangci_lint#GetCommand(buffer) abort$/;"	f
ale_linters#go#golangci_lint#GetMatches	plugged/ale/ale_linters/go/golangci_lint.vim	/^function! ale_linters#go#golangci_lint#GetMatches(lines) abort$/;"	f
ale_linters#go#golangci_lint#Handler	plugged/ale/ale_linters/go/golangci_lint.vim	/^function! ale_linters#go#golangci_lint#Handler(buffer, lines) abort$/;"	f
ale_linters#go#gopls#FindProjectRoot	plugged/ale/ale_linters/go/gopls.vim	/^function! ale_linters#go#gopls#FindProjectRoot(buffer) abort$/;"	f
ale_linters#go#gopls#GetCommand	plugged/ale/ale_linters/go/gopls.vim	/^function! ale_linters#go#gopls#GetCommand(buffer) abort$/;"	f
ale_linters#go#gotype#GetCommand	plugged/ale/ale_linters/go/gotype.vim	/^function! ale_linters#go#gotype#GetCommand(buffer) abort$/;"	f
ale_linters#go#gotype#GetExecutable	plugged/ale/ale_linters/go/gotype.vim	/^function! ale_linters#go#gotype#GetExecutable(buffer) abort$/;"	f
ale_linters#go#langserver#GetCommand	plugged/ale/ale_linters/go/langserver.vim	/^function! ale_linters#go#langserver#GetCommand(buffer) abort$/;"	f
ale_linters#go#revive#GetCommand	plugged/ale/ale_linters/go/revive.vim	/^function! ale_linters#go#revive#GetCommand(buffer) abort$/;"	f
ale_linters#go#staticcheck#GetCommand	plugged/ale/ale_linters/go/staticcheck.vim	/^function! ale_linters#go#staticcheck#GetCommand(buffer) abort$/;"	f
ale_linters#groovy#npmgroovylint#GetCommand	plugged/ale/ale_linters/groovy/npmgroovylint.vim	/^function! ale_linters#groovy#npmgroovylint#GetCommand(buffer) abort$/;"	f
ale_linters#groovy#npmgroovylint#Handle	plugged/ale/ale_linters/groovy/npmgroovylint.vim	/^function! ale_linters#groovy#npmgroovylint#Handle(buffer, lines) abort$/;"	f
ale_linters#hack#hack#GetExecutable	plugged/ale/ale_linters/hack/hack.vim	/^function! ale_linters#hack#hack#GetExecutable(buffer) abort$/;"	f
ale_linters#hack#hack#GetProjectRoot	plugged/ale/ale_linters/hack/hack.vim	/^function! ale_linters#hack#hack#GetProjectRoot(buffer) abort$/;"	f
ale_linters#hack#hhast#GetExecutable	plugged/ale/ale_linters/hack/hhast.vim	/^function! ale_linters#hack#hhast#GetExecutable(buffer) abort$/;"	f
ale_linters#hack#hhast#GetInitializationOptions	plugged/ale/ale_linters/hack/hhast.vim	/^function! ale_linters#hack#hhast#GetInitializationOptions(buffer) abort$/;"	f
ale_linters#hack#hhast#GetProjectRoot	plugged/ale/ale_linters/hack/hhast.vim	/^function! ale_linters#hack#hhast#GetProjectRoot(buffer) abort$/;"	f
ale_linters#haml#hamllint#GetCommand	plugged/ale/ale_linters/haml/hamllint.vim	/^function! ale_linters#haml#hamllint#GetCommand(buffer) abort$/;"	f
ale_linters#haml#hamllint#GetExecutable	plugged/ale/ale_linters/haml/hamllint.vim	/^function! ale_linters#haml#hamllint#GetExecutable(buffer) abort$/;"	f
ale_linters#haml#hamllint#Handle	plugged/ale/ale_linters/haml/hamllint.vim	/^function! ale_linters#haml#hamllint#Handle(buffer, lines) abort$/;"	f
ale_linters#handlebars#embertemplatelint#GetCommand	plugged/ale/ale_linters/handlebars/embertemplatelint.vim	/^function! ale_linters#handlebars#embertemplatelint#GetCommand(buffer, version) abort$/;"	f
ale_linters#handlebars#embertemplatelint#GetCommandWithVersionCheck	plugged/ale/ale_linters/handlebars/embertemplatelint.vim	/^function! ale_linters#handlebars#embertemplatelint#GetCommandWithVersionCheck(buffer) abort$/;"	f
ale_linters#handlebars#embertemplatelint#GetExecutable	plugged/ale/ale_linters/handlebars/embertemplatelint.vim	/^function! ale_linters#handlebars#embertemplatelint#GetExecutable(buffer) abort$/;"	f
ale_linters#handlebars#embertemplatelint#Handle	plugged/ale/ale_linters/handlebars/embertemplatelint.vim	/^function! ale_linters#handlebars#embertemplatelint#Handle(buffer, lines) abort$/;"	f
ale_linters#haskell#cabal_ghc#GetCommand	plugged/ale/ale_linters/haskell/cabal_ghc.vim	/^function! ale_linters#haskell#cabal_ghc#GetCommand(buffer) abort$/;"	f
ale_linters#haskell#ghc#GetCommand	plugged/ale/ale_linters/haskell/ghc.vim	/^function! ale_linters#haskell#ghc#GetCommand(buffer) abort$/;"	f
ale_linters#haskell#ghc_mod#GetCommand	plugged/ale/ale_linters/haskell/ghc_mod.vim	/^function! ale_linters#haskell#ghc_mod#GetCommand (buffer) abort$/;"	f
ale_linters#haskell#hdevtools#GetCommand	plugged/ale/ale_linters/haskell/hdevtools.vim	/^function! ale_linters#haskell#hdevtools#GetCommand(buffer) abort$/;"	f
ale_linters#haskell#hie#GetCommand	plugged/ale/ale_linters/haskell/hie.vim	/^function! ale_linters#haskell#hie#GetCommand(buffer) abort$/;"	f
ale_linters#haskell#hie#GetProjectRoot	plugged/ale/ale_linters/haskell/hie.vim	/^function! ale_linters#haskell#hie#GetProjectRoot(buffer) abort$/;"	f
ale_linters#haskell#hlint#GetCommand	plugged/ale/ale_linters/haskell/hlint.vim	/^function! ale_linters#haskell#hlint#GetCommand(buffer) abort$/;"	f
ale_linters#haskell#hlint#Handle	plugged/ale/ale_linters/haskell/hlint.vim	/^function! ale_linters#haskell#hlint#Handle(buffer, lines) abort$/;"	f
ale_linters#haskell#hls#FindRootFile	plugged/ale/ale_linters/haskell/hls.vim	/^function! ale_linters#haskell#hls#FindRootFile(buffer) abort$/;"	f
ale_linters#haskell#hls#GetCommand	plugged/ale/ale_linters/haskell/hls.vim	/^function! ale_linters#haskell#hls#GetCommand(buffer) abort$/;"	f
ale_linters#haskell#hls#GetProjectRoot	plugged/ale/ale_linters/haskell/hls.vim	/^function! ale_linters#haskell#hls#GetProjectRoot(buffer) abort$/;"	f
ale_linters#haskell#stack_build#GetCommand	plugged/ale/ale_linters/haskell/stack_build.vim	/^function! ale_linters#haskell#stack_build#GetCommand(buffer) abort$/;"	f
ale_linters#haskell#stack_ghc#GetCommand	plugged/ale/ale_linters/haskell/stack_ghc.vim	/^function! ale_linters#haskell#stack_ghc#GetCommand(buffer) abort$/;"	f
ale_linters#html#angular#GetCommand	plugged/ale/ale_linters/html/angular.vim	/^function! ale_linters#html#angular#GetCommand(buffer) abort$/;"	f
ale_linters#html#angular#GetExecutable	plugged/ale/ale_linters/html/angular.vim	/^function! ale_linters#html#angular#GetExecutable(buffer) abort$/;"	f
ale_linters#html#angular#GetProjectRoot	plugged/ale/ale_linters/html/angular.vim	/^function! ale_linters#html#angular#GetProjectRoot(buffer) abort$/;"	f
ale_linters#html#htmlhint#GetCommand	plugged/ale/ale_linters/html/htmlhint.vim	/^function! ale_linters#html#htmlhint#GetCommand(buffer) abort$/;"	f
ale_linters#html#stylelint#GetCommand	plugged/ale/ale_linters/html/stylelint.vim	/^function! ale_linters#html#stylelint#GetCommand(buffer) abort$/;"	f
ale_linters#html#stylelint#GetExecutable	plugged/ale/ale_linters/html/stylelint.vim	/^function! ale_linters#html#stylelint#GetExecutable(buffer) abort$/;"	f
ale_linters#html#tidy#GetCommand	plugged/ale/ale_linters/html/tidy.vim	/^function! ale_linters#html#tidy#GetCommand(buffer) abort$/;"	f
ale_linters#html#tidy#Handle	plugged/ale/ale_linters/html/tidy.vim	/^function! ale_linters#html#tidy#Handle(buffer, lines) abort$/;"	f
ale_linters#html#vscodehtml#GetProjectRoot	plugged/ale/ale_linters/html/vscodehtml.vim	/^function! ale_linters#html#vscodehtml#GetProjectRoot(buffer) abort$/;"	f
ale_linters#idris#idris#GetCommand	plugged/ale/ale_linters/idris/idris.vim	/^function! ale_linters#idris#idris#GetCommand(buffer) abort$/;"	f
ale_linters#idris#idris#Handle	plugged/ale/ale_linters/idris/idris.vim	/^function! ale_linters#idris#idris#Handle(buffer, lines) abort$/;"	f
ale_linters#ink#ls#FindProjectRoot	plugged/ale/ale_linters/ink/ls.vim	/^function! ale_linters#ink#ls#FindProjectRoot(buffer) abort$/;"	f
ale_linters#ink#ls#GetCommand	plugged/ale/ale_linters/ink/ls.vim	/^function! ale_linters#ink#ls#GetCommand(buffer) abort$/;"	f
ale_linters#ink#ls#GetExecutable	plugged/ale/ale_linters/ink/ls.vim	/^function! ale_linters#ink#ls#GetExecutable(buffer) abort$/;"	f
ale_linters#inko#inko#GetCommand	plugged/ale/ale_linters/inko/inko.vim	/^function! ale_linters#inko#inko#GetCommand(buffer) abort$/;"	f
ale_linters#ispc#ispc#GetCommand	plugged/ale/ale_linters/ispc/ispc.vim	/^function! ale_linters#ispc#ispc#GetCommand(buffer) abort$/;"	f
ale_linters#ispc#ispc#Handle	plugged/ale/ale_linters/ispc/ispc.vim	/^function! ale_linters#ispc#ispc#Handle(buffer, lines) abort$/;"	f
ale_linters#java#checkstyle#GetCommand	plugged/ale/ale_linters/java/checkstyle.vim	/^function! ale_linters#java#checkstyle#GetCommand(buffer) abort$/;"	f
ale_linters#java#checkstyle#Handle	plugged/ale/ale_linters/java/checkstyle.vim	/^function! ale_linters#java#checkstyle#Handle(buffer, lines) abort$/;"	f
ale_linters#java#eclipselsp#Command	plugged/ale/ale_linters/java/eclipselsp.vim	/^function! ale_linters#java#eclipselsp#Command(buffer, version) abort$/;"	f
ale_linters#java#eclipselsp#CommandWithVersion	plugged/ale/ale_linters/java/eclipselsp.vim	/^function! ale_linters#java#eclipselsp#CommandWithVersion(buffer, version_lines, meta) abort$/;"	f
ale_linters#java#eclipselsp#ConfigurationPath	plugged/ale/ale_linters/java/eclipselsp.vim	/^function! ale_linters#java#eclipselsp#ConfigurationPath(buffer) abort$/;"	f
ale_linters#java#eclipselsp#Executable	plugged/ale/ale_linters/java/eclipselsp.vim	/^function! ale_linters#java#eclipselsp#Executable(buffer) abort$/;"	f
ale_linters#java#eclipselsp#JarPath	plugged/ale/ale_linters/java/eclipselsp.vim	/^function! ale_linters#java#eclipselsp#JarPath(buffer) abort$/;"	f
ale_linters#java#eclipselsp#Javaagent	plugged/ale/ale_linters/java/eclipselsp.vim	/^function! ale_linters#java#eclipselsp#Javaagent(buffer) abort$/;"	f
ale_linters#java#eclipselsp#RunWithVersionCheck	plugged/ale/ale_linters/java/eclipselsp.vim	/^function! ale_linters#java#eclipselsp#RunWithVersionCheck(buffer) abort$/;"	f
ale_linters#java#eclipselsp#TargetPath	plugged/ale/ale_linters/java/eclipselsp.vim	/^function! ale_linters#java#eclipselsp#TargetPath(buffer) abort$/;"	f
ale_linters#java#eclipselsp#VersionCheck	plugged/ale/ale_linters/java/eclipselsp.vim	/^function! ale_linters#java#eclipselsp#VersionCheck(version_lines) abort$/;"	f
ale_linters#java#eclipselsp#WorkspacePath	plugged/ale/ale_linters/java/eclipselsp.vim	/^function! ale_linters#java#eclipselsp#WorkspacePath(buffer) abort$/;"	f
ale_linters#java#javac#GetCommand	plugged/ale/ale_linters/java/javac.vim	/^function! ale_linters#java#javac#GetCommand(buffer, import_paths, meta) abort$/;"	f
ale_linters#java#javac#Handle	plugged/ale/ale_linters/java/javac.vim	/^function! ale_linters#java#javac#Handle(buffer, lines) abort$/;"	f
ale_linters#java#javac#RunWithImportPaths	plugged/ale/ale_linters/java/javac.vim	/^function! ale_linters#java#javac#RunWithImportPaths(buffer) abort$/;"	f
ale_linters#java#javalsp#Command	plugged/ale/ale_linters/java/javalsp.vim	/^function! ale_linters#java#javalsp#Command(buffer) abort$/;"	f
ale_linters#java#javalsp#Config	plugged/ale/ale_linters/java/javalsp.vim	/^function! ale_linters#java#javalsp#Config(buffer) abort$/;"	f
ale_linters#java#javalsp#Executable	plugged/ale/ale_linters/java/javalsp.vim	/^function! ale_linters#java#javalsp#Executable(buffer) abort$/;"	f
ale_linters#java#pmd#GetCommand	plugged/ale/ale_linters/java/pmd.vim	/^function! ale_linters#java#pmd#GetCommand(buffer) abort$/;"	f
ale_linters#java#pmd#Handle	plugged/ale/ale_linters/java/pmd.vim	/^function! ale_linters#java#pmd#Handle(buffer, lines) abort$/;"	f
ale_linters#javascript#flow#GetCommand	plugged/ale/ale_linters/javascript/flow.vim	/^function! ale_linters#javascript#flow#GetCommand(buffer, version) abort$/;"	f
ale_linters#javascript#flow#GetExecutable	plugged/ale/ale_linters/javascript/flow.vim	/^function! ale_linters#javascript#flow#GetExecutable(buffer) abort$/;"	f
ale_linters#javascript#flow#Handle	plugged/ale/ale_linters/javascript/flow.vim	/^function! ale_linters#javascript#flow#Handle(buffer, lines) abort$/;"	f
ale_linters#javascript#flow_ls#FindProjectRoot	plugged/ale/ale_linters/javascript/flow_ls.vim	/^function! ale_linters#javascript#flow_ls#FindProjectRoot(buffer) abort$/;"	f
ale_linters#javascript#jscs#GetCommand	plugged/ale/ale_linters/javascript/jscs.vim	/^function! ale_linters#javascript#jscs#GetCommand(buffer) abort$/;"	f
ale_linters#javascript#jscs#Handle	plugged/ale/ale_linters/javascript/jscs.vim	/^function! ale_linters#javascript#jscs#Handle(buffer, lines) abort$/;"	f
ale_linters#javascript#jshint#GetCommand	plugged/ale/ale_linters/javascript/jshint.vim	/^function! ale_linters#javascript#jshint#GetCommand(buffer) abort$/;"	f
ale_linters#javascript#standard#GetCommand	plugged/ale/ale_linters/javascript/standard.vim	/^function! ale_linters#javascript#standard#GetCommand(buffer) abort$/;"	f
ale_linters#javascript#standard#GetExecutable	plugged/ale/ale_linters/javascript/standard.vim	/^function! ale_linters#javascript#standard#GetExecutable(buffer) abort$/;"	f
ale_linters#json#jq#Handle	plugged/ale/ale_linters/json/jq.vim	/^function! ale_linters#json#jq#Handle(buffer, lines) abort$/;"	f
ale_linters#json#jsonlint#GetCommand	plugged/ale/ale_linters/json/jsonlint.vim	/^function! ale_linters#json#jsonlint#GetCommand(buffer) abort$/;"	f
ale_linters#json#jsonlint#GetExecutable	plugged/ale/ale_linters/json/jsonlint.vim	/^function! ale_linters#json#jsonlint#GetExecutable(buffer) abort$/;"	f
ale_linters#json#jsonlint#Handle	plugged/ale/ale_linters/json/jsonlint.vim	/^function! ale_linters#json#jsonlint#Handle(buffer, lines) abort$/;"	f
ale_linters#json#vscodejson#GetExecutable	plugged/ale/ale_linters/json/vscodejson.vim	/^function! ale_linters#json#vscodejson#GetExecutable(buffer) abort$/;"	f
ale_linters#json#vscodejson#GetProjectRoot	plugged/ale/ale_linters/json/vscodejson.vim	/^function! ale_linters#json#vscodejson#GetProjectRoot(buffer) abort$/;"	f
ale_linters#jsonnet#jsonnet_lint#GetCommand	plugged/ale/ale_linters/jsonnet/jsonnet_lint.vim	/^function! ale_linters#jsonnet#jsonnet_lint#GetCommand(buffer) abort$/;"	f
ale_linters#jsonnet#jsonnet_lint#Handle	plugged/ale/ale_linters/jsonnet/jsonnet_lint.vim	/^function! ale_linters#jsonnet#jsonnet_lint#Handle(buffer, lines) abort$/;"	f
ale_linters#jsonnet#jsonnetfmt#GetCommand	plugged/ale/ale_linters/jsonnet/jsonnetfmt.vim	/^function! ale_linters#jsonnet#jsonnetfmt#GetCommand(buffer) abort$/;"	f
ale_linters#jsonnet#jsonnetfmt#Handle	plugged/ale/ale_linters/jsonnet/jsonnetfmt.vim	/^function! ale_linters#jsonnet#jsonnetfmt#Handle(buffer, lines) abort$/;"	f
ale_linters#julia#languageserver#GetCommand	plugged/ale/ale_linters/julia/languageserver.vim	/^function! ale_linters#julia#languageserver#GetCommand(buffer) abort$/;"	f
ale_linters#kotlin#kotlinc#GetCommand	plugged/ale/ale_linters/kotlin/kotlinc.vim	/^function! ale_linters#kotlin#kotlinc#GetCommand(buffer, import_paths, meta) abort$/;"	f
ale_linters#kotlin#kotlinc#Handle	plugged/ale/ale_linters/kotlin/kotlinc.vim	/^function! ale_linters#kotlin#kotlinc#Handle(buffer, lines) abort$/;"	f
ale_linters#kotlin#kotlinc#RunWithImportPaths	plugged/ale/ale_linters/kotlin/kotlinc.vim	/^function! ale_linters#kotlin#kotlinc#RunWithImportPaths(buffer) abort$/;"	f
ale_linters#kotlin#languageserver#GetProjectRoot	plugged/ale/ale_linters/kotlin/languageserver.vim	/^function! ale_linters#kotlin#languageserver#GetProjectRoot(buffer) abort$/;"	f
ale_linters#less#lessc#GetCommand	plugged/ale/ale_linters/less/lessc.vim	/^function! ale_linters#less#lessc#GetCommand(buffer) abort$/;"	f
ale_linters#less#lessc#Handle	plugged/ale/ale_linters/less/lessc.vim	/^function! ale_linters#less#lessc#Handle(buffer, lines) abort$/;"	f
ale_linters#less#stylelint#GetCommand	plugged/ale/ale_linters/less/stylelint.vim	/^function! ale_linters#less#stylelint#GetCommand(buffer) abort$/;"	f
ale_linters#llvm#llc#HandleErrors	plugged/ale/ale_linters/llvm/llc.vim	/^function! ale_linters#llvm#llc#HandleErrors(buffer, lines) abort$/;"	f
ale_linters#lua#luac#Handle	plugged/ale/ale_linters/lua/luac.vim	/^function! ale_linters#lua#luac#Handle(buffer, lines) abort$/;"	f
ale_linters#lua#luacheck#GetCommand	plugged/ale/ale_linters/lua/luacheck.vim	/^function! ale_linters#lua#luacheck#GetCommand(buffer) abort$/;"	f
ale_linters#lua#luacheck#Handle	plugged/ale/ale_linters/lua/luacheck.vim	/^function! ale_linters#lua#luacheck#Handle(buffer, lines) abort$/;"	f
ale_linters#lua#selene#GetCommand	plugged/ale/ale_linters/lua/selene.vim	/^function! ale_linters#lua#selene#GetCommand(buffer) abort$/;"	f
ale_linters#lua#selene#Handle	plugged/ale/ale_linters/lua/selene.vim	/^function! ale_linters#lua#selene#Handle(buffer, lines) abort$/;"	f
ale_linters#make#checkmake#GetCommand	plugged/ale/ale_linters/make/checkmake.vim	/^function! ale_linters#make#checkmake#GetCommand(buffer) abort$/;"	f
ale_linters#make#checkmake#Handle	plugged/ale/ale_linters/make/checkmake.vim	/^function! ale_linters#make#checkmake#Handle(buffer, lines) abort$/;"	f
ale_linters#markdown#markdownlint#GetCommand	plugged/ale/ale_linters/markdown/markdownlint.vim	/^function! ale_linters#markdown#markdownlint#GetCommand(buffer) abort$/;"	f
ale_linters#markdown#markdownlint#GetExecutable	plugged/ale/ale_linters/markdown/markdownlint.vim	/^function! ale_linters#markdown#markdownlint#GetExecutable(buffer) abort$/;"	f
ale_linters#markdown#marksman#GetCommand	plugged/ale/ale_linters/markdown/marksman.vim	/^function! ale_linters#markdown#marksman#GetCommand(buffer) abort$/;"	f
ale_linters#markdown#marksman#GetProjectRoot	plugged/ale/ale_linters/markdown/marksman.vim	/^function! ale_linters#markdown#marksman#GetProjectRoot(buffer) abort$/;"	f
ale_linters#markdown#mdl#GetCommand	plugged/ale/ale_linters/markdown/mdl.vim	/^function! ale_linters#markdown#mdl#GetCommand(buffer) abort$/;"	f
ale_linters#markdown#mdl#GetExecutable	plugged/ale/ale_linters/markdown/mdl.vim	/^function! ale_linters#markdown#mdl#GetExecutable(buffer) abort$/;"	f
ale_linters#markdown#mdl#Handle	plugged/ale/ale_linters/markdown/mdl.vim	/^function! ale_linters#markdown#mdl#Handle(buffer, lines) abort$/;"	f
ale_linters#markdown#remark_lint#GetCommand	plugged/ale/ale_linters/markdown/remark_lint.vim	/^function! ale_linters#markdown#remark_lint#GetCommand(buffer) abort$/;"	f
ale_linters#markdown#remark_lint#Handle	plugged/ale/ale_linters/markdown/remark_lint.vim	/^function! ale_linters#markdown#remark_lint#Handle(buffer, lines) abort$/;"	f
ale_linters#markdown#vale#GetCommand	plugged/ale/ale_linters/markdown/vale.vim	/^function! ale_linters#markdown#vale#GetCommand(buffer) abort$/;"	f
ale_linters#matlab#mlint#Handle	plugged/ale/ale_linters/matlab/mlint.vim	/^function! ale_linters#matlab#mlint#Handle(buffer, lines) abort$/;"	f
ale_linters#mercury#mmc#GetCommand	plugged/ale/ale_linters/mercury/mmc.vim	/^function! ale_linters#mercury#mmc#GetCommand(buffer) abort$/;"	f
ale_linters#mercury#mmc#Handle	plugged/ale/ale_linters/mercury/mmc.vim	/^function! ale_linters#mercury#mmc#Handle(buffer, lines) abort$/;"	f
ale_linters#nasm#nasm#GetCommand	plugged/ale/ale_linters/nasm/nasm.vim	/^function! ale_linters#nasm#nasm#GetCommand(buffer) abort$/;"	f
ale_linters#nasm#nasm#Handle	plugged/ale/ale_linters/nasm/nasm.vim	/^function! ale_linters#nasm#nasm#Handle(buffer, lines) abort$/;"	f
ale_linters#nim#nimcheck#GetCommand	plugged/ale/ale_linters/nim/nimcheck.vim	/^function! ale_linters#nim#nimcheck#GetCommand(buffer) abort$/;"	f
ale_linters#nim#nimcheck#Handle	plugged/ale/ale_linters/nim/nimcheck.vim	/^function! ale_linters#nim#nimcheck#Handle(buffer, lines) abort$/;"	f
ale_linters#nim#nimlsp#GetCommand	plugged/ale/ale_linters/nim/nimlsp.vim	/^function! ale_linters#nim#nimlsp#GetCommand(buffer) abort$/;"	f
ale_linters#nim#nimlsp#GetProjectRoot	plugged/ale/ale_linters/nim/nimlsp.vim	/^function! ale_linters#nim#nimlsp#GetProjectRoot(buffer) abort$/;"	f
ale_linters#nix#deadnix#GetCommand	plugged/ale/ale_linters/nix/deadnix.vim	/^function! ale_linters#nix#deadnix#GetCommand(buffer) abort$/;"	f
ale_linters#nix#nix#Command	plugged/ale/ale_linters/nix/nix.vim	/^function! ale_linters#nix#nix#Command(buffer, output, meta) abort$/;"	f
ale_linters#nix#nix#Handle	plugged/ale/ale_linters/nix/nix.vim	/^function! ale_linters#nix#nix#Handle(buffer, lines) abort$/;"	f
ale_linters#nix#rnix_lsp#GetProjectRoot	plugged/ale/ale_linters/nix/rnix_lsp.vim	/^function! ale_linters#nix#rnix_lsp#GetProjectRoot(buffer) abort$/;"	f
ale_linters#nix#statix#GetCommand	plugged/ale/ale_linters/nix/statix.vim	/^function! ale_linters#nix#statix#GetCommand(buffer) abort$/;"	f
ale_linters#objc#clang#GetCommand	plugged/ale/ale_linters/objc/clang.vim	/^function! ale_linters#objc#clang#GetCommand(buffer) abort$/;"	f
ale_linters#objc#clangd#GetCommand	plugged/ale/ale_linters/objc/clangd.vim	/^function! ale_linters#objc#clangd#GetCommand(buffer) abort$/;"	f
ale_linters#objcpp#clang#GetCommand	plugged/ale/ale_linters/objcpp/clang.vim	/^function! ale_linters#objcpp#clang#GetCommand(buffer) abort$/;"	f
ale_linters#objcpp#clangd#GetCommand	plugged/ale/ale_linters/objcpp/clangd.vim	/^function! ale_linters#objcpp#clangd#GetCommand(buffer) abort$/;"	f
ale_linters#ocaml#merlin#Handle	plugged/ale/ale_linters/ocaml/merlin.vim	/^function! ale_linters#ocaml#merlin#Handle(buffer, lines) abort$/;"	f
ale_linters#ocamlinterface#merlin#Handle	plugged/ale/ale_linters/ocamlinterface/merlin.vim	/^function! ale_linters#ocamlinterface#merlin#Handle(buffer, lines) abort$/;"	f
ale_linters#openapi#ibm_validator#GetCommand	plugged/ale/ale_linters/openapi/ibm_validator.vim	/^function! ale_linters#openapi#ibm_validator#GetCommand(buffer) abort$/;"	f
ale_linters#openapi#ibm_validator#Handle	plugged/ale/ale_linters/openapi/ibm_validator.vim	/^function! ale_linters#openapi#ibm_validator#Handle(buffer, lines) abort$/;"	f
ale_linters#openscad#sca2d#GetCommand	plugged/ale/ale_linters/openscad/sca2d.vim	/^function! ale_linters#openscad#sca2d#GetCommand(buffer) abort$/;"	f
ale_linters#openscad#sca2d#GetExecutable	plugged/ale/ale_linters/openscad/sca2d.vim	/^function! ale_linters#openscad#sca2d#GetExecutable(buffer) abort$/;"	f
ale_linters#perl#perl#GetCommand	plugged/ale/ale_linters/perl/perl.vim	/^function! ale_linters#perl#perl#GetCommand(buffer) abort$/;"	f
ale_linters#perl#perl#Handle	plugged/ale/ale_linters/perl/perl.vim	/^function! ale_linters#perl#perl#Handle(buffer, lines) abort$/;"	f
ale_linters#perl#perlcritic#GetCommand	plugged/ale/ale_linters/perl/perlcritic.vim	/^function! ale_linters#perl#perlcritic#GetCommand(buffer) abort$/;"	f
ale_linters#perl#perlcritic#GetProfile	plugged/ale/ale_linters/perl/perlcritic.vim	/^function! ale_linters#perl#perlcritic#GetProfile(buffer) abort$/;"	f
ale_linters#perl#perlcritic#Handle	plugged/ale/ale_linters/perl/perlcritic.vim	/^function! ale_linters#perl#perlcritic#Handle(buffer, lines) abort$/;"	f
ale_linters#perl6#perl6#ExtractError	plugged/ale/ale_linters/perl6/perl6.vim	/^function! ale_linters#perl6#perl6#ExtractError(dict, item, type, buffer) abort$/;"	f
ale_linters#perl6#perl6#GetCommand	plugged/ale/ale_linters/perl6/perl6.vim	/^function! ale_linters#perl6#perl6#GetCommand(buffer) abort$/;"	f
ale_linters#perl6#perl6#GetExecutable	plugged/ale/ale_linters/perl6/perl6.vim	/^function! ale_linters#perl6#perl6#GetExecutable(buffer) abort$/;"	f
ale_linters#perl6#perl6#Handle	plugged/ale/ale_linters/perl6/perl6.vim	/^function! ale_linters#perl6#perl6#Handle(buffer, lines) abort$/;"	f
ale_linters#php#intelephense#GetInitializationOptions	plugged/ale/ale_linters/php/intelephense.vim	/^function! ale_linters#php#intelephense#GetInitializationOptions(buffer) abort$/;"	f
ale_linters#php#intelephense#GetProjectRoot	plugged/ale/ale_linters/php/intelephense.vim	/^function! ale_linters#php#intelephense#GetProjectRoot(buffer) abort$/;"	f
ale_linters#php#langserver#GetProjectRoot	plugged/ale/ale_linters/php/langserver.vim	/^function! ale_linters#php#langserver#GetProjectRoot(buffer) abort$/;"	f
ale_linters#php#phan#GetCommand	plugged/ale/ale_linters/php/phan.vim	/^function! ale_linters#php#phan#GetCommand(buffer) abort$/;"	f
ale_linters#php#phan#GetExecutable	plugged/ale/ale_linters/php/phan.vim	/^function! ale_linters#php#phan#GetExecutable(buffer) abort$/;"	f
ale_linters#php#phan#Handle	plugged/ale/ale_linters/php/phan.vim	/^function! ale_linters#php#phan#Handle(buffer, lines) abort$/;"	f
ale_linters#php#php#Handle	plugged/ale/ale_linters/php/php.vim	/^function! ale_linters#php#php#Handle(buffer, lines) abort$/;"	f
ale_linters#php#phpactor#GetProjectRoot	plugged/ale/ale_linters/php/phpactor.vim	/^function! ale_linters#php#phpactor#GetProjectRoot(buffer) abort$/;"	f
ale_linters#php#phpcs#GetCommand	plugged/ale/ale_linters/php/phpcs.vim	/^function! ale_linters#php#phpcs#GetCommand(buffer) abort$/;"	f
ale_linters#php#phpcs#Handle	plugged/ale/ale_linters/php/phpcs.vim	/^function! ale_linters#php#phpcs#Handle(buffer, lines) abort$/;"	f
ale_linters#php#phpmd#GetCommand	plugged/ale/ale_linters/php/phpmd.vim	/^function! ale_linters#php#phpmd#GetCommand(buffer) abort$/;"	f
ale_linters#php#phpmd#Handle	plugged/ale/ale_linters/php/phpmd.vim	/^function! ale_linters#php#phpmd#Handle(buffer, lines) abort$/;"	f
ale_linters#php#phpstan#FindConfigFile	plugged/ale/ale_linters/php/phpstan.vim	/^function! ale_linters#php#phpstan#FindConfigFile(buffer) abort$/;"	f
ale_linters#php#phpstan#GetCommand	plugged/ale/ale_linters/php/phpstan.vim	/^function! ale_linters#php#phpstan#GetCommand(buffer, version) abort$/;"	f
ale_linters#php#phpstan#GetCwd	plugged/ale/ale_linters/php/phpstan.vim	/^function! ale_linters#php#phpstan#GetCwd(buffer) abort$/;"	f
ale_linters#php#phpstan#Handle	plugged/ale/ale_linters/php/phpstan.vim	/^function! ale_linters#php#phpstan#Handle(buffer, lines) abort$/;"	f
ale_linters#php#psalm#GetCommand	plugged/ale/ale_linters/php/psalm.vim	/^function! ale_linters#php#psalm#GetCommand(buffer) abort$/;"	f
ale_linters#php#psalm#GetProjectRoot	plugged/ale/ale_linters/php/psalm.vim	/^function! ale_linters#php#psalm#GetProjectRoot(buffer) abort$/;"	f
ale_linters#php#tlint#GetCommand	plugged/ale/ale_linters/php/tlint.vim	/^function! ale_linters#php#tlint#GetCommand(buffer) abort$/;"	f
ale_linters#php#tlint#GetExecutable	plugged/ale/ale_linters/php/tlint.vim	/^function! ale_linters#php#tlint#GetExecutable(buffer) abort$/;"	f
ale_linters#php#tlint#GetProjectRoot	plugged/ale/ale_linters/php/tlint.vim	/^function! ale_linters#php#tlint#GetProjectRoot(buffer) abort$/;"	f
ale_linters#php#tlint#Handle	plugged/ale/ale_linters/php/tlint.vim	/^function! ale_linters#php#tlint#Handle(buffer, lines) abort$/;"	f
ale_linters#po#msgfmt#Handle	plugged/ale/ale_linters/po/msgfmt.vim	/^function! ale_linters#po#msgfmt#Handle(buffer, lines) abort$/;"	f
ale_linters#pony#ponyc#GetCommand	plugged/ale/ale_linters/pony/ponyc.vim	/^function! ale_linters#pony#ponyc#GetCommand(buffer) abort$/;"	f
ale_linters#powershell#powershell#GetCommand	plugged/ale/ale_linters/powershell/powershell.vim	/^function! ale_linters#powershell#powershell#GetCommand(buffer) abort$/;"	f
ale_linters#powershell#powershell#GetExecutable	plugged/ale/ale_linters/powershell/powershell.vim	/^function! ale_linters#powershell#powershell#GetExecutable(buffer) abort$/;"	f
ale_linters#powershell#powershell#Handle	plugged/ale/ale_linters/powershell/powershell.vim	/^function! ale_linters#powershell#powershell#Handle(buffer, lines) abort$/;"	f
ale_linters#powershell#psscriptanalyzer#GetCommand	plugged/ale/ale_linters/powershell/psscriptanalyzer.vim	/^function! ale_linters#powershell#psscriptanalyzer#GetCommand(buffer) abort$/;"	f
ale_linters#powershell#psscriptanalyzer#GetExecutable	plugged/ale/ale_linters/powershell/psscriptanalyzer.vim	/^function! ale_linters#powershell#psscriptanalyzer#GetExecutable(buffer) abort$/;"	f
ale_linters#powershell#psscriptanalyzer#Handle	plugged/ale/ale_linters/powershell/psscriptanalyzer.vim	/^function! ale_linters#powershell#psscriptanalyzer#Handle(buffer, lines) abort$/;"	f
ale_linters#prolog#swipl#GetCommand	plugged/ale/ale_linters/prolog/swipl.vim	/^function! ale_linters#prolog#swipl#GetCommand(buffer) abort$/;"	f
ale_linters#prolog#swipl#Handle	plugged/ale/ale_linters/prolog/swipl.vim	/^function! ale_linters#prolog#swipl#Handle(buffer, lines) abort$/;"	f
ale_linters#proto#buf_lint#GetCommand	plugged/ale/ale_linters/proto/buf_lint.vim	/^function! ale_linters#proto#buf_lint#GetCommand(buffer) abort$/;"	f
ale_linters#proto#protoc_gen_lint#GetCommand	plugged/ale/ale_linters/proto/protoc_gen_lint.vim	/^function! ale_linters#proto#protoc_gen_lint#GetCommand(buffer) abort$/;"	f
ale_linters#proto#protolint#GetCommand	plugged/ale/ale_linters/proto/protolint.vim	/^function! ale_linters#proto#protolint#GetCommand(buffer) abort$/;"	f
ale_linters#pug#puglint#GetCommand	plugged/ale/ale_linters/pug/puglint.vim	/^function! ale_linters#pug#puglint#GetCommand(buffer) abort$/;"	f
ale_linters#pug#puglint#Handle	plugged/ale/ale_linters/pug/puglint.vim	/^function! ale_linters#pug#puglint#Handle(buffer, lines) abort$/;"	f
ale_linters#puppet#languageserver#GetProjectRoot	plugged/ale/ale_linters/puppet/languageserver.vim	/^function! ale_linters#puppet#languageserver#GetProjectRoot(buffer) abort$/;"	f
ale_linters#puppet#puppet#GetCommand	plugged/ale/ale_linters/puppet/puppet.vim	/^function! ale_linters#puppet#puppet#GetCommand(buffer) abort$/;"	f
ale_linters#puppet#puppet#Handle	plugged/ale/ale_linters/puppet/puppet.vim	/^function! ale_linters#puppet#puppet#Handle(buffer, lines) abort$/;"	f
ale_linters#puppet#puppetlint#GetCommand	plugged/ale/ale_linters/puppet/puppetlint.vim	/^function! ale_linters#puppet#puppetlint#GetCommand(buffer) abort$/;"	f
ale_linters#purescript#ls#FindProjectRoot	plugged/ale/ale_linters/purescript/ls.vim	/^function! ale_linters#purescript#ls#FindProjectRoot(buffer) abort$/;"	f
ale_linters#purescript#ls#GetCommand	plugged/ale/ale_linters/purescript/ls.vim	/^function! ale_linters#purescript#ls#GetCommand(buffer) abort$/;"	f
ale_linters#purescript#ls#GetExecutable	plugged/ale/ale_linters/purescript/ls.vim	/^function! ale_linters#purescript#ls#GetExecutable(buffer) abort$/;"	f
ale_linters#pyrex#cython#GetCommand	plugged/ale/ale_linters/pyrex/cython.vim	/^function! ale_linters#pyrex#cython#GetCommand(buffer) abort$/;"	f
ale_linters#pyrex#cython#Handle	plugged/ale/ale_linters/pyrex/cython.vim	/^function! ale_linters#pyrex#cython#Handle(buffer, lines) abort$/;"	f
ale_linters#python#bandit#GetCommand	plugged/ale/ale_linters/python/bandit.vim	/^function! ale_linters#python#bandit#GetCommand(buffer) abort$/;"	f
ale_linters#python#bandit#GetExecutable	plugged/ale/ale_linters/python/bandit.vim	/^function! ale_linters#python#bandit#GetExecutable(buffer) abort$/;"	f
ale_linters#python#bandit#Handle	plugged/ale/ale_linters/python/bandit.vim	/^function! ale_linters#python#bandit#Handle(buffer, lines) abort$/;"	f
ale_linters#python#flake8#GetCommand	plugged/ale/ale_linters/python/flake8.vim	/^function! ale_linters#python#flake8#GetCommand(buffer, version) abort$/;"	f
ale_linters#python#flake8#GetCwd	plugged/ale/ale_linters/python/flake8.vim	/^function! ale_linters#python#flake8#GetCwd(buffer) abort$/;"	f
ale_linters#python#flake8#GetExecutable	plugged/ale/ale_linters/python/flake8.vim	/^function! ale_linters#python#flake8#GetExecutable(buffer) abort$/;"	f
ale_linters#python#flake8#Handle	plugged/ale/ale_linters/python/flake8.vim	/^function! ale_linters#python#flake8#Handle(buffer, lines) abort$/;"	f
ale_linters#python#flake8#RunWithVersionCheck	plugged/ale/ale_linters/python/flake8.vim	/^function! ale_linters#python#flake8#RunWithVersionCheck(buffer) abort$/;"	f
ale_linters#python#flakehell#GetCommand	plugged/ale/ale_linters/python/flakehell.vim	/^function! ale_linters#python#flakehell#GetCommand(buffer, version) abort$/;"	f
ale_linters#python#flakehell#GetCwd	plugged/ale/ale_linters/python/flakehell.vim	/^function! ale_linters#python#flakehell#GetCwd(buffer) abort$/;"	f
ale_linters#python#flakehell#GetExecutable	plugged/ale/ale_linters/python/flakehell.vim	/^function! ale_linters#python#flakehell#GetExecutable(buffer) abort$/;"	f
ale_linters#python#flakehell#Handle	plugged/ale/ale_linters/python/flakehell.vim	/^function! ale_linters#python#flakehell#Handle(buffer, lines) abort$/;"	f
ale_linters#python#flakehell#RunWithVersionCheck	plugged/ale/ale_linters/python/flakehell.vim	/^function! ale_linters#python#flakehell#RunWithVersionCheck(buffer) abort$/;"	f
ale_linters#python#jedils#GetCommand	plugged/ale/ale_linters/python/jedils.vim	/^function! ale_linters#python#jedils#GetCommand(buffer) abort$/;"	f
ale_linters#python#jedils#GetExecutable	plugged/ale/ale_linters/python/jedils.vim	/^function! ale_linters#python#jedils#GetExecutable(buffer) abort$/;"	f
ale_linters#python#mypy#GetCommand	plugged/ale/ale_linters/python/mypy.vim	/^function! ale_linters#python#mypy#GetCommand(buffer) abort$/;"	f
ale_linters#python#mypy#GetCwd	plugged/ale/ale_linters/python/mypy.vim	/^function! ale_linters#python#mypy#GetCwd(buffer) abort$/;"	f
ale_linters#python#mypy#GetExecutable	plugged/ale/ale_linters/python/mypy.vim	/^function! ale_linters#python#mypy#GetExecutable(buffer) abort$/;"	f
ale_linters#python#mypy#Handle	plugged/ale/ale_linters/python/mypy.vim	/^function! ale_linters#python#mypy#Handle(buffer, lines) abort$/;"	f
ale_linters#python#prospector#GetCommand	plugged/ale/ale_linters/python/prospector.vim	/^function! ale_linters#python#prospector#GetCommand(buffer) abort$/;"	f
ale_linters#python#prospector#GetExecutable	plugged/ale/ale_linters/python/prospector.vim	/^function! ale_linters#python#prospector#GetExecutable(buffer) abort$/;"	f
ale_linters#python#prospector#Handle	plugged/ale/ale_linters/python/prospector.vim	/^function! ale_linters#python#prospector#Handle(buffer, lines) abort$/;"	f
ale_linters#python#pycln#GetCommand	plugged/ale/ale_linters/python/pycln.vim	/^function! ale_linters#python#pycln#GetCommand(buffer, version) abort$/;"	f
ale_linters#python#pycln#GetCwd	plugged/ale/ale_linters/python/pycln.vim	/^function! ale_linters#python#pycln#GetCwd(buffer) abort$/;"	f
ale_linters#python#pycln#GetExecutable	plugged/ale/ale_linters/python/pycln.vim	/^function! ale_linters#python#pycln#GetExecutable(buffer) abort$/;"	f
ale_linters#python#pycln#Handle	plugged/ale/ale_linters/python/pycln.vim	/^function! ale_linters#python#pycln#Handle(buffer, lines) abort$/;"	f
ale_linters#python#pycodestyle#GetCommand	plugged/ale/ale_linters/python/pycodestyle.vim	/^function! ale_linters#python#pycodestyle#GetCommand(buffer) abort$/;"	f
ale_linters#python#pycodestyle#GetExecutable	plugged/ale/ale_linters/python/pycodestyle.vim	/^function! ale_linters#python#pycodestyle#GetExecutable(buffer) abort$/;"	f
ale_linters#python#pycodestyle#Handle	plugged/ale/ale_linters/python/pycodestyle.vim	/^function! ale_linters#python#pycodestyle#Handle(buffer, lines) abort$/;"	f
ale_linters#python#pydocstyle#GetCommand	plugged/ale/ale_linters/python/pydocstyle.vim	/^function! ale_linters#python#pydocstyle#GetCommand(buffer) abort$/;"	f
ale_linters#python#pydocstyle#GetExecutable	plugged/ale/ale_linters/python/pydocstyle.vim	/^function! ale_linters#python#pydocstyle#GetExecutable(buffer) abort$/;"	f
ale_linters#python#pydocstyle#Handle	plugged/ale/ale_linters/python/pydocstyle.vim	/^function! ale_linters#python#pydocstyle#Handle(buffer, lines) abort$/;"	f
ale_linters#python#pyflakes#GetCommand	plugged/ale/ale_linters/python/pyflakes.vim	/^function! ale_linters#python#pyflakes#GetCommand(buffer) abort$/;"	f
ale_linters#python#pyflakes#GetExecutable	plugged/ale/ale_linters/python/pyflakes.vim	/^function! ale_linters#python#pyflakes#GetExecutable(buffer) abort$/;"	f
ale_linters#python#pyflakes#Handle	plugged/ale/ale_linters/python/pyflakes.vim	/^function! ale_linters#python#pyflakes#Handle(buffer, lines) abort$/;"	f
ale_linters#python#pylama#GetCommand	plugged/ale/ale_linters/python/pylama.vim	/^function! ale_linters#python#pylama#GetCommand(buffer, version) abort$/;"	f
ale_linters#python#pylama#GetCwd	plugged/ale/ale_linters/python/pylama.vim	/^function! ale_linters#python#pylama#GetCwd(buffer) abort$/;"	f
ale_linters#python#pylama#GetExecutable	plugged/ale/ale_linters/python/pylama.vim	/^function! ale_linters#python#pylama#GetExecutable(buffer) abort$/;"	f
ale_linters#python#pylama#Handle	plugged/ale/ale_linters/python/pylama.vim	/^function! ale_linters#python#pylama#Handle(buffer, version, lines) abort$/;"	f
ale_linters#python#pylama#RunWithVersionCheck	plugged/ale/ale_linters/python/pylama.vim	/^function! ale_linters#python#pylama#RunWithVersionCheck(buffer) abort$/;"	f
ale_linters#python#pylint#GetCommand	plugged/ale/ale_linters/python/pylint.vim	/^function! ale_linters#python#pylint#GetCommand(buffer, version) abort$/;"	f
ale_linters#python#pylint#GetCwd	plugged/ale/ale_linters/python/pylint.vim	/^function! ale_linters#python#pylint#GetCwd(buffer) abort$/;"	f
ale_linters#python#pylint#GetExecutable	plugged/ale/ale_linters/python/pylint.vim	/^function! ale_linters#python#pylint#GetExecutable(buffer) abort$/;"	f
ale_linters#python#pylint#Handle	plugged/ale/ale_linters/python/pylint.vim	/^function! ale_linters#python#pylint#Handle(buffer, lines) abort$/;"	f
ale_linters#python#pylsp#GetCommand	plugged/ale/ale_linters/python/pylsp.vim	/^function! ale_linters#python#pylsp#GetCommand(buffer) abort$/;"	f
ale_linters#python#pylsp#GetCwd	plugged/ale/ale_linters/python/pylsp.vim	/^function! ale_linters#python#pylsp#GetCwd(buffer) abort$/;"	f
ale_linters#python#pylsp#GetExecutable	plugged/ale/ale_linters/python/pylsp.vim	/^function! ale_linters#python#pylsp#GetExecutable(buffer) abort$/;"	f
ale_linters#python#pyre#GetCommand	plugged/ale/ale_linters/python/pyre.vim	/^function! ale_linters#python#pyre#GetCommand(buffer) abort$/;"	f
ale_linters#python#pyre#GetCwd	plugged/ale/ale_linters/python/pyre.vim	/^function! ale_linters#python#pyre#GetCwd(buffer) abort$/;"	f
ale_linters#python#pyre#GetExecutable	plugged/ale/ale_linters/python/pyre.vim	/^function! ale_linters#python#pyre#GetExecutable(buffer) abort$/;"	f
ale_linters#python#pyright#GetCommand	plugged/ale/ale_linters/python/pyright.vim	/^function! ale_linters#python#pyright#GetCommand(buffer) abort$/;"	f
ale_linters#python#pyright#GetConfig	plugged/ale/ale_linters/python/pyright.vim	/^function! ale_linters#python#pyright#GetConfig(buffer) abort$/;"	f
ale_linters#python#pyright#GetCwd	plugged/ale/ale_linters/python/pyright.vim	/^function! ale_linters#python#pyright#GetCwd(buffer) abort$/;"	f
ale_linters#python#pyright#GetExecutable	plugged/ale/ale_linters/python/pyright.vim	/^function! ale_linters#python#pyright#GetExecutable(buffer) abort$/;"	f
ale_linters#python#refurb#GetCommand	plugged/ale/ale_linters/python/refurb.vim	/^function! ale_linters#python#refurb#GetCommand(buffer) abort$/;"	f
ale_linters#python#refurb#GetCwd	plugged/ale/ale_linters/python/refurb.vim	/^function! ale_linters#python#refurb#GetCwd(buffer) abort$/;"	f
ale_linters#python#refurb#GetExecutable	plugged/ale/ale_linters/python/refurb.vim	/^function! ale_linters#python#refurb#GetExecutable(buffer) abort$/;"	f
ale_linters#python#refurb#Handle	plugged/ale/ale_linters/python/refurb.vim	/^function! ale_linters#python#refurb#Handle(buffer, lines) abort$/;"	f
ale_linters#python#ruff#GetCommand	plugged/ale/ale_linters/python/ruff.vim	/^function! ale_linters#python#ruff#GetCommand(buffer, version) abort$/;"	f
ale_linters#python#ruff#GetCwd	plugged/ale/ale_linters/python/ruff.vim	/^function! ale_linters#python#ruff#GetCwd(buffer) abort$/;"	f
ale_linters#python#ruff#GetExecutable	plugged/ale/ale_linters/python/ruff.vim	/^function! ale_linters#python#ruff#GetExecutable(buffer) abort$/;"	f
ale_linters#python#ruff#Handle	plugged/ale/ale_linters/python/ruff.vim	/^function! ale_linters#python#ruff#Handle(buffer, lines) abort$/;"	f
ale_linters#python#unimport#GetCommand	plugged/ale/ale_linters/python/unimport.vim	/^function! ale_linters#python#unimport#GetCommand(buffer) abort$/;"	f
ale_linters#python#unimport#GetCwd	plugged/ale/ale_linters/python/unimport.vim	/^function! ale_linters#python#unimport#GetCwd(buffer) abort$/;"	f
ale_linters#python#unimport#GetExecutable	plugged/ale/ale_linters/python/unimport.vim	/^function! ale_linters#python#unimport#GetExecutable(buffer) abort$/;"	f
ale_linters#python#unimport#Handle	plugged/ale/ale_linters/python/unimport.vim	/^function! ale_linters#python#unimport#Handle(buffer, lines) abort$/;"	f
ale_linters#python#vulture#GetCommand	plugged/ale/ale_linters/python/vulture.vim	/^function! ale_linters#python#vulture#GetCommand(buffer) abort$/;"	f
ale_linters#python#vulture#GetCwd	plugged/ale/ale_linters/python/vulture.vim	/^function! ale_linters#python#vulture#GetCwd(buffer) abort$/;"	f
ale_linters#python#vulture#GetExecutable	plugged/ale/ale_linters/python/vulture.vim	/^function! ale_linters#python#vulture#GetExecutable(buffer) abort$/;"	f
ale_linters#python#vulture#Handle	plugged/ale/ale_linters/python/vulture.vim	/^function! ale_linters#python#vulture#Handle(buffer, lines) abort$/;"	f
ale_linters#qml#qmlfmt#Handle	plugged/ale/ale_linters/qml/qmlfmt.vim	/^function! ale_linters#qml#qmlfmt#Handle(buffer, lines) abort$/;"	f
ale_linters#qml#qmllint#Handle	plugged/ale/ale_linters/qml/qmllint.vim	/^function! ale_linters#qml#qmllint#Handle(buffer, lines) abort$/;"	f
ale_linters#r#languageserver#GetCommand	plugged/ale/ale_linters/r/languageserver.vim	/^function! ale_linters#r#languageserver#GetCommand(buffer) abort$/;"	f
ale_linters#r#languageserver#GetProjectRoot	plugged/ale/ale_linters/r/languageserver.vim	/^function! ale_linters#r#languageserver#GetProjectRoot(buffer) abort$/;"	f
ale_linters#r#lintr#GetCommand	plugged/ale/ale_linters/r/lintr.vim	/^function! ale_linters#r#lintr#GetCommand(buffer) abort$/;"	f
ale_linters#racket#raco#Handle	plugged/ale/ale_linters/racket/raco.vim	/^function! ale_linters#racket#raco#Handle(buffer, lines) abort$/;"	f
ale_linters#reason#ls#FindProjectRoot	plugged/ale/ale_linters/reason/ls.vim	/^function! ale_linters#reason#ls#FindProjectRoot(buffer) abort$/;"	f
ale_linters#reason#merlin#Handle	plugged/ale/ale_linters/reason/merlin.vim	/^function! ale_linters#reason#merlin#Handle(buffer, lines) abort$/;"	f
ale_linters#rego#opacheck#GetCommand	plugged/ale/ale_linters/rego/opacheck.vim	/^function! ale_linters#rego#opacheck#GetCommand(buffer) abort$/;"	f
ale_linters#rego#opacheck#GetExecutable	plugged/ale/ale_linters/rego/opacheck.vim	/^function! ale_linters#rego#opacheck#GetExecutable(buffer) abort$/;"	f
ale_linters#rego#opacheck#Handle	plugged/ale/ale_linters/rego/opacheck.vim	/^function! ale_linters#rego#opacheck#Handle(buffer, lines) abort$/;"	f
ale_linters#robot#rflint#GetCommand	plugged/ale/ale_linters/robot/rflint.vim	/^function! ale_linters#robot#rflint#GetCommand(buffer) abort$/;"	f
ale_linters#robot#rflint#GetExecutable	plugged/ale/ale_linters/robot/rflint.vim	/^function! ale_linters#robot#rflint#GetExecutable(buffer) abort$/;"	f
ale_linters#robot#rflint#Handle	plugged/ale/ale_linters/robot/rflint.vim	/^function! ale_linters#robot#rflint#Handle(buffer, lines) abort$/;"	f
ale_linters#rst#rstcheck#Handle	plugged/ale/ale_linters/rst/rstcheck.vim	/^function! ale_linters#rst#rstcheck#Handle(buffer, lines) abort$/;"	f
ale_linters#ruby#brakeman#GetCommand	plugged/ale/ale_linters/ruby/brakeman.vim	/^function! ale_linters#ruby#brakeman#GetCommand(buffer) abort$/;"	f
ale_linters#ruby#brakeman#Handle	plugged/ale/ale_linters/ruby/brakeman.vim	/^function! ale_linters#ruby#brakeman#Handle(buffer, lines) abort$/;"	f
ale_linters#ruby#debride#GetCommand	plugged/ale/ale_linters/ruby/debride.vim	/^function! ale_linters#ruby#debride#GetCommand(buffer) abort$/;"	f
ale_linters#ruby#debride#HandleOutput	plugged/ale/ale_linters/ruby/debride.vim	/^function! ale_linters#ruby#debride#HandleOutput(buffer, lines) abort$/;"	f
ale_linters#ruby#packwerk#GetCommand	plugged/ale/ale_linters/ruby/packwerk.vim	/^function! ale_linters#ruby#packwerk#GetCommand(buffer) abort$/;"	f
ale_linters#ruby#packwerk#Handle	plugged/ale/ale_linters/ruby/packwerk.vim	/^function! ale_linters#ruby#packwerk#Handle(buffer, lines) abort$/;"	f
ale_linters#ruby#rails_best_practices#GetCommand	plugged/ale/ale_linters/ruby/rails_best_practices.vim	/^function! ale_linters#ruby#rails_best_practices#GetCommand(buffer) abort$/;"	f
ale_linters#ruby#rails_best_practices#Handle	plugged/ale/ale_linters/ruby/rails_best_practices.vim	/^function! ale_linters#ruby#rails_best_practices#Handle(buffer, lines) abort$/;"	f
ale_linters#ruby#reek#GetCommand	plugged/ale/ale_linters/ruby/reek.vim	/^function! ale_linters#ruby#reek#GetCommand(buffer, version) abort$/;"	f
ale_linters#ruby#reek#Handle	plugged/ale/ale_linters/ruby/reek.vim	/^function! ale_linters#ruby#reek#Handle(buffer, lines) abort$/;"	f
ale_linters#ruby#rubocop#GetCommand	plugged/ale/ale_linters/ruby/rubocop.vim	/^function! ale_linters#ruby#rubocop#GetCommand(buffer) abort$/;"	f
ale_linters#ruby#rubocop#GetType	plugged/ale/ale_linters/ruby/rubocop.vim	/^function! ale_linters#ruby#rubocop#GetType(severity) abort$/;"	f
ale_linters#ruby#solargraph#GetCommand	plugged/ale/ale_linters/ruby/solargraph.vim	/^function! ale_linters#ruby#solargraph#GetCommand(buffer) abort$/;"	f
ale_linters#ruby#sorbet#GetCommand	plugged/ale/ale_linters/ruby/sorbet.vim	/^function! ale_linters#ruby#sorbet#GetCommand(buffer) abort$/;"	f
ale_linters#ruby#standardrb#GetCommand	plugged/ale/ale_linters/ruby/standardrb.vim	/^function! ale_linters#ruby#standardrb#GetCommand(buffer) abort$/;"	f
ale_linters#rust#analyzer#GetCommand	plugged/ale/ale_linters/rust/analyzer.vim	/^function! ale_linters#rust#analyzer#GetCommand(buffer) abort$/;"	f
ale_linters#rust#analyzer#GetProjectRoot	plugged/ale/ale_linters/rust/analyzer.vim	/^function! ale_linters#rust#analyzer#GetProjectRoot(buffer) abort$/;"	f
ale_linters#rust#cargo#GetCargoExecutable	plugged/ale/ale_linters/rust/cargo.vim	/^function! ale_linters#rust#cargo#GetCargoExecutable(bufnr) abort$/;"	f
ale_linters#rust#cargo#GetCommand	plugged/ale/ale_linters/rust/cargo.vim	/^function! ale_linters#rust#cargo#GetCommand(buffer, version) abort$/;"	f
ale_linters#rust#cargo#GetCwd	plugged/ale/ale_linters/rust/cargo.vim	/^function! ale_linters#rust#cargo#GetCwd(buffer) abort$/;"	f
ale_linters#rust#rls#GetCommand	plugged/ale/ale_linters/rust/rls.vim	/^function! ale_linters#rust#rls#GetCommand(buffer) abort$/;"	f
ale_linters#rust#rls#GetProjectRoot	plugged/ale/ale_linters/rust/rls.vim	/^function! ale_linters#rust#rls#GetProjectRoot(buffer) abort$/;"	f
ale_linters#rust#rustc#RustcCommand	plugged/ale/ale_linters/rust/rustc.vim	/^function! ale_linters#rust#rustc#RustcCommand(buffer) abort$/;"	f
ale_linters#salt#salt_lint#GetCommand	plugged/ale/ale_linters/salt/salt_lint.vim	/^function! ale_linters#salt#salt_lint#GetCommand(buffer) abort$/;"	f
ale_linters#salt#salt_lint#Handle	plugged/ale/ale_linters/salt/salt_lint.vim	/^function! ale_linters#salt#salt_lint#Handle(buffer, lines) abort$/;"	f
ale_linters#sass#sasslint#GetCommand	plugged/ale/ale_linters/sass/sasslint.vim	/^function! ale_linters#sass#sasslint#GetCommand(buffer) abort$/;"	f
ale_linters#sass#sasslint#GetExecutable	plugged/ale/ale_linters/sass/sasslint.vim	/^function! ale_linters#sass#sasslint#GetExecutable(buffer) abort$/;"	f
ale_linters#scala#metals#GetCommand	plugged/ale/ale_linters/scala/metals.vim	/^function! ale_linters#scala#metals#GetCommand(buffer) abort$/;"	f
ale_linters#scala#metals#GetProjectRoot	plugged/ale/ale_linters/scala/metals.vim	/^function! ale_linters#scala#metals#GetProjectRoot(buffer) abort$/;"	f
ale_linters#scala#sbtserver#GetAddress	plugged/ale/ale_linters/scala/sbtserver.vim	/^function! ale_linters#scala#sbtserver#GetAddress(buffer) abort$/;"	f
ale_linters#scala#sbtserver#GetProjectRoot	plugged/ale/ale_linters/scala/sbtserver.vim	/^function! ale_linters#scala#sbtserver#GetProjectRoot(buffer) abort$/;"	f
ale_linters#scala#scalastyle#GetCommand	plugged/ale/ale_linters/scala/scalastyle.vim	/^function! ale_linters#scala#scalastyle#GetCommand(buffer) abort$/;"	f
ale_linters#scala#scalastyle#Handle	plugged/ale/ale_linters/scala/scalastyle.vim	/^function! ale_linters#scala#scalastyle#Handle(buffer, lines) abort$/;"	f
ale_linters#scss#sasslint#GetCommand	plugged/ale/ale_linters/scss/sasslint.vim	/^function! ale_linters#scss#sasslint#GetCommand(buffer) abort$/;"	f
ale_linters#scss#sasslint#GetExecutable	plugged/ale/ale_linters/scss/sasslint.vim	/^function! ale_linters#scss#sasslint#GetExecutable(buffer) abort$/;"	f
ale_linters#scss#scsslint#Handle	plugged/ale/ale_linters/scss/scsslint.vim	/^function! ale_linters#scss#scsslint#Handle(buffer, lines) abort$/;"	f
ale_linters#scss#stylelint#GetCommand	plugged/ale/ale_linters/scss/stylelint.vim	/^function! ale_linters#scss#stylelint#GetCommand(buffer) abort$/;"	f
ale_linters#sh#bashate#GetCommand	plugged/ale/ale_linters/sh/bashate.vim	/^function! ale_linters#sh#bashate#GetCommand(buffer) abort$/;"	f
ale_linters#sh#bashate#GetExecutable	plugged/ale/ale_linters/sh/bashate.vim	/^function! ale_linters#sh#bashate#GetExecutable(buffer) abort$/;"	f
ale_linters#sh#bashate#Handle	plugged/ale/ale_linters/sh/bashate.vim	/^function! ale_linters#sh#bashate#Handle(buffer, lines) abort$/;"	f
ale_linters#sh#language_server#GetCommand	plugged/ale/ale_linters/sh/language_server.vim	/^function! ale_linters#sh#language_server#GetCommand(buffer) abort$/;"	f
ale_linters#sh#language_server#GetExecutable	plugged/ale/ale_linters/sh/language_server.vim	/^function! ale_linters#sh#language_server#GetExecutable(buffer) abort$/;"	f
ale_linters#sh#language_server#GetProjectRoot	plugged/ale/ale_linters/sh/language_server.vim	/^function! ale_linters#sh#language_server#GetProjectRoot(buffer) abort$/;"	f
ale_linters#sh#shell#GetCommand	plugged/ale/ale_linters/sh/shell.vim	/^function! ale_linters#sh#shell#GetCommand(buffer) abort$/;"	f
ale_linters#sh#shell#GetExecutable	plugged/ale/ale_linters/sh/shell.vim	/^function! ale_linters#sh#shell#GetExecutable(buffer) abort$/;"	f
ale_linters#sh#shell#Handle	plugged/ale/ale_linters/sh/shell.vim	/^function! ale_linters#sh#shell#Handle(buffer, lines) abort$/;"	f
ale_linters#slim#slimlint#GetCommand	plugged/ale/ale_linters/slim/slimlint.vim	/^function! ale_linters#slim#slimlint#GetCommand(buffer) abort$/;"	f
ale_linters#slim#slimlint#Handle	plugged/ale/ale_linters/slim/slimlint.vim	/^function! ale_linters#slim#slimlint#Handle(buffer, lines) abort$/;"	f
ale_linters#sml#smlnj_cm#GetCommand	plugged/ale/ale_linters/sml/smlnj_cm.vim	/^function! ale_linters#sml#smlnj_cm#GetCommand(buffer) abort$/;"	f
ale_linters#solidity#solc#GetCommand	plugged/ale/ale_linters/solidity/solc.vim	/^function! ale_linters#solidity#solc#GetCommand(buffer) abort$/;"	f
ale_linters#solidity#solc#Handle	plugged/ale/ale_linters/solidity/solc.vim	/^function! ale_linters#solidity#solc#Handle(buffer, lines) abort$/;"	f
ale_linters#spec#rpmlint#GetCommand	plugged/ale/ale_linters/spec/rpmlint.vim	/^function! ale_linters#spec#rpmlint#GetCommand(buffer, version) abort$/;"	f
ale_linters#spec#rpmlint#Handle	plugged/ale/ale_linters/spec/rpmlint.vim	/^function! ale_linters#spec#rpmlint#Handle(buffer, lines) abort$/;"	f
ale_linters#sql#sqlfluff#Command	plugged/ale/ale_linters/sql/sqlfluff.vim	/^function! ale_linters#sql#sqlfluff#Command(buffer) abort$/;"	f
ale_linters#sql#sqlfluff#Executable	plugged/ale/ale_linters/sql/sqlfluff.vim	/^function! ale_linters#sql#sqlfluff#Executable(buffer) abort$/;"	f
ale_linters#sql#sqlfluff#Handle	plugged/ale/ale_linters/sql/sqlfluff.vim	/^function! ale_linters#sql#sqlfluff#Handle(buffer, lines) abort$/;"	f
ale_linters#sql#sqlint#Handle	plugged/ale/ale_linters/sql/sqlint.vim	/^function! ale_linters#sql#sqlint#Handle(buffer, lines) abort$/;"	f
ale_linters#sql#sqllint#Handle	plugged/ale/ale_linters/sql/sqllint.vim	/^function! ale_linters#sql#sqllint#Handle(buffer, lines) abort$/;"	f
ale_linters#stylus#stylelint#GetCommand	plugged/ale/ale_linters/stylus/stylelint.vim	/^function! ale_linters#stylus#stylelint#GetCommand(buffer) abort$/;"	f
ale_linters#sugarss#stylelint#GetCommand	plugged/ale/ale_linters/sugarss/stylelint.vim	/^function! ale_linters#sugarss#stylelint#GetCommand(buffer) abort$/;"	f
ale_linters#svelte#svelteserver#GetProjectRoot	plugged/ale/ale_linters/svelte/svelteserver.vim	/^function! ale_linters#svelte#svelteserver#GetProjectRoot(buffer) abort$/;"	f
ale_linters#swift#appleswiftformat#GetLinterCommand	plugged/ale/ale_linters/swift/appleswiftformat.vim	/^function! ale_linters#swift#appleswiftformat#GetLinterCommand(buffer) abort$/;"	f
ale_linters#swift#appleswiftformat#Handle	plugged/ale/ale_linters/swift/appleswiftformat.vim	/^function! ale_linters#swift#appleswiftformat#Handle(buffer, lines) abort$/;"	f
ale_linters#swift#swiftlint#GetCommand	plugged/ale/ale_linters/swift/swiftlint.vim	/^function! ale_linters#swift#swiftlint#GetCommand(buffer) abort$/;"	f
ale_linters#swift#swiftlint#GetExecutable	plugged/ale/ale_linters/swift/swiftlint.vim	/^function! ale_linters#swift#swiftlint#GetExecutable(buffer) abort$/;"	f
ale_linters#swift#swiftlint#Handle	plugged/ale/ale_linters/swift/swiftlint.vim	/^function! ale_linters#swift#swiftlint#Handle(buffer, lines) abort$/;"	f
ale_linters#systemd#systemd_analyze#Handle	plugged/ale/ale_linters/systemd/systemd_analyze.vim	/^function! ale_linters#systemd#systemd_analyze#Handle(buffer, lines) abort$/;"	f
ale_linters#tcl#nagelfar#GetCommand	plugged/ale/ale_linters/tcl/nagelfar.vim	/^function! ale_linters#tcl#nagelfar#GetCommand(buffer) abort$/;"	f
ale_linters#tcl#nagelfar#Handle	plugged/ale/ale_linters/tcl/nagelfar.vim	/^function! ale_linters#tcl#nagelfar#Handle(buffer, lines) abort$/;"	f
ale_linters#terraform#checkov#GetCommand	plugged/ale/ale_linters/terraform/checkov.vim	/^function! ale_linters#terraform#checkov#GetCommand(buffer) abort$/;"	f
ale_linters#terraform#checkov#GetExecutable	plugged/ale/ale_linters/terraform/checkov.vim	/^function! ale_linters#terraform#checkov#GetExecutable(buffer) abort$/;"	f
ale_linters#terraform#checkov#Handle	plugged/ale/ale_linters/terraform/checkov.vim	/^function! ale_linters#terraform#checkov#Handle(buffer, lines) abort$/;"	f
ale_linters#terraform#terraform#GetCommand	plugged/ale/ale_linters/terraform/terraform.vim	/^function! ale_linters#terraform#terraform#GetCommand(buffer) abort$/;"	f
ale_linters#terraform#terraform#GetDetail	plugged/ale/ale_linters/terraform/terraform.vim	/^function! ale_linters#terraform#terraform#GetDetail(error) abort$/;"	f
ale_linters#terraform#terraform#GetExecutable	plugged/ale/ale_linters/terraform/terraform.vim	/^function! ale_linters#terraform#terraform#GetExecutable(buffer) abort$/;"	f
ale_linters#terraform#terraform#GetType	plugged/ale/ale_linters/terraform/terraform.vim	/^function! ale_linters#terraform#terraform#GetType(severity) abort$/;"	f
ale_linters#terraform#terraform#Handle	plugged/ale/ale_linters/terraform/terraform.vim	/^function! ale_linters#terraform#terraform#Handle(buffer, lines) abort$/;"	f
ale_linters#terraform#terraform_ls#GetCommand	plugged/ale/ale_linters/terraform/terraform_ls.vim	/^function! ale_linters#terraform#terraform_ls#GetCommand(buffer) abort$/;"	f
ale_linters#terraform#terraform_ls#GetProjectRoot	plugged/ale/ale_linters/terraform/terraform_ls.vim	/^function! ale_linters#terraform#terraform_ls#GetProjectRoot(buffer) abort$/;"	f
ale_linters#terraform#terraform_ls#GetTerraformExecutable	plugged/ale/ale_linters/terraform/terraform_ls.vim	/^function! ale_linters#terraform#terraform_ls#GetTerraformExecutable(buffer) abort$/;"	f
ale_linters#terraform#terraform_lsp#GetCommand	plugged/ale/ale_linters/terraform/terraform_lsp.vim	/^function! ale_linters#terraform#terraform_lsp#GetCommand(buffer) abort$/;"	f
ale_linters#terraform#terraform_lsp#GetProjectRoot	plugged/ale/ale_linters/terraform/terraform_lsp.vim	/^function! ale_linters#terraform#terraform_lsp#GetProjectRoot(buffer) abort$/;"	f
ale_linters#terraform#tflint#GetCommand	plugged/ale/ale_linters/terraform/tflint.vim	/^function! ale_linters#terraform#tflint#GetCommand(buffer) abort$/;"	f
ale_linters#terraform#tflint#Handle	plugged/ale/ale_linters/terraform/tflint.vim	/^function! ale_linters#terraform#tflint#Handle(buffer, lines) abort$/;"	f
ale_linters#terraform#tfsec#FindConfig	plugged/ale/ale_linters/terraform/tfsec.vim	/^function! ale_linters#terraform#tfsec#FindConfig(buffer) abort$/;"	f
ale_linters#terraform#tfsec#GetCommand	plugged/ale/ale_linters/terraform/tfsec.vim	/^function! ale_linters#terraform#tfsec#GetCommand(buffer) abort$/;"	f
ale_linters#terraform#tfsec#Handle	plugged/ale/ale_linters/terraform/tfsec.vim	/^function! ale_linters#terraform#tfsec#Handle(buffer, lines) abort$/;"	f
ale_linters#tex#chktex#GetCommand	plugged/ale/ale_linters/tex/chktex.vim	/^function! ale_linters#tex#chktex#GetCommand(buffer) abort$/;"	f
ale_linters#tex#chktex#Handle	plugged/ale/ale_linters/tex/chktex.vim	/^function! ale_linters#tex#chktex#Handle(buffer, lines) abort$/;"	f
ale_linters#tex#lacheck#Handle	plugged/ale/ale_linters/tex/lacheck.vim	/^function! ale_linters#tex#lacheck#Handle(buffer, lines) abort$/;"	f
ale_linters#tex#texlab#GetCommand	plugged/ale/ale_linters/tex/texlab.vim	/^function! ale_linters#tex#texlab#GetCommand(buffer) abort$/;"	f
ale_linters#tex#texlab#GetProjectRoot	plugged/ale/ale_linters/tex/texlab.vim	/^function! ale_linters#tex#texlab#GetProjectRoot(buffer) abort$/;"	f
ale_linters#thrift#thrift#GetCommand	plugged/ale/ale_linters/thrift/thrift.vim	/^function! ale_linters#thrift#thrift#GetCommand(buffer) abort$/;"	f
ale_linters#thrift#thrift#Handle	plugged/ale/ale_linters/thrift/thrift.vim	/^function! ale_linters#thrift#thrift#Handle(buffer, lines) abort$/;"	f
ale_linters#thrift#thriftcheck#GetCommand	plugged/ale/ale_linters/thrift/thriftcheck.vim	/^function! ale_linters#thrift#thriftcheck#GetCommand(buffer) abort$/;"	f
ale_linters#thrift#thriftcheck#Handle	plugged/ale/ale_linters/thrift/thriftcheck.vim	/^function! ale_linters#thrift#thriftcheck#Handle(buffer, lines) abort$/;"	f
ale_linters#typescript#standard#GetCommand	plugged/ale/ale_linters/typescript/standard.vim	/^function! ale_linters#typescript#standard#GetCommand(buffer) abort$/;"	f
ale_linters#typescript#standard#GetExecutable	plugged/ale/ale_linters/typescript/standard.vim	/^function! ale_linters#typescript#standard#GetExecutable(buffer) abort$/;"	f
ale_linters#typescript#tslint#GetCommand	plugged/ale/ale_linters/typescript/tslint.vim	/^function! ale_linters#typescript#tslint#GetCommand(buffer) abort$/;"	f
ale_linters#typescript#tslint#Handle	plugged/ale/ale_linters/typescript/tslint.vim	/^function! ale_linters#typescript#tslint#Handle(buffer, lines) abort$/;"	f
ale_linters#typescript#typecheck#Handle	plugged/ale/ale_linters/typescript/typecheck.vim	/^function! ale_linters#typescript#typecheck#Handle(buffer, lines) abort$/;"	f
ale_linters#v#v#Handler	plugged/ale/ale_linters/v/v.vim	/^function! ale_linters#v#v#Handler(buffer, lines) abort$/;"	f
ale_linters#vala#vala_lint#GetCommand	plugged/ale/ale_linters/vala/vala_lint.vim	/^function! ale_linters#vala#vala_lint#GetCommand(buffer) abort$/;"	f
ale_linters#vala#vala_lint#GetExecutable	plugged/ale/ale_linters/vala/vala_lint.vim	/^function! ale_linters#vala#vala_lint#GetExecutable(buffer) abort$/;"	f
ale_linters#vala#vala_lint#Handle	plugged/ale/ale_linters/vala/vala_lint.vim	/^function! ale_linters#vala#vala_lint#Handle(buffer, lines) abort$/;"	f
ale_linters#verilog#iverilog#GetCommand	plugged/ale/ale_linters/verilog/iverilog.vim	/^function! ale_linters#verilog#iverilog#GetCommand(buffer) abort$/;"	f
ale_linters#verilog#iverilog#Handle	plugged/ale/ale_linters/verilog/iverilog.vim	/^function! ale_linters#verilog#iverilog#Handle(buffer, lines) abort$/;"	f
ale_linters#verilog#verilator#GetCommand	plugged/ale/ale_linters/verilog/verilator.vim	/^function! ale_linters#verilog#verilator#GetCommand(buffer) abort$/;"	f
ale_linters#verilog#verilator#Handle	plugged/ale/ale_linters/verilog/verilator.vim	/^function! ale_linters#verilog#verilator#Handle(buffer, lines) abort$/;"	f
ale_linters#verilog#vlog#GetCommand	plugged/ale/ale_linters/verilog/vlog.vim	/^function! ale_linters#verilog#vlog#GetCommand(buffer) abort$/;"	f
ale_linters#verilog#vlog#Handle	plugged/ale/ale_linters/verilog/vlog.vim	/^function! ale_linters#verilog#vlog#Handle(buffer, lines) abort$/;"	f
ale_linters#verilog#xvlog#GetCommand	plugged/ale/ale_linters/verilog/xvlog.vim	/^function! ale_linters#verilog#xvlog#GetCommand(buffer) abort$/;"	f
ale_linters#verilog#xvlog#Handle	plugged/ale/ale_linters/verilog/xvlog.vim	/^function! ale_linters#verilog#xvlog#Handle(buffer, lines) abort$/;"	f
ale_linters#verilog#yosys#GetCommand	plugged/ale/ale_linters/verilog/yosys.vim	/^function! ale_linters#verilog#yosys#GetCommand(buffer) abort$/;"	f
ale_linters#verilog#yosys#Handle	plugged/ale/ale_linters/verilog/yosys.vim	/^function! ale_linters#verilog#yosys#Handle(buffer, lines) abort$/;"	f
ale_linters#vhdl#ghdl#GetCommand	plugged/ale/ale_linters/vhdl/ghdl.vim	/^function! ale_linters#vhdl#ghdl#GetCommand(buffer) abort$/;"	f
ale_linters#vhdl#ghdl#Handle	plugged/ale/ale_linters/vhdl/ghdl.vim	/^function! ale_linters#vhdl#ghdl#Handle(buffer, lines) abort$/;"	f
ale_linters#vhdl#vcom#GetCommand	plugged/ale/ale_linters/vhdl/vcom.vim	/^function! ale_linters#vhdl#vcom#GetCommand(buffer) abort$/;"	f
ale_linters#vhdl#vcom#Handle	plugged/ale/ale_linters/vhdl/vcom.vim	/^function! ale_linters#vhdl#vcom#Handle(buffer, lines) abort$/;"	f
ale_linters#vhdl#xvhdl#GetCommand	plugged/ale/ale_linters/vhdl/xvhdl.vim	/^function! ale_linters#vhdl#xvhdl#GetCommand(buffer) abort$/;"	f
ale_linters#vhdl#xvhdl#Handle	plugged/ale/ale_linters/vhdl/xvhdl.vim	/^function! ale_linters#vhdl#xvhdl#Handle(buffer, lines) abort$/;"	f
ale_linters#vim#ale_custom_linting_rules#GetCommand	plugged/ale/ale_linters/vim/ale_custom_linting_rules.vim	/^function! ale_linters#vim#ale_custom_linting_rules#GetCommand(buffer) abort$/;"	f
ale_linters#vim#ale_custom_linting_rules#GetCwd	plugged/ale/ale_linters/vim/ale_custom_linting_rules.vim	/^function! ale_linters#vim#ale_custom_linting_rules#GetCwd(buffer) abort$/;"	f
ale_linters#vim#ale_custom_linting_rules#GetExecutable	plugged/ale/ale_linters/vim/ale_custom_linting_rules.vim	/^function! ale_linters#vim#ale_custom_linting_rules#GetExecutable(buffer) abort$/;"	f
ale_linters#vim#ale_custom_linting_rules#Handle	plugged/ale/ale_linters/vim/ale_custom_linting_rules.vim	/^function! ale_linters#vim#ale_custom_linting_rules#Handle(buffer, lines) abort$/;"	f
ale_linters#vim#vimls#GetProjectRoot	plugged/ale/ale_linters/vim/vimls.vim	/^function! ale_linters#vim#vimls#GetProjectRoot(buffer) abort$/;"	f
ale_linters#vim#vint#GetCommand	plugged/ale/ale_linters/vim/vint.vim	/^function! ale_linters#vim#vint#GetCommand(buffer, version) abort$/;"	f
ale_linters#vim#vint#Handle	plugged/ale/ale_linters/vim/vint.vim	/^function! ale_linters#vim#vint#Handle(buffer, lines) abort$/;"	f
ale_linters#vue#vls#GetProjectRoot	plugged/ale/ale_linters/vue/vls.vim	/^function! ale_linters#vue#vls#GetProjectRoot(buffer) abort$/;"	f
ale_linters#vue#volar#GetInitializationOptions	plugged/ale/ale_linters/vue/volar.vim	/^function! ale_linters#vue#volar#GetInitializationOptions(buffer) abort$/;"	f
ale_linters#vue#volar#GetProjectRoot	plugged/ale/ale_linters/vue/volar.vim	/^function! ale_linters#vue#volar#GetProjectRoot(buffer) abort$/;"	f
ale_linters#xml#xmllint#GetCommand	plugged/ale/ale_linters/xml/xmllint.vim	/^function! ale_linters#xml#xmllint#GetCommand(buffer) abort$/;"	f
ale_linters#xml#xmllint#Handle	plugged/ale/ale_linters/xml/xmllint.vim	/^function! ale_linters#xml#xmllint#Handle(buffer, lines) abort$/;"	f
ale_linters#yaml#actionlint#GetCommand	plugged/ale/ale_linters/yaml/actionlint.vim	/^function! ale_linters#yaml#actionlint#GetCommand(buffer) abort$/;"	f
ale_linters#yaml#actionlint#Handle	plugged/ale/ale_linters/yaml/actionlint.vim	/^function! ale_linters#yaml#actionlint#Handle(buffer, lines) abort$/;"	f
ale_linters#yaml#circleci#Handle	plugged/ale/ale_linters/yaml/circleci.vim	/^function! ale_linters#yaml#circleci#Handle(buffer, lines) abort$/;"	f
ale_linters#yaml#gitlablint#GetCommand	plugged/ale/ale_linters/yaml/gitlablint.vim	/^function! ale_linters#yaml#gitlablint#GetCommand(buffer) abort$/;"	f
ale_linters#yaml#gitlablint#Handle	plugged/ale/ale_linters/yaml/gitlablint.vim	/^function! ale_linters#yaml#gitlablint#Handle(buffer, lines) abort$/;"	f
ale_linters#yaml#ls#FindProjectRoot	plugged/ale/ale_linters/yaml/ls.vim	/^function! ale_linters#yaml#ls#FindProjectRoot(buffer) abort$/;"	f
ale_linters#yaml#ls#GetCommand	plugged/ale/ale_linters/yaml/ls.vim	/^function! ale_linters#yaml#ls#GetCommand(buffer) abort$/;"	f
ale_linters#yaml#ls#GetExecutable	plugged/ale/ale_linters/yaml/ls.vim	/^function! ale_linters#yaml#ls#GetExecutable(buffer) abort$/;"	f
ale_linters#yaml#swaglint#Handle	plugged/ale/ale_linters/yaml/swaglint.vim	/^function! ale_linters#yaml#swaglint#Handle(buffer, lines) abort$/;"	f
ale_linters#yang#yang_lsp#GetProjectRoot	plugged/ale/ale_linters/yang/yang_lsp.vim	/^function! ale_linters#yang#yang_lsp#GetProjectRoot(buffer) abort$/;"	f
ale_linters#zeek#zeek#HandleErrors	plugged/ale/ale_linters/zeek/zeek.vim	/^function! ale_linters#zeek#zeek#HandleErrors(buffer, lines) abort$/;"	f
ale_linters#zig#zls#GetProjectRoot	plugged/ale/ale_linters/zig/zls.vim	/^function! ale_linters#zig#zls#GetProjectRoot(buffer) abort$/;"	f
ale_module	plugged/ale/test/python/test_deoplete_source.py	/^ale_module = imp.load_source($/;"	v
all 	plugged/smoothcursor.nvim/lua/smoothcursor/callback.lua	/^    all = function(self, value)$/;"	f
apply_colors	plugged/toggleterm.nvim/lua/toggleterm.lua	/^local function apply_colors()$/;"	f
apply_highlight_fix	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:apply_highlight_fix()$/;"	f
apply_user_input_next	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:apply_user_input_next(mode)$/;"	f
args) M.send_lines_to_terminal	plugged/toggleterm.nvim/lua/toggleterm.lua	/^    function(args) M.send_lines_to_terminal("single_line", true, args) end,$/;"	f
args) M.send_lines_to_terminal	plugged/toggleterm.nvim/lua/toggleterm.lua	/^    function(args) M.send_lines_to_terminal("visual_lines", true, args) end,$/;"	f
args) M.send_lines_to_terminal	plugged/toggleterm.nvim/lua/toggleterm.lua	/^    function(args) M.send_lines_to_terminal("visual_selection", true, args) end,$/;"	f
asyncomplete#sources#ale#completor	plugged/ale/autoload/asyncomplete/sources/ale.vim	/^function! asyncomplete#sources#ale#completor(options, context) abort$/;"	f
asyncomplete#sources#ale#get_source_options	plugged/ale/autoload/asyncomplete/sources/ale.vim	/^function! asyncomplete#sources#ale#get_source_options(...) abort$/;"	f
asyncomplete#sources#ale#get_triggers	plugged/ale/autoload/asyncomplete/sources/ale.vim	/^function! asyncomplete#sources#ale#get_triggers() abort$/;"	f
attach_mappings 	plugged/goto-preview/lua/goto-preview/lib.lua	/^        attach_mappings = function(prompt_bufnr)$/;"	f
b:current_syntax	plugged/ale/syntax/ale-fix-suggest.vim	/^let b:current_syntax = 'ale-fix-suggest'$/;"	v
b:current_syntax	plugged/ale/syntax/ale-info.vim	/^let b:current_syntax = 'ale-info'$/;"	v
b:current_syntax	plugged/ale/syntax/ale-preview-selection.vim	/^let b:current_syntax = 'ale-preview-selection'$/;"	v
b:current_syntax	plugged/tagbar/syntax/tagbar.vim	/^let b:current_syntax = 'tagbar'$/;"	v
background_worker_event	plugged/minimap.vim/autoload/minimap/vim.vim	/^function! s:background_worker_event(job_id, data, event) dict abort$/;"	f
balancer	plugged/nvim-window-picker/lua/window-picker/utf-8.lua	/^	local function balancer(str)$/;"	f
beep	plugged/vim-surround/plugin/surround.vim	/^function! s:beep()$/;"	f
before	plugged/vim-multiple-cursors/spec/benchmark_spec.rb	/^def before(string)$/;"	f
before	plugged/vim-multiple-cursors/spec/multiple_cursors_spec.rb	/^def before(string)$/;"	f
binsearch	plugged/nvim-window-picker/lua/window-picker/utf-8.lua	/^local function binsearch(sortedTable, item, comp)$/;"	f
blank_mod:disable	plugged/hlchunk.nvim/lua/hlchunk/mods/blank.lua	/^function blank_mod:disable()$/;"	f
blank_mod:enable_mod_autocmd	plugged/hlchunk.nvim/lua/hlchunk/mods/blank.lua	/^function blank_mod:enable_mod_autocmd()$/;"	f
blank_mod:render	plugged/hlchunk.nvim/lua/hlchunk/mods/blank.lua	/^function blank_mod:render()$/;"	f
blank_mod:render_line	plugged/hlchunk.nvim/lua/hlchunk/mods/blank.lua	/^function blank_mod:render_line(index, indent)$/;"	f
buffer_enter_handler	plugged/minimap.vim/autoload/minimap/vim.vim	/^function! s:buffer_enter_handler() abort$/;"	f
buffer_set_all	plugged/smoothcursor.nvim/lua/smoothcursor/callback.lua	/^local function buffer_set_all(value)$/;"	f
buffer_to_map	plugged/minimap.vim/autoload/minimap/vim.vim	/^function! s:buffer_to_map(lnnum, buftotal, mmtotal) abort$/;"	f
cS	plugged/vim-surround/plugin/surround.vim	/^  nmap cS  <Plug>CSurround$/;"	m
call	plugged/ale/test/python/test_deoplete_source.py	/^    def call(self, function, *args):$/;"	m	class:VimMock
callback	plugged/vim-pydocstring/autoload/pydocstring.vim	/^function! s:callback(msg, indent, start_lineno) abort$/;"	f
callback 	plugged/flare.nvim/lua/flare/init.lua	/^    callback = function(args)$/;"	f
callback 	plugged/hlchunk.nvim/lua/hlchunk/base_mod.lua	/^        callback = function()$/;"	f
callback 	plugged/hlchunk.nvim/lua/hlchunk/mods/blank.lua	/^        callback = function()$/;"	f
callback 	plugged/hlchunk.nvim/lua/hlchunk/mods/chunk.lua	/^        callback = function()$/;"	f
callback 	plugged/hlchunk.nvim/lua/hlchunk/mods/context.lua	/^        callback = function()$/;"	f
callback 	plugged/hlchunk.nvim/lua/hlchunk/mods/indent.lua	/^        callback = function()$/;"	f
callback 	plugged/hlchunk.nvim/lua/hlchunk/mods/line_num.lua	/^        callback = function()$/;"	f
callback 	plugged/nvim-cursorline/lua/nvim-cursorline.lua	/^      callback = function()$/;"	f
callback 	plugged/smoothcursor.nvim/lua/smoothcursor/utils.lua	/^    callback = function()$/;"	f
callback 	plugged/toggleterm.nvim/lua/toggleterm.lua	/^    callback = function()$/;"	f
callback 	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^      callback = function() on_vim_resized(term.id) end,$/;"	f
callback 	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^    callback = function() delete(term.id) end,$/;"	f
cancel_tests	plugged/ale/run-tests	/^cancel_tests() {$/;"	f
capture	plugged/nvim-window-picker/lua/window-picker/utf-8.lua	/^	local function capture(id)$/;"	f
captureStart	plugged/nvim-window-picker/lua/window-picker/utf-8.lua	/^	local function captureStart(id)$/;"	f
captureStop	plugged/nvim-window-picker/lua/window-picker/utf-8.lua	/^	local function captureStop(id)$/;"	f
changesurround	plugged/vim-surround/plugin/surround.vim	/^function! s:changesurround(...) " {{{1$/;"	f
check_errors	plugged/ale/test/script/custom-linting-rules	/^check_errors() {$/;"	f
check_lines	plugged/ale/test/script/block-padding-checker	/^def check_lines(line_iter):$/;"	f
chunk_mod:enable	plugged/hlchunk.nvim/lua/hlchunk/mods/chunk.lua	/^function chunk_mod:enable()$/;"	f
chunk_mod:enable_mod_autocmd	plugged/hlchunk.nvim/lua/hlchunk/mods/chunk.lua	/^function chunk_mod:enable_mod_autocmd()$/;"	f
chunk_mod:extra	plugged/hlchunk.nvim/lua/hlchunk/mods/chunk.lua	/^function chunk_mod:extra()$/;"	f
chunk_mod:render	plugged/hlchunk.nvim/lua/hlchunk/mods/chunk.lua	/^function chunk_mod:render(opts)$/;"	f
classMatchGenerator	plugged/nvim-window-picker/lua/window-picker/utf-8.lua	/^local function classMatchGenerator(class, plain)$/;"	f
clearOldFolds	plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:clearOldFolds() abort dict$/;"	f
clear_highlights	plugged/minimap.vim/autoload/minimap/vim.vim	/^function! s:clear_highlights() abort$/;"	f
clear_id_list_colors	plugged/minimap.vim/autoload/minimap/vim.vim	/^function! s:clear_id_list_colors(mmwinid, id_list) abort$/;"	f
closeFold	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:closeFold() abort dict$/;"	f
closeFold	plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:closeFold() abort dict$/;"	f
closeKindFold	plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:closeKindFold(kind) abort dict$/;"	f
close_auto	plugged/minimap.vim/autoload/minimap/vim.vim	/^function! s:close_auto() abort$/;"	f
close_last_window	plugged/toggleterm.nvim/lua/toggleterm.lua	/^local function close_last_window(term)$/;"	f
close_split	plugged/toggleterm.nvim/lua/toggleterm/ui.lua	/^local function close_split(term)$/;"	f
close_tab	plugged/toggleterm.nvim/lua/toggleterm/ui.lua	/^local function close_tab(term)$/;"	f
close_window	plugged/minimap.vim/autoload/minimap/vim.vim	/^function! s:close_window() abort$/;"	f
closed_on	plugged/minimap.vim/autoload/minimap/vim.vim	/^function! s:closed_on() abort$/;"	f
closematch	plugged/vim-surround/plugin/surround.vim	/^function! s:closematch(str) " {{{1$/;"	f
cmd 	plugged/toggleterm.nvim/lua/toggleterm/commandline.lua	/^  cmd = function(typed_cmd)$/;"	f
code	plugged/ale/run-tests.bat	/^set code=%ERRORLEVEL%$/;"	v
color	plugged/ale/test/script/run-vader-tests	/^function color-vader-output() {$/;"	f
command	plugged/ale/test/python/test_deoplete_source.py	/^    def command(self, command):$/;"	m	class:VimMock
command("ToggleTermToggleAll", function(opts) M.toggle_all(opts.bang) end, { bang 	plugged/toggleterm.nvim/lua/toggleterm.lua	/^  command("ToggleTermToggleAll", function(opts) M.toggle_all(opts.bang) end, { bang = true })$/;"	f
compare_by_kind	plugged/tagbar/autoload/tagbar/sorting.vim	/^function! s:compare_by_kind(tag1, tag2) abort$/;"	f
compare_by_line	plugged/tagbar/autoload/tagbar/sorting.vim	/^function! s:compare_by_line(tag1, tag2) abort$/;"	f
compare_pos	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:compare_pos(l, r)$/;"	f
complete	plugged/toggleterm.nvim/lua/toggleterm/commandline.lua	/^local function complete(options)$/;"	f
config 	lua/plugins/example.lua	/^      config = function()$/;"	f
context_mod:enable_mod_autocmd	plugged/hlchunk.nvim/lua/hlchunk/mods/context.lua	/^function context_mod:enable_mod_autocmd()$/;"	f
context_mod:render	plugged/hlchunk.nvim/lua/hlchunk/mods/context.lua	/^function context_mod:render()$/;"	f
convert_attributes	plugged/toggleterm.nvim/lua/toggleterm/colors.lua	/^local function convert_attributes(result, key, value)$/;"	f
convert_options	plugged/toggleterm.nvim/lua/toggleterm/colors.lua	/^local function convert_options(opts)$/;"	f
createKinddict	plugged/tagbar/autoload/tagbar/prototypes/typeinfo.vim	/^function! s:createKinddict() abort dict$/;"	f
create_cmd	plugged/vim-pydocstring/autoload/pydocstring.vim	/^function! s:create_cmd(style, omissions) abort$/;"	f
create_pseudotag	plugged/tagbar/autoload/tagbar.vim	/^function! s:create_pseudotag(name, parent, kind, typeinfo, fileinfo) abort$/;"	f
create_term_buf_if_needed	plugged/toggleterm.nvim/lua/toggleterm/ui.lua	/^local function create_term_buf_if_needed(term)$/;"	f
cs	plugged/vim-surround/plugin/surround.vim	/^  nmap cs  <Plug>Csurround$/;"	m
cursor_move_handler	plugged/minimap.vim/autoload/minimap/vim.vim	/^function! s:cursor_move_handler() abort$/;"	f
cursorword	plugged/vim-cursorword/plugin/cursorword.vim	/^augroup cursorword$/;"	a
cursorword#cursormoved	plugged/vim-cursorword/autoload/cursorword.vim	/^  function! cursorword#cursormoved() abort$/;"	f
cursorword#highlight	plugged/vim-cursorword/autoload/cursorword.vim	/^function! cursorword#highlight() abort$/;"	f
cursorword#matchadd	plugged/vim-cursorword/autoload/cursorword.vim	/^function! cursorword#matchadd(...) abort$/;"	f
cursorword#timer_callback	plugged/vim-cursorword/autoload/cursorword.vim	/^  function! cursorword#timer_callback(...) abort$/;"	f
debug 	plugged/goto-preview/lua/goto-preview/lib.lua	/^  debug = function(...)$/;"	f
default_compare	plugged/toggleterm.nvim/lua/toggleterm/ui.lua	/^local function default_compare(buf)$/;"	f
define_signs	plugged/smoothcursor.nvim/lua/smoothcursor/init.lua	/^local function define_signs(args)$/;"	f
delete	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^local function delete(num)$/;"	f
describe("cmd	plugged/toggleterm.nvim/tests/command-complete_spec.lua	/^  describe("cmd=", function()$/;"	f
describe("dir	plugged/toggleterm.nvim/tests/command-complete_spec.lua	/^  describe("dir=", function()$/;"	f
describe("directions	plugged/toggleterm.nvim/tests/command-complete_spec.lua	/^  describe("directions=", function()$/;"	f
detect_bad_input	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:detect_bad_input()$/;"	f
detect_filetype	plugged/smoothcursor.nvim/lua/smoothcursor/callback.lua	/^local function detect_filetype()$/;"	f
dir 	plugged/toggleterm.nvim/lua/toggleterm/commandline.lua	/^  dir = function(typed_path)$/;"	f
direction 	plugged/toggleterm.nvim/lua/toggleterm/commandline.lua	/^  direction = function(typed_direction)$/;"	f
disable_smoothcursor	plugged/smoothcursor.nvim/lua/smoothcursor/callback.lua	/^local function disable_smoothcursor()$/;"	f
display_error	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:display_error()$/;"	f
do_delayed_update	plugged/tagbar/autoload/tagbar.vim	/^function! s:do_delayed_update() abort$/;"	f
dosurround	plugged/vim-surround/plugin/surround.vim	/^function! s:dosurround(...) " {{{1$/;"	f
download_image	plugged/ale/run-tests	/^download_image() {$/;"	f
ds	plugged/vim-surround/plugin/surround.vim	/^  nmap ds  <Plug>Dsurround$/;"	m
dump	plugged/smoothcursor.nvim/lua/smoothcursor/debug.lua	/^local function dump(o, level)$/;"	f
elseif term and type(size) 	plugged/toggleterm.nvim/lua/toggleterm/ui.lua	/^  elseif term and type(size) == "function" then$/;"	f
elseif type(repl) 	plugged/nvim-window-picker/lua/window-picker/utf-8.lua	/^	elseif type(repl) == 'function' then$/;"	f
enable_smoothcursor	plugged/smoothcursor.nvim/lua/smoothcursor/callback.lua	/^local function enable_smoothcursor()$/;"	f
end_latency_measure	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:end_latency_measure()$/;"	f
entry) return vim.fn.isdirectory	plugged/toggleterm.nvim/lua/toggleterm/commandline.lua	/^      function(entry) return vim.fn.isdirectory(safe_path .. "\/" .. entry) end$/;"	f
execute	plugged/vim-pydocstring/autoload/pydocstring.vim	/^function! s:execute(cmd, lines, indent, start_lineno, cb, ex_cb) abort$/;"	f
exit	plugged/minimap.vim/bin/minimap_generator.bat	/^:exit$/;"	l
exit	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:exit()$/;"	f
exit_callback	plugged/vim-pydocstring/autoload/pydocstring.vim	/^function! s:exit_callback(msg) abort$/;"	f
exit_visual_mode	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:exit_visual_mode()$/;"	f
extractafter	plugged/vim-surround/plugin/surround.vim	/^function! s:extractafter(str)$/;"	f
extractbefore	plugged/vim-surround/plugin/surround.vim	/^function! s:extractbefore(str)$/;"	f
extrafunc 	plugged/smoothcursor.nvim/lua/smoothcursor/debug.lua	/^  extrafunc = extrafunc or function() end$/;"	f
fancy_head_exists	plugged/smoothcursor.nvim/lua/smoothcursor/callback.lua	/^local function fancy_head_exists()$/;"	f
feedkeys	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:feedkeys(keys)$/;"	f
file	plugged/minimap.vim/bin/minimap_generator.bat	/^set file=%4$/;"	v
filter	plugged/ale/test/script/run-vader-tests	/^function filter-vader-output() {$/;"	f
find_next	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:find_next(text)$/;"	f
fire_pre_triggers	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:fire_pre_triggers()$/;"	f
fixindent	plugged/vim-surround/plugin/surround.vim	/^function! s:fixindent(str,spc)$/;"	f
flare.cursor_moved 	plugged/flare.nvim/lua/flare/init.lua	/^flare.cursor_moved = function(args, force)$/;"	f
flare.highlightable_x_motion 	plugged/flare.nvim/lua/flare/init.lua	/^flare.highlightable_x_motion = function(cursor_row, prev_cursor_line, cursor_col, prev_cursor_col)$/;"	f
flare.highlightable_y_motion 	plugged/flare.nvim/lua/flare/init.lua	/^flare.highlightable_y_motion = function(cursor_row, last_cursor_line)$/;"	f
flare.setup 	plugged/flare.nvim/lua/flare/init.lua	/^flare.setup = function(opts)$/;"	f
format_callback	plugged/vim-pydocstring/autoload/pydocstring.vim	/^function! s:format_callback(msg, indent, start_lineno) abort$/;"	f
format_item 	plugged/toggleterm.nvim/lua/toggleterm.lua	/^    format_item = function(term) return term.id .. ": " .. term:_display_name() end,$/;"	f
function M.has_saved_size(direction) return persistent[direction] ~	plugged/toggleterm.nvim/lua/toggleterm/ui.lua	/^function M.has_saved_size(direction) return persistent[direction] ~= nil end$/;"	f
function M.is_float(window) return fn.win_gettype(window) 	plugged/toggleterm.nvim/lua/toggleterm/ui.lua	/^function M.is_float(window) return fn.win_gettype(window) == "popup" end$/;"	f
function M.reset_highlights() config.highlights 	plugged/toggleterm.nvim/lua/toggleterm/config.lua	/^function M.reset_highlights() config.highlights = get_highlights(config) end$/;"	f
function M.save_direction_size(direction, size) persistent[direction] 	plugged/toggleterm.nvim/lua/toggleterm/ui.lua	/^function M.save_direction_size(direction, size) persistent[direction] = size end$/;"	f
function M.set_origin_window() origin_window 	plugged/toggleterm.nvim/lua/toggleterm/ui.lua	/^function M.set_origin_window() origin_window = api.nvim_get_current_win() end$/;"	f
function M.str_is_empty(str) return str 	plugged/toggleterm.nvim/lua/toggleterm/utils.lua	/^function M.str_is_empty(str) return str == nil or str == "" end$/;"	f
function Terminal:is_float() return self.direction 	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^function Terminal:is_float() return self.direction == "float" and ui.is_float(self.window) end$/;"	f
function Terminal:is_focused() return self.window 	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^function Terminal:is_focused() return self.window == api.nvim_get_current_win() end$/;"	f
function Terminal:is_tab() return self.direction 	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^function Terminal:is_tab() return self.direction == "tab" and not ui.is_float(self.window) end$/;"	f
function() require("telescope.builtin").find_files({ cwd 	lua/plugins/example.lua	/^        function() require("telescope.builtin").find_files({ cwd = require("lazy.core.config").options.root }) end,$/;"	f
function(direction) return direction:match("^" .. typed_direction .. "*") ~	plugged/toggleterm.nvim/lua/toggleterm/commandline.lua	/^      function(direction) return direction:match("^" .. typed_direction .. "*") ~= nil end,$/;"	f
function(option) return command:match(" " .. option .. "	plugged/toggleterm.nvim/lua/toggleterm/commandline.lua	/^      function(option) return command:match(" " .. option .. "=") == nil end,$/;"	f
function(path) return path:match("^" .. search_term .. "*") ~	plugged/toggleterm.nvim/lua/toggleterm/commandline.lua	/^        function(path) return path:match("^" .. search_term .. "*") ~= nil end,$/;"	f
function_arguments 	plugged/hlchunk.nvim/lua/hlchunk/utils/ts_node_type/lua.lua	/^    function_arguments = "function_arguments",$/;"	f
function_body 	plugged/hlchunk.nvim/lua/hlchunk/utils/ts_node_type/lua.lua	/^    function_body = "function_body",$/;"	f
function_body_paren 	plugged/hlchunk.nvim/lua/hlchunk/utils/ts_node_type/lua.lua	/^    function_body_paren = "function_body_paren",$/;"	f
function_call 	plugged/hlchunk.nvim/lua/hlchunk/utils/ts_node_type/lua.lua	/^    function_call = "function_call",$/;"	f
function_call_paren 	plugged/hlchunk.nvim/lua/hlchunk/utils/ts_node_type/lua.lua	/^    function_call_paren = "function_call_paren",$/;"	f
function_declarator 	plugged/hlchunk.nvim/lua/hlchunk/utils/ts_node_type/cpp.lua	/^    function_declarator = "function_declarator",$/;"	f
function_definition 	plugged/hlchunk.nvim/lua/hlchunk/utils/ts_node_type/cpp.lua	/^    function_definition = "function_definition",$/;"	f
function_end 	plugged/hlchunk.nvim/lua/hlchunk/utils/ts_node_type/lua.lua	/^    function_end = "function_end",$/;"	f
function_name 	plugged/hlchunk.nvim/lua/hlchunk/utils/ts_node_type/lua.lua	/^    function_name = "function_name",$/;"	f
function_start 	plugged/hlchunk.nvim/lua/hlchunk/utils/ts_node_type/lua.lua	/^    function_start = "function_start",$/;"	f
function_statement 	plugged/hlchunk.nvim/lua/hlchunk/utils/ts_node_type/lua.lua	/^    function_statement = "function_statement",$/;"	f
functions 	plugged/nvim-window-picker/lua/window-picker/utf-8.lua	/^		functions = {},$/;"	f
g#	plugged/minimap.vim/plugin/minimap.vim	/^    nnoremap <silent> g# g#:call minimap#vim#UpdateColorSearch(1)<CR>$/;"	m
g*	plugged/minimap.vim/plugin/minimap.vim	/^    nnoremap <silent> g* g*:call minimap#vim#UpdateColorSearch(1)<CR>$/;"	m
g:SignatureMarkTextHL	plugged/vim-signature/after/plugin/signature.vim	/^    let   g:SignatureMarkTextHL = function("signature#sign#GetGitGutterHLGroup")$/;"	v
g:SignatureMarkTextHL	plugged/vim-signature/after/plugin/signature.vim	/^    let   g:SignatureMarkTextHL = function("signature#sign#GetSignifyHLGroup")$/;"	v
g:SignatureMarkerTextHL	plugged/vim-signature/after/plugin/signature.vim	/^    let   g:SignatureMarkerTextHL = function("signature#sign#GetGitGutterHLGroup")$/;"	v
g:SignatureMarkerTextHL	plugged/vim-signature/after/plugin/signature.vim	/^    let   g:SignatureMarkerTextHL = function("signature#sign#GetSignifyHLGroup")$/;"	v
g:__ale_c_project_filenames	plugged/ale/autoload/ale/c.vim	/^let g:__ale_c_project_filenames = ['.git\/HEAD', 'configure', 'Makefile', 'CMakeLists.txt']$/;"	v
g:ale#util#error_priority	plugged/ale/autoload/ale/util.vim	/^let g:ale#util#error_priority = 5$/;"	v
g:ale#util#info_priority	plugged/ale/autoload/ale/util.vim	/^let g:ale#util#info_priority = 3$/;"	v
g:ale#util#nul_file	plugged/ale/autoload/ale/util.vim	/^        let g:ale#util#nul_file = 'nul'$/;"	v
g:ale#util#nul_file	plugged/ale/autoload/ale/util.vim	/^    let g:ale#util#nul_file = '\/dev\/null'$/;"	v
g:ale#util#style_error_priority	plugged/ale/autoload/ale/util.vim	/^let g:ale#util#style_error_priority = 2$/;"	v
g:ale#util#style_warning_priority	plugged/ale/autoload/ale/util.vim	/^let g:ale#util#style_warning_priority = 1$/;"	v
g:ale#util#warning_priority	plugged/ale/autoload/ale/util.vim	/^let g:ale#util#warning_priority = 4$/;"	v
g:ale_bicep_az_bicep_executable	plugged/ale/ale_linters/bicep/az_bicep.vim	/^let g:ale_bicep_az_bicep_executable =$/;"	v
g:ale_bicep_az_bicep_options	plugged/ale/ale_linters/bicep/az_bicep.vim	/^let g:ale_bicep_az_bicep_options =$/;"	v
g:ale_bicep_bicep_executable	plugged/ale/ale_linters/bicep/bicep.vim	/^let g:ale_bicep_bicep_executable =$/;"	v
g:ale_bicep_bicep_options	plugged/ale/ale_linters/bicep/bicep.vim	/^let g:ale_bicep_bicep_options =$/;"	v
g:ale_buffer_info	plugged/ale/plugin/ale.vim	/^let g:ale_buffer_info = {}$/;"	v
g:ale_c_build_dir_names	plugged/ale/autoload/ale/c.vim	/^let g:ale_c_build_dir_names = get(g:, 'ale_c_build_dir_names', [$/;"	v
g:ale_change_sign_column_color	plugged/ale/autoload/ale/sign.vim	/^let g:ale_change_sign_column_color = get(g:, 'ale_change_sign_column_color', 0)$/;"	v
g:ale_close_preview_on_insert	plugged/ale/plugin/ale.vim	/^let g:ale_close_preview_on_insert = get(g:, 'ale_close_preview_on_insert', 0)$/;"	v
g:ale_cmake_cmake_lint_executable	plugged/ale/ale_linters/cmake/cmake_lint.vim	/^let g:ale_cmake_cmake_lint_executable =$/;"	v
g:ale_cmake_cmake_lint_options	plugged/ale/ale_linters/cmake/cmake_lint.vim	/^let g:ale_cmake_cmake_lint_options =$/;"	v
g:ale_cmake_cmakelint_executable	plugged/ale/ale_linters/cmake/cmakelint.vim	/^let g:ale_cmake_cmakelint_executable =$/;"	v
g:ale_cmake_cmakelint_options	plugged/ale/ale_linters/cmake/cmakelint.vim	/^let g:ale_cmake_cmakelint_options =$/;"	v
g:ale_command_wrapper	plugged/ale/autoload/ale/job.vim	/^let g:ale_command_wrapper = get(g:, 'ale_command_wrapper', '')$/;"	v
g:ale_completion_autoimport	plugged/ale/autoload/ale/completion.vim	/^let g:ale_completion_autoimport = get(g:, 'ale_completion_autoimport', 1)$/;"	v
g:ale_completion_delay	plugged/ale/autoload/ale/completion.vim	/^let g:ale_completion_delay = get(g:, 'ale_completion_delay', 100)$/;"	v
g:ale_completion_enabled	plugged/ale/plugin/ale.vim	/^let g:ale_completion_enabled = get(g:, 'ale_completion_enabled', 0)$/;"	v
g:ale_completion_excluded_words	plugged/ale/autoload/ale/completion.vim	/^let g:ale_completion_excluded_words = get(g:, 'ale_completion_excluded_words', [])$/;"	v
g:ale_completion_max_suggestions	plugged/ale/autoload/ale/completion.vim	/^let g:ale_completion_max_suggestions = get(g:, 'ale_completion_max_suggestions', 50)$/;"	v
g:ale_completion_symbols	plugged/ale/autoload/ale/completion.vim	/^let g:ale_completion_symbols = get(g:, 'ale_completion_symbols', {$/;"	v
g:ale_completion_tsserver_remove_warnings	plugged/ale/autoload/ale/completion.vim	/^let g:ale_completion_tsserver_remove_warnings = get(g:, 'ale_completion_tsserver_remove_warnings', 0)$/;"	v
g:ale_cs_mcs_options	plugged/ale/ale_linters/cs/mcs.vim	/^let g:ale_cs_mcs_options = get(g:, 'ale_cs_mcs_options', '')$/;"	v
g:ale_cursor_detail	plugged/ale/plugin/ale.vim	/^let g:ale_cursor_detail = get(g:, 'ale_cursor_detail', 0)$/;"	v
g:ale_default_navigation	plugged/ale/autoload/ale/definition.vim	/^let g:ale_default_navigation = get(g:, 'ale_default_navigation', 'buffer')$/;"	v
g:ale_default_navigation	plugged/ale/autoload/ale/references.vim	/^let g:ale_default_navigation = get(g:, 'ale_default_navigation', 'buffer')$/;"	v
g:ale_deno_executable	plugged/ale/plugin/ale.vim	/^let g:ale_deno_executable = get(g:, 'ale_deno_executable', 'deno')$/;"	v
g:ale_detail_to_floating_preview	plugged/ale/plugin/ale.vim	/^let g:ale_detail_to_floating_preview = get(g:, 'ale_detail_to_floating_preview', 0)$/;"	v
g:ale_disable_lsp	plugged/ale/plugin/ale.vim	/^let g:ale_disable_lsp = get(g:, 'ale_disable_lsp', 'auto')$/;"	v
g:ale_echo_cursor	plugged/ale/plugin/ale.vim	/^let g:ale_echo_cursor = get(g:, 'ale_echo_cursor', 1)$/;"	v
g:ale_echo_delay	plugged/ale/autoload/ale/cursor.vim	/^let g:ale_echo_delay = get(g:, 'ale_echo_delay', 10)$/;"	v
g:ale_echo_msg_error_str	plugged/ale/autoload/ale.vim	/^let g:ale_echo_msg_error_str = get(g:, 'ale_echo_msg_error_str', 'Error')$/;"	v
g:ale_echo_msg_format	plugged/ale/autoload/ale/cursor.vim	/^let g:ale_echo_msg_format = get(g:, 'ale_echo_msg_format', '%code: %%s')$/;"	v
g:ale_echo_msg_info_str	plugged/ale/autoload/ale.vim	/^let g:ale_echo_msg_info_str = get(g:, 'ale_echo_msg_info_str', 'Info')$/;"	v
g:ale_echo_msg_log_str	plugged/ale/autoload/ale.vim	/^let g:ale_echo_msg_log_str = get(g:, 'ale_echo_msg_log_str', 'Log')$/;"	v
g:ale_echo_msg_warning_str	plugged/ale/autoload/ale.vim	/^let g:ale_echo_msg_warning_str = get(g:, 'ale_echo_msg_warning_str', 'Warning')$/;"	v
g:ale_enabled	plugged/ale/plugin/ale.vim	/^let g:ale_enabled = get(g:, 'ale_enabled', 1)$/;"	v
g:ale_erlang_dialyzer_executable	plugged/ale/ale_linters/erlang/dialyzer.vim	/^let g:ale_erlang_dialyzer_executable =$/;"	v
g:ale_erlang_dialyzer_options	plugged/ale/ale_linters/erlang/dialyzer.vim	/^let g:ale_erlang_dialyzer_options =$/;"	v
g:ale_erlang_dialyzer_plt_file	plugged/ale/ale_linters/erlang/dialyzer.vim	/^let g:ale_erlang_dialyzer_plt_file =$/;"	v
g:ale_erlang_dialyzer_rebar3_profile	plugged/ale/ale_linters/erlang/dialyzer.vim	/^let g:ale_erlang_dialyzer_rebar3_profile =$/;"	v
g:ale_erlang_erlc_executable	plugged/ale/ale_linters/erlang/erlc.vim	/^let g:ale_erlang_erlc_executable = get(g:, 'ale_erlang_erlc_executable', 'erlc')$/;"	v
g:ale_erlang_erlc_options	plugged/ale/ale_linters/erlang/erlc.vim	/^let g:ale_erlang_erlc_options = get(g:, 'ale_erlang_erlc_options', '')$/;"	v
g:ale_exclude_highlights	plugged/ale/plugin/ale.vim	/^let g:ale_exclude_highlights = get(g:, 'ale_exclude_highlights', [])$/;"	v
g:ale_filename_mappings	plugged/ale/autoload/ale/engine.vim	/^let g:ale_filename_mappings = get(g:, 'ale_filename_mappings', {})$/;"	v
g:ale_filename_mappings	plugged/ale/autoload/ale/fix.vim	/^let g:ale_filename_mappings = get(g:, 'ale_filename_mappings', {})$/;"	v
g:ale_filename_mappings	plugged/ale/plugin/ale.vim	/^let g:ale_filename_mappings = get(g:, 'ale_filename_mappings', {})$/;"	v
g:ale_filetype_blacklist	plugged/ale/plugin/ale.vim	/^let g:ale_filetype_blacklist = [$/;"	v
g:ale_fix_buffer_data	plugged/ale/plugin/ale.vim	/^let g:ale_fix_buffer_data = {}$/;"	v
g:ale_fix_on_save	plugged/ale/plugin/ale.vim	/^let g:ale_fix_on_save = get(g:, 'ale_fix_on_save', 0)$/;"	v
g:ale_fix_on_save_ignore	plugged/ale/autoload/ale/fix.vim	/^let g:ale_fix_on_save_ignore = get(g:, 'ale_fix_on_save_ignore', {})$/;"	v
g:ale_fixers	plugged/ale/plugin/ale.vim	/^let g:ale_fixers = get(g:, 'ale_fixers', {})$/;"	v
g:ale_floating_preview	plugged/ale/plugin/ale.vim	/^let g:ale_floating_preview = get(g:, 'ale_floating_preview', 0)$/;"	v
g:ale_floating_window_border	plugged/ale/plugin/ale.vim	/^let g:ale_floating_window_border = get(g:, 'ale_floating_window_border', ['|', '-', '+', '+', '+', '+', '|', '-'])$/;"	v
g:ale_go_go111module	plugged/ale/plugin/ale.vim	/^let g:ale_go_go111module = get(g:, 'ale_go_go111module', '')$/;"	v
g:ale_history_enabled	plugged/ale/plugin/ale.vim	/^let g:ale_history_enabled = get(g:, 'ale_history_enabled', 1)$/;"	v
g:ale_history_log_output	plugged/ale/plugin/ale.vim	/^let g:ale_history_log_output = get(g:, 'ale_history_log_output', 1)$/;"	v
g:ale_hover_cursor	plugged/ale/plugin/ale.vim	/^let g:ale_hover_cursor = get(g:, 'ale_hover_cursor', 1)$/;"	v
g:ale_hover_to_floating_preview	plugged/ale/plugin/ale.vim	/^let g:ale_hover_to_floating_preview = get(g:, 'ale_hover_to_floating_preview', 0)$/;"	v
g:ale_hover_to_preview	plugged/ale/plugin/ale.vim	/^let g:ale_hover_to_preview = get(g:, 'ale_hover_to_preview', 0)$/;"	v
g:ale_html_tidy_executable	plugged/ale/ale_linters/html/tidy.vim	/^let g:ale_html_tidy_executable = get(g:, 'ale_html_tidy_executable', 'tidy')$/;"	v
g:ale_html_tidy_options	plugged/ale/ale_linters/html/tidy.vim	/^let g:ale_html_tidy_options = get(g:, 'ale_html_tidy_options', '-q -e -language en')$/;"	v
g:ale_ignore_2_4_warnings	plugged/ale/test/.config/nvim/init.vim	/^let g:ale_ignore_2_4_warnings = 1$/;"	v
g:ale_info_default_mode	plugged/ale/autoload/ale/debugging.vim	/^let g:ale_info_default_mode = get(g:, 'ale_info_default_mode', 'preview')$/;"	v
g:ale_java_pmd_options	plugged/ale/ale_linters/java/pmd.vim	/^    let g:ale_java_pmd_options = '-R category\/java\/bestpractices.xml'$/;"	v
g:ale_keep_list_window_open	plugged/ale/autoload/ale/list.vim	/^let g:ale_keep_list_window_open = get(g:, 'ale_keep_list_window_open', 0)$/;"	v
g:ale_kotlin_kotlinc_classpath	plugged/ale/ale_linters/kotlin/kotlinc.vim	/^let g:ale_kotlin_kotlinc_classpath = get(g:, 'ale_kotlin_kotlinc_classpath', '')$/;"	v
g:ale_kotlin_kotlinc_config_file	plugged/ale/ale_linters/kotlin/kotlinc.vim	/^let g:ale_kotlin_kotlinc_config_file = get(g:, 'ale_kotlin_kotlinc_config_file', '.ale_kotlinc_config')$/;"	v
g:ale_kotlin_kotlinc_enable_config	plugged/ale/ale_linters/kotlin/kotlinc.vim	/^let g:ale_kotlin_kotlinc_enable_config = get(g:, 'ale_kotlin_kotlinc_enable_config', 0)$/;"	v
g:ale_kotlin_kotlinc_module_filename	plugged/ale/ale_linters/kotlin/kotlinc.vim	/^let g:ale_kotlin_kotlinc_module_filename = get(g:, 'ale_kotlin_kotlinc_module_filename', 'module.xml')$/;"	v
g:ale_kotlin_kotlinc_options	plugged/ale/ale_linters/kotlin/kotlinc.vim	/^let g:ale_kotlin_kotlinc_options = get(g:, 'ale_kotlin_kotlinc_options', '')$/;"	v
g:ale_kotlin_kotlinc_sourcepath	plugged/ale/ale_linters/kotlin/kotlinc.vim	/^let g:ale_kotlin_kotlinc_sourcepath = get(g:, 'ale_kotlin_kotlinc_sourcepath', '')$/;"	v
g:ale_kotlin_kotlinc_use_module_file	plugged/ale/ale_linters/kotlin/kotlinc.vim	/^let g:ale_kotlin_kotlinc_use_module_file = get(g:, 'ale_kotlin_kotlinc_use_module_file', 0)$/;"	v
g:ale_lint_delay	plugged/ale/plugin/ale.vim	/^let g:ale_lint_delay = get(g:, 'ale_lint_delay', 200)$/;"	v
g:ale_lint_on_enter	plugged/ale/plugin/ale.vim	/^let g:ale_lint_on_enter = get(g:, 'ale_lint_on_enter', 1)$/;"	v
g:ale_lint_on_filetype_changed	plugged/ale/plugin/ale.vim	/^let g:ale_lint_on_filetype_changed = get(g:, 'ale_lint_on_filetype_changed', 1)$/;"	v
g:ale_lint_on_insert_leave	plugged/ale/plugin/ale.vim	/^let g:ale_lint_on_insert_leave = get(g:, 'ale_lint_on_insert_leave', 1)$/;"	v
g:ale_lint_on_save	plugged/ale/plugin/ale.vim	/^let g:ale_lint_on_save = get(g:, 'ale_lint_on_save', 1)$/;"	v
g:ale_lint_on_text_changed	plugged/ale/plugin/ale.vim	/^let g:ale_lint_on_text_changed = get(g:, 'ale_lint_on_text_changed', 'normal')$/;"	v
g:ale_linter_aliases	plugged/ale/plugin/ale.vim	/^let g:ale_linter_aliases = get(g:, 'ale_linter_aliases', {})$/;"	v
g:ale_linters	plugged/ale/plugin/ale.vim	/^let g:ale_linters = get(g:, 'ale_linters', {})$/;"	v
g:ale_linters_explicit	plugged/ale/plugin/ale.vim	/^let g:ale_linters_explicit = get(g:, 'ale_linters_explicit', 0)$/;"	v
g:ale_linters_ignore	plugged/ale/plugin/ale.vim	/^let g:ale_linters_ignore = get(g:, 'ale_linters_ignore', {})$/;"	v
g:ale_list_vertical	plugged/ale/autoload/ale/list.vim	/^let g:ale_list_vertical = get(g:, 'ale_list_vertical', 0)$/;"	v
g:ale_list_window_size	plugged/ale/autoload/ale/list.vim	/^let g:ale_list_window_size = get(g:, 'ale_list_window_size', 10)$/;"	v
g:ale_loclist_msg_format	plugged/ale/autoload/ale/list.vim	/^let g:ale_loclist_msg_format = get(g:, 'ale_loclist_msg_format',$/;"	v
g:ale_lsp_next_message_id	plugged/ale/autoload/ale/lsp.vim	/^let g:ale_lsp_next_message_id = 1$/;"	v
g:ale_lsp_next_version_id	plugged/ale/autoload/ale/lsp/message.vim	/^let g:ale_lsp_next_version_id = 1$/;"	v
g:ale_lsp_show_message_format	plugged/ale/autoload/ale.vim	/^let g:ale_lsp_show_message_format = get(g:, 'ale_lsp_show_message_format', '%severity%:%linter%: %s')$/;"	v
g:ale_lsp_show_message_severity	plugged/ale/autoload/ale.vim	/^let g:ale_lsp_show_message_severity = get(g:, 'ale_lsp_show_message_severity', 'error')$/;"	v
g:ale_lsp_suggestions	plugged/ale/plugin/ale.vim	/^let g:ale_lsp_suggestions = get(g:, 'ale_lsp_suggestions', 0)$/;"	v
g:ale_lsp_types	plugged/ale/autoload/ale/completion.vim	/^let g:ale_lsp_types = {$/;"	v
g:ale_max_buffer_history_size	plugged/ale/autoload/ale/history.vim	/^let g:ale_max_buffer_history_size = get(g:, 'ale_max_buffer_history_size', 20)$/;"	v
g:ale_max_signs	plugged/ale/autoload/ale/sign.vim	/^let g:ale_max_signs = get(g:, 'ale_max_signs', -1)$/;"	v
g:ale_objc_clang_options	plugged/ale/ale_linters/objc/clang.vim	/^    let g:ale_objc_clang_options = '-std=c11 -Wall'$/;"	v
g:ale_objcpp_clang_options	plugged/ale/ale_linters/objcpp/clang.vim	/^    let g:ale_objcpp_clang_options = '-std=c++14 -Wall'$/;"	v
g:ale_open_list	plugged/ale/autoload/ale/list.vim	/^let g:ale_open_list = get(g:, 'ale_open_list', 0)$/;"	v
g:ale_perl6_perl6_executable	plugged/ale/ale_linters/perl6/perl6.vim	/^let g:ale_perl6_perl6_executable =$/;"	v
g:ale_perl6_perl6_options	plugged/ale/ale_linters/perl6/perl6.vim	/^let g:ale_perl6_perl6_options =$/;"	v
g:ale_php_phan_executable	plugged/ale/ale_linters/php/phan.vim	/^let g:ale_php_phan_executable = get(g:, 'ale_php_phan_executable', 'phan')$/;"	v
g:ale_php_phan_minimum_severity	plugged/ale/ale_linters/php/phan.vim	/^let g:ale_php_phan_minimum_severity = get(g:, 'ale_php_phan_minimum_severity', 0)$/;"	v
g:ale_php_phan_use_client	plugged/ale/ale_linters/php/phan.vim	/^let g:ale_php_phan_use_client = get(g:, 'ale_php_phan_use_client', 0)$/;"	v
g:ale_php_phpcs_standard	plugged/ale/ale_linters/php/phpcs.vim	/^let g:ale_php_phpcs_standard = get(g:, 'ale_php_phpcs_standard', '')$/;"	v
g:ale_php_phpmd_executable	plugged/ale/ale_linters/php/phpmd.vim	/^let g:ale_php_phpmd_executable = get(g:, 'ale_php_phpmd_executable', 'phpmd')$/;"	v
g:ale_php_phpmd_ruleset	plugged/ale/ale_linters/php/phpmd.vim	/^let g:ale_php_phpmd_ruleset = get(g:, 'ale_php_phpmd_ruleset', 'cleancode,codesize,controversial,design,naming,unusedcode')$/;"	v
g:ale_php_phpstan_autoload	plugged/ale/ale_linters/php/phpstan.vim	/^let g:ale_php_phpstan_autoload = get(g:, 'ale_php_phpstan_autoload', '')$/;"	v
g:ale_php_phpstan_configuration	plugged/ale/ale_linters/php/phpstan.vim	/^let g:ale_php_phpstan_configuration = get(g:, 'ale_php_phpstan_configuration', '')$/;"	v
g:ale_php_phpstan_executable	plugged/ale/ale_linters/php/phpstan.vim	/^let g:ale_php_phpstan_executable = get(g:, 'ale_php_phpstan_executable', 'phpstan')$/;"	v
g:ale_php_phpstan_level	plugged/ale/ale_linters/php/phpstan.vim	/^let g:ale_php_phpstan_level = get(g:, 'ale_php_phpstan_level', '')$/;"	v
g:ale_php_phpstan_memory_limit	plugged/ale/ale_linters/php/phpstan.vim	/^let g:ale_php_phpstan_memory_limit = get(g:, 'ale_php_phpstan_memory_limit', '')$/;"	v
g:ale_popup_menu_enabled	plugged/ale/plugin/ale.vim	/^let g:ale_popup_menu_enabled = get(g:, 'ale_popup_menu_enabled', has('gui_running'))$/;"	v
g:ale_puppet_puppetlint_executable	plugged/ale/autoload/ale/fixers/puppetlint.vim	/^    let g:ale_puppet_puppetlint_executable = 'puppet-lint'$/;"	v
g:ale_puppet_puppetlint_options	plugged/ale/autoload/ale/fixers/puppetlint.vim	/^    let g:ale_puppet_puppetlint_options = ''$/;"	v
g:ale_python_auto_pipenv	plugged/ale/plugin/ale.vim	/^let g:ale_python_auto_pipenv = get(g:, 'ale_python_auto_pipenv', 0)$/;"	v
g:ale_python_auto_poetry	plugged/ale/plugin/ale.vim	/^let g:ale_python_auto_poetry = get(g:, 'ale_python_auto_poetry', 0)$/;"	v
g:ale_python_auto_virtualenv	plugged/ale/plugin/ale.vim	/^let g:ale_python_auto_virtualenv = get(g:, 'ale_python_auto_virtualenv', 0)$/;"	v
g:ale_python_prospector_executable	plugged/ale/ale_linters/python/prospector.vim	/^let g:ale_python_prospector_executable =$/;"	v
g:ale_python_prospector_options	plugged/ale/ale_linters/python/prospector.vim	/^let g:ale_python_prospector_options =$/;"	v
g:ale_python_prospector_use_global	plugged/ale/ale_linters/python/prospector.vim	/^let g:ale_python_prospector_use_global = get(g:, 'ale_python_prospector_use_global', get(g:, 'ale_use_global_executables', 0))$/;"	v
g:ale_r_lintr_lint_package	plugged/ale/ale_linters/r/lintr.vim	/^let g:ale_r_lintr_lint_package = get(g:, 'ale_r_lintr_lint_package', 0)$/;"	v
g:ale_r_lintr_options	plugged/ale/ale_linters/r/lintr.vim	/^let g:ale_r_lintr_options = get(g:, 'ale_r_lintr_options', 'with_defaults()')$/;"	v
g:ale_rename_tsserver_find_in_comments	plugged/ale/autoload/ale/rename.vim	/^let g:ale_rename_tsserver_find_in_comments = get(g:, 'ale_rename_tsserver_find_in_comments')$/;"	v
g:ale_rename_tsserver_find_in_strings	plugged/ale/autoload/ale/rename.vim	/^let g:ale_rename_tsserver_find_in_strings = get(g:, 'ale_rename_tsserver_find_in_strings')$/;"	v
g:ale_root	plugged/ale/plugin/ale.vim	/^let g:ale_root = get(g:, 'ale_root', {})$/;"	v
g:ale_rust_ignore_error_codes	plugged/ale/autoload/ale/handlers/rust.vim	/^    let g:ale_rust_ignore_error_codes = []$/;"	v
g:ale_rust_ignore_secondary_spans	plugged/ale/autoload/ale/handlers/rust.vim	/^    let g:ale_rust_ignore_secondary_spans = 0$/;"	v
g:ale_save_hidden	plugged/ale/plugin/ale.vim	/^let g:ale_save_hidden = get(g:, 'ale_save_hidden', 0)$/;"	v
g:ale_set_balloons	plugged/ale/plugin/ale.vim	/^let g:ale_set_balloons = get(g:, 'ale_set_balloons', has('balloon_eval') && has('gui_running'))$/;"	v
g:ale_set_highlights	plugged/ale/plugin/ale.vim	/^let g:ale_set_highlights = get(g:, 'ale_set_highlights', has('syntax'))$/;"	v
g:ale_set_lists_synchronously	plugged/ale/test/.config/nvim/init.vim	/^let g:ale_set_lists_synchronously = 1$/;"	v
g:ale_set_loclist	plugged/ale/plugin/ale.vim	/^let g:ale_set_loclist = get(g:, 'ale_set_loclist', 1)$/;"	v
g:ale_set_quickfix	plugged/ale/plugin/ale.vim	/^let g:ale_set_quickfix = get(g:, 'ale_set_quickfix', 0)$/;"	v
g:ale_set_signs	plugged/ale/plugin/ale.vim	/^let g:ale_set_signs = get(g:, 'ale_set_signs', has('signs'))$/;"	v
g:ale_sh_shell_default_shell	plugged/ale/ale_linters/sh/shell.vim	/^        let g:ale_sh_shell_default_shell = 'bash'$/;"	v
g:ale_sh_shell_default_shell	plugged/ale/ale_linters/sh/shell.vim	/^    let g:ale_sh_shell_default_shell = fnamemodify($SHELL, ':t')$/;"	v
g:ale_sign_column_always	plugged/ale/autoload/ale/sign.vim	/^let g:ale_sign_column_always = get(g:, 'ale_sign_column_always', 0)$/;"	v
g:ale_sign_error	plugged/ale/autoload/ale/sign.vim	/^let g:ale_sign_error = get(g:, 'ale_sign_error', 'E')$/;"	v
g:ale_sign_highlight_linenrs	plugged/ale/autoload/ale/sign.vim	/^let g:ale_sign_highlight_linenrs = get(g:, 'ale_sign_highlight_linenrs', 0)$/;"	v
g:ale_sign_info	plugged/ale/autoload/ale/sign.vim	/^let g:ale_sign_info = get(g:, 'ale_sign_info', 'I')$/;"	v
g:ale_sign_offset	plugged/ale/autoload/ale/sign.vim	/^let g:ale_sign_offset = get(g:, 'ale_sign_offset', 1000000)$/;"	v
g:ale_sign_priority	plugged/ale/autoload/ale/sign.vim	/^let g:ale_sign_priority = get(g:, 'ale_sign_priority', 30)$/;"	v
g:ale_sign_style_error	plugged/ale/autoload/ale/sign.vim	/^let g:ale_sign_style_error = get(g:, 'ale_sign_style_error', g:ale_sign_error)$/;"	v
g:ale_sign_style_warning	plugged/ale/autoload/ale/sign.vim	/^let g:ale_sign_style_warning = get(g:, 'ale_sign_style_warning', g:ale_sign_warning)$/;"	v
g:ale_sign_warning	plugged/ale/autoload/ale/sign.vim	/^let g:ale_sign_warning = get(g:, 'ale_sign_warning', 'W')$/;"	v
g:ale_sql_sqlfluff_executable	plugged/ale/ale_linters/sql/sqlfluff.vim	/^let g:ale_sql_sqlfluff_executable =$/;"	v
g:ale_sql_sqlfluff_options	plugged/ale/ale_linters/sql/sqlfluff.vim	/^let g:ale_sql_sqlfluff_options =$/;"	v
g:ale_tex_chktex_executable	plugged/ale/ale_linters/tex/chktex.vim	/^let g:ale_tex_chktex_executable =$/;"	v
g:ale_tex_chktex_options	plugged/ale/ale_linters/tex/chktex.vim	/^let g:ale_tex_chktex_options =$/;"	v
g:ale_tsserver_types	plugged/ale/autoload/ale/completion.vim	/^let g:ale_tsserver_types = {$/;"	v
g:ale_type_map	plugged/ale/autoload/ale/engine.vim	/^let g:ale_type_map = get(g:, 'ale_type_map', {})$/;"	v
g:ale_update_tagstack	plugged/ale/autoload/ale/definition.vim	/^let g:ale_update_tagstack = get(g:, 'ale_update_tagstack', 1)$/;"	v
g:ale_use_neovim_diagnostics_api	plugged/ale/plugin/ale.vim	/^let g:ale_use_neovim_diagnostics_api = get(g:, 'ale_use_neovim_diagnostics_api', has('nvim-0.6'))$/;"	v
g:ale_use_neovim_diagnostics_api	plugged/ale/test/.config/nvim/init.vim	/^let g:ale_use_neovim_diagnostics_api = 0$/;"	v
g:ale_verilog_verilator_options	plugged/ale/ale_linters/verilog/verilator.vim	/^    let g:ale_verilog_verilator_options = ''$/;"	v
g:ale_virtualenv_dir_names	plugged/ale/autoload/ale/python.vim	/^let g:ale_virtualenv_dir_names = get(g:, 'ale_virtualenv_dir_names', [$/;"	v
g:ale_virtualtext_column	plugged/ale/autoload/ale/virtualtext.vim	/^let g:ale_virtualtext_column = get(g:, 'ale_virtualtext_column', 0)$/;"	v
g:ale_virtualtext_cursor	plugged/ale/plugin/ale.vim	/^let g:ale_virtualtext_cursor = get(g:, 'ale_virtualtext_cursor', (has('nvim-0.3.2') || has('patch-9.0.0297') && has('textprop') && has('popupwin')) ? 'all' : 'disabled')$/;"	v
g:ale_virtualtext_delay	plugged/ale/autoload/ale/virtualtext.vim	/^let g:ale_virtualtext_delay = get(g:, 'ale_virtualtext_delay', 10)$/;"	v
g:ale_virtualtext_maxcolumn	plugged/ale/autoload/ale/virtualtext.vim	/^let g:ale_virtualtext_maxcolumn = get(g:, 'ale_virtualtext_maxcolumn', 0)$/;"	v
g:ale_virtualtext_prefix	plugged/ale/autoload/ale/virtualtext.vim	/^let g:ale_virtualtext_prefix =$/;"	v
g:ale_virtualtext_single	plugged/ale/autoload/ale/virtualtext.vim	/^let g:ale_virtualtext_single = get(g:, 'ale_virtualtext_single', 1)$/;"	v
g:ale_warn_about_trailing_blank_lines	plugged/ale/plugin/ale.vim	/^let g:ale_warn_about_trailing_blank_lines = get(g:, 'ale_warn_about_trailing_blank_lines', 1)$/;"	v
g:ale_warn_about_trailing_whitespace	plugged/ale/plugin/ale.vim	/^let g:ale_warn_about_trailing_whitespace = get(g:, 'ale_warn_about_trailing_whitespace', 1)$/;"	v
g:ale_xml_xmllint_executable	plugged/ale/ale_linters/xml/xmllint.vim	/^let g:ale_xml_xmllint_executable = get(g:, 'ale_xml_xmllint_executable', 'xmllint')$/;"	v
g:ale_xml_xmllint_options	plugged/ale/ale_linters/xml/xmllint.vim	/^let g:ale_xml_xmllint_options = get(g:, 'ale_xml_xmllint_options', '')$/;"	v
g:beacon_enable	plugged/beacon.nvim/plugin/beacon.vim	/^let g:beacon_enable = get(g:, 'beacon_enable', 1) $/;"	v
g:beacon_fade	plugged/beacon.nvim/plugin/beacon.vim	/^let g:beacon_fade = get(g:, 'beacon_fade', 1)$/;"	v
g:beacon_focus_gained	plugged/beacon.nvim/plugin/beacon.vim	/^let g:beacon_focus_gained = get(g:, 'beacon_focus_gained', 0)$/;"	v
g:beacon_ignore_buffers	plugged/beacon.nvim/plugin/beacon.vim	/^let g:beacon_ignore_buffers = get(g:, 'beacon_ignore_buffers', [])$/;"	v
g:beacon_ignore_filetypes	plugged/beacon.nvim/plugin/beacon.vim	/^let g:beacon_ignore_filetypes = get(g:, 'beacon_ignore_filetypes', [])$/;"	v
g:beacon_loaded	plugged/beacon.nvim/plugin/beacon.vim	/^let g:beacon_loaded = 1$/;"	v
g:beacon_minimal_jump	plugged/beacon.nvim/plugin/beacon.vim	/^let g:beacon_minimal_jump = get(g:, 'beacon_minimal_jump', 10)$/;"	v
g:beacon_show_jumps	plugged/beacon.nvim/plugin/beacon.vim	/^let g:beacon_show_jumps = get(g:, 'beacon_show_jumps', 1)$/;"	v
g:beacon_shrink	plugged/beacon.nvim/plugin/beacon.vim	/^let g:beacon_shrink = get(g:, 'beacon_shrink', 1)$/;"	v
g:beacon_size	plugged/beacon.nvim/plugin/beacon.vim	/^let g:beacon_size = get(g:, 'beacon_size', 40)$/;"	v
g:beacon_timeout	plugged/beacon.nvim/plugin/beacon.vim	/^let g:beacon_timeout = get(g:, 'beacon_timeout', 500)$/;"	v
g:loaded_Signature	plugged/vim-signature/plugin/signature.vim	/^let g:loaded_Signature = 1$/;"	v
g:loaded_ale	plugged/ale/plugin/ale.vim	/^let g:loaded_ale = 1$/;"	v
g:loaded_ale_dont_use_this_in_other_plugins_please	plugged/ale/plugin/ale.vim	/^let g:loaded_ale_dont_use_this_in_other_plugins_please = 1$/;"	v
g:loaded_cursorword	plugged/vim-cursorword/plugin/cursorword.vim	/^let g:loaded_cursorword = 1$/;"	v
g:loaded_minimap	plugged/minimap.vim/plugin/minimap.vim	/^let g:loaded_minimap = 1$/;"	v
g:loaded_surround	plugged/vim-surround/plugin/surround.vim	/^let g:loaded_surround = 1$/;"	v
g:loaded_tagbar	plugged/tagbar/autoload/tagbar.vim	/^let g:loaded_tagbar = 1$/;"	v
g:mapleader	plugged/ale/test/.config/nvim/init.vim	/^let g:mapleader=','$/;"	v
g:minimap_auto_start	plugged/minimap.vim/plugin/minimap.vim	/^    let g:minimap_auto_start = 0$/;"	v
g:minimap_auto_start_win_enter	plugged/minimap.vim/plugin/minimap.vim	/^    let g:minimap_auto_start_win_enter = 0$/;"	v
g:minimap_background_processing	plugged/minimap.vim/plugin/minimap.vim	/^    let g:minimap_background_processing = 0$/;"	v
g:minimap_base_highlight	plugged/minimap.vim/plugin/minimap.vim	/^    let g:minimap_base_highlight = 'Normal'$/;"	v
g:minimap_base_matchid	plugged/minimap.vim/plugin/minimap.vim	/^    let g:minimap_base_matchid = 9265454 " magic number$/;"	v
g:minimap_block_buftypes	plugged/minimap.vim/plugin/minimap.vim	/^    let g:minimap_block_buftypes = ['nofile', 'nowrite', 'quickfix', 'terminal', 'prompt']$/;"	v
g:minimap_block_filetypes	plugged/minimap.vim/plugin/minimap.vim	/^    let g:minimap_block_filetypes = ['fugitive', 'nerdtree', 'tagbar', 'fzf']$/;"	v
g:minimap_close_buftypes	plugged/minimap.vim/plugin/minimap.vim	/^    let g:minimap_close_buftypes = []$/;"	v
g:minimap_close_filetypes	plugged/minimap.vim/plugin/minimap.vim	/^    let g:minimap_close_filetypes = ['startify', 'netrw', 'vim-plug']$/;"	v
g:minimap_cursor_color	plugged/minimap.vim/plugin/minimap.vim	/^    let g:minimap_cursor_color = 'minimapCursor'$/;"	v
g:minimap_cursor_color	plugged/minimap.vim/plugin/minimap.vim	/^    let g:minimap_cursor_color = g:minimap_highlight$/;"	v
g:minimap_cursor_color_priority	plugged/minimap.vim/plugin/minimap.vim	/^    let g:minimap_cursor_color_priority = 110$/;"	v
g:minimap_cursor_diff_color	plugged/minimap.vim/plugin/minimap.vim	/^    let g:minimap_cursor_diff_color = 'minimapCursorDiffLine'$/;"	v
g:minimap_cursor_diffadd_color	plugged/minimap.vim/plugin/minimap.vim	/^    let g:minimap_cursor_diffadd_color = 'minimapCursorDiffAdded'$/;"	v
g:minimap_cursor_diffremove_color	plugged/minimap.vim/plugin/minimap.vim	/^    let g:minimap_cursor_diffremove_color = 'minimapCursorDiffRemoved'$/;"	v
g:minimap_did_quit	plugged/minimap.vim/plugin/minimap.vim	/^let g:minimap_did_quit = 0$/;"	v
g:minimap_diff_color	plugged/minimap.vim/plugin/minimap.vim	/^    let g:minimap_diff_color = 'minimapDiffLine'$/;"	v
g:minimap_diffadd_color	plugged/minimap.vim/plugin/minimap.vim	/^    let g:minimap_diffadd_color = 'minimapDiffAdded'$/;"	v
g:minimap_diffremove_color	plugged/minimap.vim/plugin/minimap.vim	/^    let g:minimap_diffremove_color = 'minimapDiffRemoved'$/;"	v
g:minimap_enable_highlight_colorgroup	plugged/minimap.vim/plugin/minimap.vim	/^    let g:minimap_enable_highlight_colorgroup = 1$/;"	v
g:minimap_exec_warning	plugged/minimap.vim/plugin/minimap.vim	/^    let g:minimap_exec_warning  = 1$/;"	v
g:minimap_getting_window_info	plugged/minimap.vim/plugin/minimap.vim	/^let g:minimap_getting_window_info = 0$/;"	v
g:minimap_git_colors	plugged/minimap.vim/plugin/minimap.vim	/^    let g:minimap_git_colors = 0$/;"	v
g:minimap_git_id_list	plugged/minimap.vim/plugin/minimap.vim	/^let g:minimap_git_id_list = []$/;"	v
g:minimap_highlight_range	plugged/minimap.vim/plugin/minimap.vim	/^    let g:minimap_highlight_range = 1$/;"	v
g:minimap_highlight_search	plugged/minimap.vim/plugin/minimap.vim	/^    let g:minimap_highlight_search = 0$/;"	v
g:minimap_left	plugged/minimap.vim/plugin/minimap.vim	/^    let g:minimap_left = 0$/;"	v
g:minimap_line_state_table	plugged/minimap.vim/plugin/minimap.vim	/^let g:minimap_line_state_table = {}$/;"	v
g:minimap_match_id_list	plugged/minimap.vim/plugin/minimap.vim	/^let g:minimap_match_id_list = []$/;"	v
g:minimap_opening	plugged/minimap.vim/plugin/minimap.vim	/^let g:minimap_opening = 0$/;"	v
g:minimap_range_color	plugged/minimap.vim/plugin/minimap.vim	/^    let g:minimap_range_color = 'minimapRange'$/;"	v
g:minimap_range_diff_color	plugged/minimap.vim/plugin/minimap.vim	/^    let g:minimap_range_diff_color = 'minimapRangeDiffLine'$/;"	v
g:minimap_range_diffadd_color	plugged/minimap.vim/plugin/minimap.vim	/^    let g:minimap_range_diffadd_color = 'minimapRangeDiffAdded'$/;"	v
g:minimap_range_diffremove_color	plugged/minimap.vim/plugin/minimap.vim	/^    let g:minimap_range_diffremove_color = 'minimapRangeDiffRemoved'$/;"	v
g:minimap_range_id_list	plugged/minimap.vim/plugin/minimap.vim	/^let g:minimap_range_id_list = []$/;"	v
g:minimap_run_update_highlight_count	plugged/minimap.vim/plugin/minimap.vim	/^let g:minimap_run_update_highlight_count = 0$/;"	v
g:minimap_search_color	plugged/minimap.vim/plugin/minimap.vim	/^    let g:minimap_search_color = 'Search'$/;"	v
g:minimap_search_color_priority	plugged/minimap.vim/plugin/minimap.vim	/^    let g:minimap_search_color_priority = 120$/;"	v
g:minimap_search_id_list	plugged/minimap.vim/plugin/minimap.vim	/^let g:minimap_search_id_list = []$/;"	v
g:minimap_search_matchid_safe_range	plugged/minimap.vim/plugin/minimap.vim	/^    let g:minimap_search_matchid_safe_range = g:minimap_base_matchid + 30000$/;"	v
g:minimap_width	plugged/minimap.vim/plugin/minimap.vim	/^    let g:minimap_width = 10$/;"	v
g:minimap_window_width_override_for_scaling	plugged/minimap.vim/plugin/minimap.vim	/^    let g:minimap_window_width_override_for_scaling = 2147483647$/;"	v
g:multi_cursor_normal_maps	plugged/vim-multiple-cursors/plugin/multiple_cursors.vim	/^let g:multi_cursor_normal_maps =$/;"	v
g:multi_cursor_start_word_key	plugged/vim-multiple-cursors/plugin/multiple_cursors.vim	/^    let g:multi_cursor_start_word_key = g:multi_cursor_next_key$/;"	v
g:multi_cursor_visual_maps	plugged/vim-multiple-cursors/plugin/multiple_cursors.vim	/^let g:multi_cursor_visual_maps =$/;"	v
g:pydocstring_doq_path	plugged/vim-pydocstring/autoload/pydocstring.vim	/^let g:pydocstring_doq_path = get($/;"	v
g:pydocstring_formatter	plugged/vim-pydocstring/autoload/pydocstring.vim	/^let g:pydocstring_formatter = get(g:, 'pydocstring_formatter', 'sphinx')$/;"	v
g:pydocstring_ignore_init	plugged/vim-pydocstring/autoload/pydocstring.vim	/^let g:pydocstring_ignore_init = get(g:, 'pydocstring_ignore_init', 0)$/;"	v
g:pydocstring_templates_path	plugged/vim-pydocstring/autoload/pydocstring.vim	/^let g:pydocstring_templates_path = get(g:, 'pydocstring_templates_path', '')$/;"	v
g:tagbar#icon_closed	plugged/tagbar/autoload/tagbar.vim	/^let g:tagbar#icon_closed = g:tagbar_iconchars[0]$/;"	v
g:tagbar#icon_open	plugged/tagbar/autoload/tagbar.vim	/^let g:tagbar#icon_open   = g:tagbar_iconchars[1]$/;"	v
g:tagbar_iconchars	plugged/tagbar/plugin/tagbar.vim	/^        let g:tagbar_iconchars = ['+', '-']$/;"	v
g:tagbar_iconchars	plugged/tagbar/plugin/tagbar.vim	/^        let g:tagbar_iconchars = ['▸', '▾']$/;"	v
gather_candidates	plugged/ale/rplugin/python3/deoplete/sources/ale.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
generate_minimap	plugged/minimap.vim/autoload/minimap/vim.vim	/^function! s:generate_minimap(mmwinnr, bufnr, fname, ftype) abort$/;"	f
get	plugged/tagbar/autoload/tagbar/state.vim	/^function! s:get() abort$/;"	f
getChildren	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:getChildren() dict abort$/;"	f
getChildrenByName	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:getChildrenByName(tagname) dict abort$/;"	f
getClosedParentTline	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:getClosedParentTline() abort dict$/;"	f
getDataType	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:getDataType() abort dict$/;"	f
getDataType	plugged/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:getDataType() abort dict$/;"	f
getKind	plugged/tagbar/autoload/tagbar/prototypes/typeinfo.vim	/^function! s:getKind(kind) abort dict$/;"	f
getPrototype	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:getPrototype(short) abort dict$/;"	f
getPrototype	plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:getPrototype(short) abort dict$/;"	f
getPrototype	plugged/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:getPrototype(short) abort dict$/;"	f
getTags	plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:getTags() dict abort$/;"	f
getTagsByName	plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:getTagsByName(tagname) dict abort$/;"	f
get_char	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:get_char(...)$/;"	f
get_command_sep	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^local function get_command_sep() return is_windows and is_cmd(vim.o.shell) and "&" or ";" end$/;"	f
get_comment_sep	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^local function get_comment_sep() return is_windows and is_cmd(vim.o.shell) and "::" or "#" end$/;"	f
get_complete_position	plugged/ale/rplugin/python3/deoplete/sources/ale.py	/^    def get_complete_position(self, context):$/;"	m	class:Source
get_config 	plugged/goto-preview/lua/goto-preview.lua	/^      get_config = function(data)$/;"	f
get_diff_state_flag	plugged/minimap.vim/autoload/minimap/vim.vim	/^function! s:get_diff_state_flag(state) abort$/;"	f
get_file_content	plugged/vim-multiple-cursors/spec/benchmark_spec.rb	/^def get_file_content()$/;"	f
get_file_content	plugged/vim-multiple-cursors/spec/multiple_cursors_spec.rb	/^def get_file_content()$/;"	f
get_highlight_range	plugged/minimap.vim/autoload/minimap/vim.vim	/^function! s:get_highlight_range(win_info) abort$/;"	f
get_highlights	plugged/toggleterm.nvim/lua/toggleterm/config.lua	/^local function get_highlights(conf)$/;"	f
get_hl	plugged/nvim-window-picker/tests/core/init_spec.lua	/^local function get_hl(name)$/;"	f
get_indent 	plugged/hlchunk.nvim/lua/hlchunk/utils/utils.lua	/^        get_indent = function(row)$/;"	f
get_indent_width	plugged/vim-pydocstring/autoload/pydocstring.vim	/^function! s:get_indent_width() abort$/;"	f
get_longest_line_cmd	plugged/minimap.vim/autoload/minimap/vim.vim	/^function! s:get_longest_line_cmd() abort$/;"	f
get_map_str	plugged/tagbar/autoload/tagbar.vim	/^function! s:get_map_str(map) abort$/;"	f
get_mods_status	plugged/hlchunk.nvim/lua/hlchunk/init.lua	/^local function get_mods_status(plugin_config)$/;"	f
get_newline_chr	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^local function get_newline_chr()$/;"	f
get_next_search_matchid	plugged/minimap.vim/autoload/minimap/vim.vim	/^function! s:get_next_search_matchid() abort$/;"	f
get_range	plugged/vim-pydocstring/autoload/pydocstring.vim	/^function! s:get_range() abort$/;"	f
get_subject_terminal	plugged/toggleterm.nvim/lua/toggleterm.lua	/^local function get_subject_terminal(callback)$/;"	f
get_text	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:get_text(region)$/;"	f
get_time_in_ms	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:get_time_in_ms()$/;"	f
get_virt_indent	plugged/hlchunk.nvim/lua/hlchunk/utils/utils.lua	/^local function get_virt_indent(rows_indent, line)$/;"	f
get_visual_region	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:get_visual_region(pos)$/;"	f
get_window_info	plugged/minimap.vim/autoload/minimap/vim.vim	/^function! s:get_window_info() abort$/;"	f
getchar	plugged/vim-surround/plugin/surround.vim	/^function! s:getchar()$/;"	f
gettime	plugged/tagbar/autoload/tagbar/debug.vim	/^    function! s:gettime() abort$/;"	f
got " .. type	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^    utils.notify("terminal.find expects a function, got " .. type(predicate), "error")$/;"	f
goto_markedwin	plugged/tagbar/autoload/tagbar.vim	/^function! s:goto_markedwin(...) abort$/;"	f
goto_tagbar	plugged/tagbar/autoload/tagbar.vim	/^function! s:goto_tagbar(...) abort$/;"	f
goto_win	plugged/tagbar/autoload/tagbar.vim	/^function! s:goto_win(winnr, ...) abort$/;"	f
handle_autocmd	plugged/minimap.vim/autoload/minimap/vim.vim	/^function! s:handle_autocmd(cmd) abort$/;"	f
handle_special_key	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:handle_special_key(key, mode)$/;"	f
handle_term_enter	plugged/toggleterm.nvim/lua/toggleterm.lua	/^local function handle_term_enter()$/;"	f
handle_term_leave	plugged/toggleterm.nvim/lua/toggleterm.lua	/^local function handle_term_leave()$/;"	f
handle_visual_IA_to_insert	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:handle_visual_IA_to_insert()$/;"	f
handle_visual_IA_to_normal	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:handle_visual_IA_to_normal()$/;"	f
has_treesitter	plugged/hlchunk.nvim/lua/hlchunk/utils/utils.lua	/^local function has_treesitter(bufnr)$/;"	f
hasfile	plugged/minimap.vim/bin/minimap_generator.bat	/^:hasfile$/;"	l
highlight_cursor	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:highlight_cursor(pos)$/;"	f
highlight_line	plugged/ale/autoload/ale/highlight.vim	/^function! s:highlight_line(bufnr, lnum, group) abort$/;"	f
highlight_range	plugged/ale/autoload/ale/highlight.vim	/^function! s:highlight_range(bufnr, range, group) abort$/;"	f
highlight_region	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:highlight_region(region)$/;"	f
hl	plugged/toggleterm.nvim/lua/toggleterm/ui.lua	/^local function hl(name) return "%#" .. name .. "#" end$/;"	f
hlchunk.setup 	plugged/hlchunk.nvim/lua/hlchunk/init.lua	/^hlchunk.setup = function(params)$/;"	f
hscale	plugged/minimap.vim/bin/minimap_generator.bat	/^set hscale=%1$/;"	v
i	plugged/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> i <NOP>$/;"	m
if type(cmd) 	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^  if type(cmd) == "function" then cmd = cmd() end$/;"	f
if type(predicate) ~	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^  if type(predicate) ~= "function" then$/;"	f
if type(shell) 	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^  if type(shell) == "function" then shell = shell() end$/;"	f
if type(value.fg) 	plugged/hlchunk.nvim/lua/hlchunk/base_mod.lua	/^            if type(value.fg) == "function" or type(value.bg) == "function" then$/;"	f
ignored	plugged/minimap.vim/autoload/minimap/vim.vim	/^function! s:ignored() abort$/;"	f
inRanges	plugged/nvim-window-picker/lua/window-picker/utf-8.lua	/^	local function inRanges(charCode)$/;"	f
indent_mod:disable	plugged/hlchunk.nvim/lua/hlchunk/mods/indent.lua	/^function indent_mod:disable()$/;"	f
indent_mod:enable_mod_autocmd	plugged/hlchunk.nvim/lua/hlchunk/mods/indent.lua	/^function indent_mod:enable_mod_autocmd()$/;"	f
indent_mod:render	plugged/hlchunk.nvim/lua/hlchunk/mods/indent.lua	/^function indent_mod:render()$/;"	f
indent_mod:render_line	plugged/hlchunk.nvim/lua/hlchunk/mods/indent.lua	/^function indent_mod:render_line(index, indent)$/;"	f
init	plugged/smoothcursor.nvim/lua/smoothcursor/callback.lua	/^local function init()$/;"	f
init 	lua/plugins/example.lua	/^      init = function()$/;"	f
initFoldState	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:initFoldState(known_files) abort dict$/;"	f
init_and_start	plugged/smoothcursor.nvim/lua/smoothcursor/init.lua	/^local function init_and_start()$/;"	f
init_settings	plugged/vim-multiple-cursors/plugin/multiple_cursors.vim	/^function! s:init_settings(settings)$/;"	f
init_var	plugged/tagbar/plugin/tagbar.vim	/^function! s:init_var(var, value) abort$/;"	f
inputreplacement	plugged/vim-surround/plugin/surround.vim	/^function! s:inputreplacement()$/;"	f
inputtarget	plugged/vim-surround/plugin/surround.vim	/^function! s:inputtarget()$/;"	f
insert	plugged/vim-surround/plugin/surround.vim	/^function! s:insert(...) " {{{1$/;"	f
insert_docstring	plugged/vim-pydocstring/autoload/pydocstring.vim	/^function! s:insert_docstring(docstrings, end_lineno) abort$/;"	f
isFoldable	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isFoldable() abort dict$/;"	f
isFoldable	plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:isFoldable() abort dict$/;"	f
isFolded	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isFolded() abort dict$/;"	f
isFolded	plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:isFolded() abort dict$/;"	f
isKindheader	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isKindheader() abort dict$/;"	f
isKindheader	plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:isKindheader() abort dict$/;"	f
isNormalTag	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isNormalTag() abort dict$/;"	f
isNormalTag	plugged/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:isNormalTag() abort dict$/;"	f
isPseudoTag	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isPseudoTag() abort dict$/;"	f
isPseudoTag	plugged/tagbar/autoload/tagbar/prototypes/pseudotag.vim	/^function! s:isPseudoTag() abort dict$/;"	f
isSplitTag	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:isSplitTag() abort dict$/;"	f
isSplitTag	plugged/tagbar/autoload/tagbar/prototypes/splittag.vim	/^function! s:isSplitTag() abort dict$/;"	f
is_cmd	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^local function is_cmd(shell) return shell:find("cmd") end$/;"	f
is_comment	plugged/hlchunk.nvim/lua/hlchunk/utils/utils.lua	/^local function is_comment(line)$/;"	f
is_enabled	plugged/smoothcursor.nvim/lua/smoothcursor/callback.lua	/^local function is_enabled()$/;"	f
is_floating	plugged/goto-preview/lua/goto-preview/lib.lua	/^local function is_floating(window_id)$/;"	f
is_pwsh	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^local function is_pwsh(shell) return shell:find("pwsh") or shell:find("powershell") end$/;"	f
is_stay_still 	plugged/smoothcursor.nvim/lua/smoothcursor/callback.lua	/^    is_stay_still = function(self)$/;"	f
is_suit_type	plugged/hlchunk.nvim/lua/hlchunk/utils/utils.lua	/^local function is_suit_type(node_type)$/;"	f
keys 	lua/plugins/example.lua	/^    keys = function()$/;"	f
known_files.get	plugged/tagbar/autoload/tagbar.vim	/^function! s:known_files.get(fname) abort dict$/;"	f
known_files.has	plugged/tagbar/autoload/tagbar.vim	/^function! s:known_files.has(fname) abort dict$/;"	f
known_files.put	plugged/tagbar/autoload/tagbar.vim	/^function! s:known_files.put(fileinfo, ...) abort dict$/;"	f
known_files.rm	plugged/tagbar/autoload/tagbar.vim	/^function! s:known_files.rm(fname) abort dict$/;"	f
l:prefix	plugged/vim-signature/autoload/signature/utils.vim	/^  let l:prefix = (has('gui_running') || (has('termguicolors') && &termguicolors) ? 'gui' : 'cterm')$/;"	v
l:sign_col_color	plugged/vim-signature/autoload/signature/utils.vim	/^  let l:sign_col_color = synIDattr(synIDtrans(hlID('SignColumn')), 'bg', l:prefix)$/;"	v
lastFunc 	plugged/nvim-window-picker/lua/window-picker/utf-8.lua	/^					lastFunc = function(cC)$/;"	f
last_char	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:last_char()$/;"	f
lazy.require 	plugged/toggleterm.nvim/lua/toggleterm/lazy.lua	/^lazy.require = function(require_path)$/;"	f
lazy_detect 	plugged/smoothcursor.nvim/lua/smoothcursor/callback.lua	/^  lazy_detect = function()$/;"	f
line) return line:sub	plugged/toggleterm.nvim/lua/toggleterm/utils.lua	/^    return vim.tbl_map(function(line) return line:sub(start_col, end_col) end, res.selected_lines)$/;"	f
line_num_mod:enable_mod_autocmd	plugged/hlchunk.nvim/lua/hlchunk/mods/line_num.lua	/^function line_num_mod:enable_mod_autocmd()$/;"	f
line_num_mod:render	plugged/hlchunk.nvim/lua/hlchunk/mods/line_num.lua	/^function line_num_mod:render()$/;"	f
local dismiss 	plugged/goto-preview/lua/goto-preview/lib.lua	/^  local dismiss = function()$/;"	f
local enter 	plugged/goto-preview/lua/goto-preview/lib.lua	/^  local enter = function()$/;"	f
local escape_pattern 	plugged/nvim-window-picker/dev/init.lua	/^local escape_pattern = function(text)$/;"	f
local find_end 	plugged/toggleterm.nvim/tests/terminal_spec.lua	/^      local find_end = function() return table.concat(stdout, ""):match(expected) end$/;"	f
local function set_term_name(name, term) term.display_name 	plugged/toggleterm.nvim/lua/toggleterm.lua	/^local function set_term_name(name, term) term.display_name = name end$/;"	f
local function_name 	plugged/hlchunk.nvim/lua/hlchunk/utils/time.lua	/^    local function_name = debug.getinfo(2, "n").name or "<anonymous>"$/;"	f
local handle 	plugged/goto-preview/lua/goto-preview/lib.lua	/^local handle = function(result, opts)$/;"	f
local handle_references 	plugged/goto-preview/lua/goto-preview/lib.lua	/^local handle_references = function(result)$/;"	f
local handler 	plugged/goto-preview/lua/goto-preview/lib.lua	/^local handler = function(lsp_call, opts)$/;"	f
local has_spawned 	plugged/toggleterm.nvim/tests/terminal_spec.lua	/^      local has_spawned = function() return table.concat(stdout, ""):match("SPAWNED") ~= nil end$/;"	f
local has_words_before 	lua/plugins/example.lua	/^      local has_words_before = function()$/;"	f
local highlight 	plugged/flare.nvim/lua/flare/init.lua	/^local highlight = function(buffer_number, ns_id, current_row_str, line_num, lcol)$/;"	f
local highlights 	plugged/toggleterm.nvim/lua/toggleterm/ui.lua	/^  local highlights = vim.tbl_map(function(hl_group_name)$/;"	f
local it 	plugged/nvim-window-picker/lua/window-picker/utf-8.lua	/^	local it = (function()$/;"	f
local legacy_handler 	plugged/goto-preview/lua/goto-preview/lib.lua	/^local legacy_handler = function(lsp_call, opts)$/;"	f
local ok, _ 	plugged/hlchunk.nvim/lua/hlchunk/base_mod.lua	/^    local ok, _ = pcall(function()$/;"	f
local ok, info 	plugged/hlchunk.nvim/lua/hlchunk/base_mod.lua	/^    local ok, info = pcall(function()$/;"	f
local run_action 	plugged/nvim-window-picker/dev/init.lua	/^local run_action = function()$/;"	f
local run_post_close_hook_function 	plugged/goto-preview/lua/goto-preview/lib.lua	/^local run_post_close_hook_function = function(buffer, new_window)$/;"	f
local run_post_open_hook_function 	plugged/goto-preview/lua/goto-preview/lib.lua	/^local run_post_open_hook_function = function(buffer, new_window)$/;"	f
local should_highlight 	plugged/flare.nvim/lua/flare/init.lua	/^local should_highlight = function(cursor_row, cursor_col, force)$/;"	f
local size2 	plugged/toggleterm.nvim/tests/terminal_spec.lua	/^      local size2 = function(_t)$/;"	f
local snapshot_cursor 	plugged/flare.nvim/lua/flare/init.lua	/^local snapshot_cursor = function()$/;"	f
local stack_floating_preview_windows 	plugged/goto-preview/lua/goto-preview/lib.lua	/^  local stack_floating_preview_windows = function()$/;"	f
local unload_packages 	plugged/nvim-window-picker/dev/init.lua	/^local unload_packages = function()$/;"	f
main	plugged/ale/test/script/block-padding-checker	/^def main():$/;"	f
main	plugged/ale/test/script/dumb_named_pipe_server.py	/^def main():$/;"	f
main	plugged/ale/test/script/dumb_tcp_client.py	/^def main():$/;"	f
main	plugged/ale/test/script/dumb_tcp_server.py	/^def main():$/;"	f
make_state_table_with_position	plugged/minimap.vim/autoload/minimap/vim.vim	/^function! s:make_state_table_with_position(pos) abort$/;"	f
make_state_table_with_range	plugged/minimap.vim/autoload/minimap/vim.vim	/^function! s:make_state_table_with_range(range,...) abort$/;"	f
mark_window	plugged/tagbar/autoload/tagbar.vim	/^function! s:mark_window() abort$/;"	f
matchadd	plugged/nvim-cursorline/lua/nvim-cursorline.lua	/^local function matchadd()$/;"	f
matchaddpos	plugged/ale/autoload/ale/highlight.vim	/^function! s:matchaddpos(group, pos_list) abort$/;"	f
matcher.fullResetOnNextFunc 	plugged/nvim-window-picker/lua/window-picker/utf-8.lua	/^	matcher.fullResetOnNextFunc = function(self)$/;"	f
matcher.fullResetOnNextStr 	plugged/nvim-window-picker/lua/window-picker/utf-8.lua	/^	matcher.fullResetOnNextStr = function(self)$/;"	f
matcher.functions[1] 	plugged/nvim-window-picker/lua/window-picker/utf-8.lua	/^	matcher.functions[1] = function(_)$/;"	f
matcher.nextFunc 	plugged/nvim-window-picker/lua/window-picker/utf-8.lua	/^	matcher.nextFunc = function(self)$/;"	f
matcher.nextStr 	plugged/nvim-window-picker/lua/window-picker/utf-8.lua	/^	matcher.nextStr = function(self)$/;"	f
matcher.process 	plugged/nvim-window-picker/lua/window-picker/utf-8.lua	/^	matcher.process = function(self, str, start)$/;"	f
matcher.strReset 	plugged/nvim-window-picker/lua/window-picker/utf-8.lua	/^	matcher.strReset = function(self)$/;"	f
matcherGenerator	plugged/nvim-window-picker/lua/window-picker/utf-8.lua	/^local function matcherGenerator(regex, plain)$/;"	f
maybe_map_scope	plugged/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:maybe_map_scope(scopestr) abort$/;"	f
message	plugged/ale/autoload/ale/codefix.vim	/^function! s:message(message) abort$/;"	f
message	plugged/ale/autoload/ale/completion.vim	/^function! s:message(message) abort$/;"	f
message	plugged/ale/autoload/ale/filerename.vim	/^function! s:message(message) abort$/;"	f
message	plugged/ale/autoload/ale/rename.vim	/^function! s:message(message) abort$/;"	f
minimap#vim#BufferToMap	plugged/minimap.vim/autoload/minimap/vim.vim	/^function! minimap#vim#BufferToMap(lnnum, buftotal, mmtotal) abort$/;"	f
minimap#vim#ClearColorSearch	plugged/minimap.vim/autoload/minimap/vim.vim	/^function! minimap#vim#ClearColorSearch() abort$/;"	f
minimap#vim#MinimapClose	plugged/minimap.vim/autoload/minimap/vim.vim	/^function! minimap#vim#MinimapClose() abort$/;"	f
minimap#vim#MinimapColorSearchGetSpans	plugged/minimap.vim/autoload/minimap/vim.vim	/^function! minimap#vim#MinimapColorSearchGetSpans(win_info, query) abort$/;"	f
minimap#vim#MinimapOpen	plugged/minimap.vim/autoload/minimap/vim.vim	/^function! minimap#vim#MinimapOpen() abort$/;"	f
minimap#vim#MinimapParseGitDiffLine	plugged/minimap.vim/autoload/minimap/vim.vim	/^function! minimap#vim#MinimapParseGitDiffLine(line, buffer_lines, mm_height) abort$/;"	f
minimap#vim#MinimapRefresh	plugged/minimap.vim/autoload/minimap/vim.vim	/^function! minimap#vim#MinimapRefresh() abort$/;"	f
minimap#vim#MinimapRescan	plugged/minimap.vim/autoload/minimap/vim.vim	/^function! minimap#vim#MinimapRescan() abort$/;"	f
minimap#vim#MinimapToggle	plugged/minimap.vim/autoload/minimap/vim.vim	/^function! minimap#vim#MinimapToggle() abort$/;"	f
minimap#vim#MinimapUpdateHighlight	plugged/minimap.vim/autoload/minimap/vim.vim	/^function! minimap#vim#MinimapUpdateHighlight() abort$/;"	f
minimap#vim#UpdateColorSearch	plugged/minimap.vim/autoload/minimap/vim.vim	/^function! minimap#vim#UpdateColorSearch(query) abort$/;"	f
minimap_buffer_enter_handler	plugged/minimap.vim/autoload/minimap/vim.vim	/^function! s:minimap_buffer_enter_handler() abort$/;"	f
minimap_color_git	plugged/minimap.vim/autoload/minimap/vim.vim	/^function! s:minimap_color_git(win_info) abort$/;"	f
minimap_color_search	plugged/minimap.vim/autoload/minimap/vim.vim	/^function! s:minimap_color_search(win_info, query) abort$/;"	f
minimap_color_search_get_spans	plugged/minimap.vim/autoload/minimap/vim.vim	/^function! s:minimap_color_search_get_spans(win_info, query) abort$/;"	f
minimap_diffoff	plugged/minimap.vim/autoload/minimap/vim.vim	/^function! s:minimap_diffoff() abort$/;"	f
minimap_move	plugged/minimap.vim/autoload/minimap/vim.vim	/^function! s:minimap_move() abort$/;"	f
minimap_parse_git_diff_line	plugged/minimap.vim/autoload/minimap/vim.vim	/^function! s:minimap_parse_git_diff_line(line, buffer_lines, mm_height) abort$/;"	f
minimap_test_calls_to_update_minimap	plugged/minimap.vim/t/utility_tests.vim	/^function! s:minimap_test_calls_to_update_minimap()$/;"	f
minimap_test_git_long_file	plugged/minimap.vim/t/git_tests.vim	/^function! s:minimap_test_git_long_file()$/;"	f
minimap_test_git_multiline	plugged/minimap.vim/t/git_tests.vim	/^function! s:minimap_test_git_multiline()$/;"	f
minimap_test_git_short_file	plugged/minimap.vim/t/git_tests.vim	/^function! s:minimap_test_git_short_file()$/;"	f
minimap_test_git_span_mm_border	plugged/minimap.vim/t/git_tests.vim	/^function! s:minimap_test_git_span_mm_border()$/;"	f
minimap_test_git_string_extras	plugged/minimap.vim/t/git_tests.vim	/^function! s:minimap_test_git_string_extras()$/;"	f
minimap_test_search	plugged/minimap.vim/t/search_tests.vim	/^function! s:minimap_test_search()$/;"	f
minimap_test_search_beginning_of_file	plugged/minimap.vim/t/search_tests.vim	/^function! s:minimap_test_search_beginning_of_file()$/;"	f
minimap_test_search_beginning_of_line	plugged/minimap.vim/t/search_tests.vim	/^function! s:minimap_test_search_beginning_of_line()$/;"	f
minimap_test_search_end_of_line	plugged/minimap.vim/t/search_tests.vim	/^function! s:minimap_test_search_end_of_line()$/;"	f
minimap_test_search_history	plugged/minimap.vim/t/search_tests.vim	/^function! s:minimap_test_search_history()$/;"	f
minimap_test_search_long_match	plugged/minimap.vim/t/search_tests.vim	/^function! s:minimap_test_search_long_match()$/;"	f
minimap_test_search_many_results	plugged/minimap.vim/t/search_tests.vim	/^function! s:minimap_test_search_many_results()$/;"	f
minimap_test_search_multi_per_line	plugged/minimap.vim/t/search_tests.vim	/^function! s:minimap_test_search_multi_per_line()$/;"	f
minimap_test_search_spanning_a_line	plugged/minimap.vim/t/search_tests.vim	/^function! s:minimap_test_search_spanning_a_line()$/;"	f
minimap_test_search_tear_down	plugged/minimap.vim/t/search_tests.vim	/^function! s:minimap_test_search_tear_down()$/;"	f
minimap_test_utility	plugged/minimap.vim/t/utility_tests.vim	/^function! s:minimap_test_utility()$/;"	f
minimap_update_color_search	plugged/minimap.vim/autoload/minimap/vim.vim	/^function! s:minimap_update_color_search(query) abort$/;"	f
minimap_win_enter	plugged/minimap.vim/autoload/minimap/vim.vim	/^function! s:minimap_win_enter() abort$/;"	f
minus	plugged/nvim-window-picker/lua/window-picker/utf-8.lua	/^	local function minus(func)$/;"	f
module.aleVar 	plugged/ale/lua/ale/diagnostics.lua	/^module.aleVar = function(buffer, key)$/;"	f
module.sendAleResultsToDiagnostics 	plugged/ale/lua/ale/diagnostics.lua	/^module.sendAleResultsToDiagnostics = function(buffer, loclist)$/;"	f
multiple_cursors#debug	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! multiple_cursors#debug()$/;"	f
multiple_cursors#find	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! multiple_cursors#find(start, end, pattern)$/;"	f
multiple_cursors#get_latency_debug_file	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! multiple_cursors#get_latency_debug_file()$/;"	f
multiple_cursors#new	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! multiple_cursors#new(mode, word_boundary)$/;"	f
multiple_cursors#prev	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! multiple_cursors#prev()$/;"	f
multiple_cursors#quit	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! multiple_cursors#quit()$/;"	f
multiple_cursors#select_all	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! multiple_cursors#select_all(mode, word_boundary)$/;"	f
multiple_cursors#skip	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! multiple_cursors#skip()$/;"	f
name 	plugged/toggleterm.nvim/lua/toggleterm/commandline.lua	/^  name = function() return {} end,$/;"	f
name_formatter 	plugged/toggleterm.nvim/lua/toggleterm/config.lua	/^    name_formatter = function(term) return fmt("%d:%s", term.id, term:_display_name()) end,$/;"	f
next_id	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^local function next_id()$/;"	f
nofile	plugged/minimap.vim/bin/minimap_generator.bat	/^:nofile$/;"	l
o	plugged/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> o <NOP>$/;"	m
on_stdout 	plugged/toggleterm.nvim/tests/terminal_spec.lua	/^        on_stdout = function(_, _, lines) vim.list_extend(stdout, lines) end,$/;"	f
on_term_open	plugged/toggleterm.nvim/lua/toggleterm.lua	/^local function on_term_open()$/;"	f
on_vim_resized	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^local function on_vim_resized(id)$/;"	f
openFold	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:openFold() abort dict$/;"	f
openFold	plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:openFold() abort dict$/;"	f
openKindFold	plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:openKindFold(kind) abort dict$/;"	f
openParents	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:openParents() abort dict$/;"	f
open_references_previewer	plugged/goto-preview/lua/goto-preview/lib.lua	/^local function open_references_previewer(prompt_title, items)$/;"	f
open_window	plugged/minimap.vim/autoload/minimap/vim.vim	/^function! s:open_window() abort$/;"	f
opener	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^local function opener(size, term)$/;"	f
opfunc	plugged/vim-surround/plugin/surround.vim	/^function! s:opfunc(type, ...) abort " {{{1$/;"	f
opfunc2	plugged/vim-surround/plugin/surround.vim	/^function! s:opfunc2(...) abort$/;"	f
opts 	lua/plugins/example.lua	/^    opts = function()$/;"	f
opts 	lua/plugins/example.lua	/^    opts = function(_, opts)$/;"	f
opts) M.exec_command	plugged/toggleterm.nvim/lua/toggleterm.lua	/^    function(opts) M.exec_command(opts.args, opts.count) end,$/;"	f
opts) M.toggle_command	plugged/toggleterm.nvim/lua/toggleterm.lua	/^    function(opts) M.toggle_command(opts.args, opts.count) end,$/;"	f
padding	plugged/minimap.vim/bin/minimap_generator.bat	/^set padding=%3$/;"	v
parseJSON	plugged/ale/autoload/ale/handlers/eslint.vim	/^function! s:parseJSON(buffer, lines) abort$/;"	f
parseLines	plugged/ale/autoload/ale/handlers/eslint.vim	/^function! s:parseLines(buffer, lines) abort$/;"	f
path) return u.concat_without_empty	plugged/toggleterm.nvim/lua/toggleterm/commandline.lua	/^      function(path) return u.concat_without_empty({ base_path, path }, "\/") end,$/;"	f
place_sign	plugged/smoothcursor.nvim/lua/smoothcursor/callback.lua	/^local function place_sign(position, name)$/;"	f
pos	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:pos(mark)$/;"	f
post_close_hook 	lua/config/lazy.lua	/^  post_close_hook = nil, -- A function taking two arguments, a buffer and a window to be ran as a hook.$/;"	f
post_close_hook 	plugged/goto-preview/lua/goto-preview.lua	/^    post_close_hook = nil, -- A function taking two arguments, a buffer and a window to be ran as a hook.$/;"	f
post_open_hook 	lua/config/lazy.lua	/^  post_open_hook = nil, -- A function taking two arguments, a buffer and a window to be ran as a hook.$/;"	f
post_open_hook 	plugged/goto-preview/lua/goto-preview.lua	/^    post_open_hook = nil, -- A function taking two arguments, a buffer and a window to be ran as a hook.$/;"	f
print_help	plugged/ale/test/script/custom-linting-rules	/^function print_help() {$/;"	f
print_lsp_error	plugged/goto-preview/lua/goto-preview.lua	/^local function print_lsp_error(lsp_call)$/;"	f
print_warning_msg	plugged/minimap.vim/autoload/minimap/vim.vim	/^function! s:print_warning_msg(msg) abort$/;"	f
process	plugged/vim-surround/plugin/surround.vim	/^function! s:process(string)$/;"	f
process_user_input	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:process_user_input()$/;"	f
push_front 	plugged/smoothcursor.nvim/lua/smoothcursor/callback.lua	/^    push_front = function(self, data)$/;"	f
pydocstring#format	plugged/vim-pydocstring/autoload/pydocstring.vim	/^function! pydocstring#format() abort$/;"	f
pydocstring#insert	plugged/vim-pydocstring/autoload/pydocstring.vim	/^function! pydocstring#insert(...) abort$/;"	f
q	plugged/ale/ftplugin/ale-fix-suggest.vim	/^noremap <buffer> q :q!<CR>$/;"	m
q	plugged/ale/ftplugin/ale-info.vim	/^noremap <buffer> q :q!<CR>$/;"	m
q	plugged/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> q :q!<CR>$/;"	m
q	plugged/ale/ftplugin/ale-preview.vim	/^noremap <buffer> q :q!<CR>$/;"	m
question	plugged/nvim-window-picker/lua/window-picker/utf-8.lua	/^	local function question(func)$/;"	f
quit_last	plugged/minimap.vim/autoload/minimap/vim.vim	/^function! s:quit_last() abort$/;"	f
redraw	plugged/vim-surround/plugin/surround.vim	/^function! s:redraw()$/;"	f
refresh_minimap	plugged/minimap.vim/autoload/minimap/vim.vim	/^function! s:refresh_minimap(force) abort$/;"	f
region	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:region(start_mark, end_mark)$/;"	f
reindent	plugged/vim-surround/plugin/surround.vim	/^function! s:reindent() abort " {{{1$/;"	f
removeChild	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:removeChild(tag) dict abort$/;"	f
removeTag	plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:removeTag(tag) dict abort$/;"	f
remove_comment_lines	plugged/ale/test/script/block-padding-checker	/^def remove_comment_lines(line_iter):$/;"	f
render_highlight_table	plugged/minimap.vim/autoload/minimap/vim.vim	/^function! s:render_highlight_table(table) abort$/;"	f
render_minimap	plugged/minimap.vim/autoload/minimap/vim.vim	/^function! s:render_minimap(mmwinnr, bufnr, fname, ftype) abort$/;"	f
replace	plugged/nvim-window-picker/lua/window-picker/utf-8.lua	/^local function replace(repl, args)$/;"	f
replace_signs	plugged/smoothcursor.nvim/lua/smoothcursor/callback.lua	/^local function replace_signs()$/;"	f
request_term_name	plugged/toggleterm.nvim/lua/toggleterm.lua	/^local function request_term_name(term)$/;"	f
reset	plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:reset() abort dict$/;"	f
return ui.find_open_windows(function(buf) return buf 	plugged/toggleterm.nvim/tests/terminal_spec.lua	/^  return ui.find_open_windows(function(buf) return buf == term.bufnr end)$/;"	f
return vim.tbl_map(function(option) return key .. "	plugged/toggleterm.nvim/lua/toggleterm/commandline.lua	/^      return vim.tbl_map(function(option) return key .. "=" .. option end, options[key](value))$/;"	f
return vim.tbl_map(function(option) return option .. "	plugged/toggleterm.nvim/lua/toggleterm/commandline.lua	/^    return vim.tbl_map(function(option) return option .. "=" end, available_options)$/;"	f
revert_highlight_fix	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:revert_highlight_fix()$/;"	f
revert_mode	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:revert_mode(from, to)$/;"	f
run_system	plugged/tagbar/autoload/tagbar.vim	/^function! s:run_system(cmd, version) abort$/;"	f
s:CFG_TO_LSP_SEVERITY	plugged/ale/autoload/ale/lsp_window.vim	/^let s:CFG_TO_LSP_SEVERITY = {$/;"	v
s:COMPLETION_TRIGGER_CHARACTER	plugged/ale/autoload/ale/lsp/message.vim	/^let s:COMPLETION_TRIGGER_CHARACTER = 2$/;"	v
s:COMPLETION_TRIGGER_INVOKED	plugged/ale/autoload/ale/lsp/message.vim	/^let s:COMPLETION_TRIGGER_INVOKED = 1$/;"	v
s:Cursor	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:Cursor = {}$/;"	v
s:CursorManager	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:CursorManager = {}$/;"	v
s:INTERNAL_ERROR	plugged/ale/autoload/ale/lsp/response.vim	/^let s:INTERNAL_ERROR = -32603$/;"	v
s:INVALID_PARAMS	plugged/ale/autoload/ale/lsp/response.vim	/^let s:INVALID_PARAMS = -32602$/;"	v
s:INVALID_REQUEST	plugged/ale/autoload/ale/lsp/response.vim	/^let s:INVALID_REQUEST = -32600$/;"	v
s:LSP_INSERT_TEXT_FORMAT_PLAIN	plugged/ale/autoload/ale/completion.vim	/^let s:LSP_INSERT_TEXT_FORMAT_PLAIN = 1$/;"	v
s:LSP_INSERT_TEXT_FORMAT_SNIPPET	plugged/ale/autoload/ale/completion.vim	/^let s:LSP_INSERT_TEXT_FORMAT_SNIPPET = 2$/;"	v
s:LSP_MESSAGE_TYPE_DISABLED	plugged/ale/autoload/ale/lsp_window.vim	/^let s:LSP_MESSAGE_TYPE_DISABLED = 0$/;"	v
s:LSP_MESSAGE_TYPE_ERROR	plugged/ale/autoload/ale/lsp_window.vim	/^let s:LSP_MESSAGE_TYPE_ERROR = 1$/;"	v
s:LSP_MESSAGE_TYPE_INFORMATION	plugged/ale/autoload/ale/lsp_window.vim	/^let s:LSP_MESSAGE_TYPE_INFORMATION = 3$/;"	v
s:LSP_MESSAGE_TYPE_LOG	plugged/ale/autoload/ale/lsp_window.vim	/^let s:LSP_MESSAGE_TYPE_LOG = 4$/;"	v
s:LSP_MESSAGE_TYPE_WARNING	plugged/ale/autoload/ale/lsp_window.vim	/^let s:LSP_MESSAGE_TYPE_WARNING = 2$/;"	v
s:MAX_COL_SIZE	plugged/ale/autoload/ale/highlight.vim	/^let s:MAX_COL_SIZE = 1073741824 " pow(2, 30)$/;"	v
s:MAX_POS_VALUES	plugged/ale/autoload/ale/highlight.vim	/^let s:MAX_POS_VALUES = 8$/;"	v
s:METHOD_NOT_FOUND	plugged/ale/autoload/ale/lsp/response.vim	/^let s:METHOD_NOT_FOUND = -32601$/;"	v
s:PARSE_ERROR	plugged/ale/autoload/ale/lsp/response.vim	/^let s:PARSE_ERROR = -32700$/;"	v
s:REQUEST_CANCELLED	plugged/ale/autoload/ale/lsp/response.vim	/^let s:REQUEST_CANCELLED = -32800$/;"	v
s:SERVER_ERROR_END	plugged/ale/autoload/ale/lsp/response.vim	/^let s:SERVER_ERROR_END = -32000$/;"	v
s:SERVER_ERROR_START	plugged/ale/autoload/ale/lsp/response.vim	/^let s:SERVER_ERROR_START = -32099$/;"	v
s:SERVER_NOT_INITIALIZED	plugged/ale/autoload/ale/lsp/response.vim	/^let s:SERVER_NOT_INITIALIZED = -32002$/;"	v
s:SEVERITY_ERROR	plugged/ale/autoload/ale/lsp/response.vim	/^let s:SEVERITY_ERROR = 1$/;"	v
s:SEVERITY_HINT	plugged/ale/autoload/ale/lsp/response.vim	/^let s:SEVERITY_HINT = 4$/;"	v
s:SEVERITY_INFORMATION	plugged/ale/autoload/ale/lsp/response.vim	/^let s:SEVERITY_INFORMATION = 3$/;"	v
s:SEVERITY_WARNING	plugged/ale/autoload/ale/lsp/response.vim	/^let s:SEVERITY_WARNING = 2$/;"	v
s:STATE_CURSOR	plugged/minimap.vim/autoload/minimap/vim.vim	/^let s:STATE_CURSOR       = 0b00001$/;"	v
s:STATE_DIFF_ADD	plugged/minimap.vim/autoload/minimap/vim.vim	/^let s:STATE_DIFF_ADD     = 0b00100$/;"	v
s:STATE_DIFF_MOD	plugged/minimap.vim/autoload/minimap/vim.vim	/^let s:STATE_DIFF_MOD     = 0b01000$/;"	v
s:STATE_DIFF_RM	plugged/minimap.vim/autoload/minimap/vim.vim	/^let s:STATE_DIFF_RM      = 0b00010$/;"	v
s:STATE_WINDOW_RANGE	plugged/minimap.vim/autoload/minimap/vim.vim	/^let s:STATE_WINDOW_RANGE = 0b10000$/;"	v
s:State	plugged/tagbar/autoload/tagbar/state.vim	/^let s:State = {$/;"	v
s:UNKNOWN_ERROR_CODE	plugged/ale/autoload/ale/lsp/response.vim	/^let s:UNKNOWN_ERROR_CODE = -32001$/;"	v
s:__ale_julia_project_filenames	plugged/ale/autoload/ale/julia.vim	/^let s:__ale_julia_project_filenames = ['REQUIRE', 'Manifest.toml', 'Project.toml']$/;"	v
s:alphabets	plugged/vim-cursorword/autoload/cursorword.vim	/^let s:alphabets = '^[\\x00-\\x7f\\xb5\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u01bf\\u01c4-\\u02af\\u0370-\\u0373\\u0376\\u0377\\u0386-\\u0481\\u048a-\\u052f]\\+$'$/;"	v
s:autocommands_done	plugged/tagbar/autoload/tagbar.vim	/^let s:autocommands_done = 0$/;"	v
s:bad_input	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:bad_input = 0$/;"	v
s:before_function_called	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:before_function_called = 0$/;"	v
s:begin_failed_skip_pattern	plugged/ale/ale_linters/perl/perl.vim	/^let s:begin_failed_skip_pattern = '\\v' . join([$/;"	v
s:bin_dir	plugged/ale/autoload/ale/python.vim	/^let s:bin_dir = has('unix') ? 'bin' : 'Scripts'$/;"	v
s:bin_dir	plugged/minimap.vim/autoload/minimap/vim.vim	/^let s:bin_dir = expand('<sfile>:p:h:h:h').'\/bin\/'$/;"	v
s:buffer_data	plugged/ale/autoload/ale/command.vim	/^    let s:buffer_data = {}$/;"	v
s:buffer_seqno	plugged/tagbar/autoload/tagbar.vim	/^let s:buffer_seqno = 0$/;"	v
s:cached_map	plugged/ale/autoload/ale/filetypes.vim	/^let s:cached_map = {}$/;"	v
s:callbacks	plugged/minimap.vim/autoload/minimap/vim.vim	/^let s:callbacks = {$/;"	v
s:channel_map	plugged/ale/autoload/ale/socket.vim	/^let s:channel_map = get(s:, 'channel_map', {})$/;"	v
s:char	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:char = ''$/;"	v
s:checked_ctags	plugged/tagbar/autoload/tagbar.vim	/^let s:checked_ctags       = 0$/;"	v
s:checked_ctags_types	plugged/tagbar/autoload/tagbar.vim	/^let s:checked_ctags_types = 0$/;"	v
s:chunks	plugged/minimap.vim/autoload/minimap/vim.vim	/^let s:chunks = ['']$/;"	v
s:classpath_sep	plugged/ale/ale_linters/java/javac.vim	/^let s:classpath_sep = has('unix') ? ':' : ';'$/;"	v
s:classpath_sep	plugged/ale/ale_linters/kotlin/kotlinc.vim	/^let s:classpath_sep = has('unix') ? ':' : ';'$/;"	v
s:close_timer	plugged/beacon.nvim/plugin/beacon.vim	/^let s:close_timer = 0$/;"	v
s:cm	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:cm = s:CursorManager.new()$/;"	v
s:codefix_map	plugged/ale/autoload/ale/codefix.vim	/^let s:codefix_map = {}$/;"	v
s:col_end_patterns	plugged/ale/autoload/ale/handlers/eslint.vim	/^let s:col_end_patterns = [$/;"	v
s:command_output	plugged/ale/autoload/ale/assert.vim	/^let s:command_output = []$/;"	v
s:compare_typeinfo	plugged/tagbar/autoload/tagbar/sorting.vim	/^let s:compare_typeinfo = {}$/;"	v
s:compile_commands_cache	plugged/ale/autoload/ale/c.vim	/^    let s:compile_commands_cache = {}$/;"	v
s:connections	plugged/ale/autoload/ale/lsp.vim	/^let s:connections = get(s:, 'connections', {})$/;"	v
s:ctags_is_uctags	plugged/tagbar/autoload/tagbar.vim	/^let s:ctags_is_uctags     = 0$/;"	v
s:current_ale_version	plugged/ale/autoload/ale.vim	/^let s:current_ale_version = [3, 3, 0]$/;"	v
s:cursor_timer	plugged/ale/autoload/ale/cursor.vim	/^let s:cursor_timer = -1$/;"	v
s:cursor_timer	plugged/ale/autoload/ale/virtualtext.vim	/^let s:cursor_timer = get(s:, 'cursor_timer', -1)$/;"	v
s:debug_enabled	plugged/tagbar/autoload/tagbar/debug.vim	/^let s:debug_enabled = 0$/;"	v
s:debug_file	plugged/tagbar/autoload/tagbar/debug.vim	/^let s:debug_file = ''$/;"	v
s:default_ale_linter_aliases	plugged/ale/autoload/ale/linter.vim	/^let s:default_ale_linter_aliases = {$/;"	v
s:default_ale_linters	plugged/ale/autoload/ale/linter.vim	/^let s:default_ale_linters = {$/;"	v
s:default_normal_maps	plugged/vim-multiple-cursors/plugin/multiple_cursors.vim	/^let s:default_normal_maps = {'!':1, '@':1, '=':1, 'q':1, 'r':1, 't':1, 'T':1, 'y':1, '[':1, ']':1, '\\':1, 'd':1, 'f':1, 'F':1, 'g':1, '"':1, 'z':1, 'c':1, 'm':1, '<':1, '>':1}$/;"	v
s:default_registry	plugged/ale/autoload/ale/fix/registry.vim	/^let s:default_registry = {$/;"	v
s:default_shell	plugged/minimap.vim/autoload/minimap/vim.vim	/^    let s:default_shell = 'cmd.exe'$/;"	v
s:default_shell	plugged/minimap.vim/autoload/minimap/vim.vim	/^    let s:default_shell = 'sh'$/;"	v
s:default_shellflag	plugged/minimap.vim/autoload/minimap/vim.vim	/^    let s:default_shellflag = '-c'$/;"	v
s:default_shellflag	plugged/minimap.vim/autoload/minimap/vim.vim	/^    let s:default_shellflag = '\/s \/c'$/;"	v
s:default_visual_maps	plugged/vim-multiple-cursors/plugin/multiple_cursors.vim	/^let s:default_visual_maps = {'i':1, 'a':1, 'f':1, 'F':1, 't':1, 'T':1}$/;"	v
s:delay	plugged/vim-cursorword/autoload/cursorword.vim	/^let s:delay = get(g:, 'cursorword_delay', 50)$/;"	v
s:delayed_update_files	plugged/tagbar/autoload/tagbar.vim	/^let s:delayed_update_files = []$/;"	v
s:emulate_virt	plugged/ale/autoload/ale/virtualtext.vim	/^        let s:emulate_virt = !has('patch-9.0.0297')$/;"	v
s:emulate_virt	plugged/ale/autoload/ale/virtualtext.vim	/^    let s:emulate_virt = 0$/;"	v
s:enable_neovim	plugged/ale/ale_linters/vim/vint.vim	/^let s:enable_neovim = has('nvim') ? ' --enable-neovim' : ''$/;"	v
s:end_col_pattern_map	plugged/ale/ale_linters/python/flake8.vim	/^let s:end_col_pattern_map = {$/;"	v
s:end_col_pattern_map	plugged/ale/ale_linters/python/flakehell.vim	/^let s:end_col_pattern_map = {$/;"	v
s:end_col_patterns	plugged/ale/ale_linters/nim/nimcheck.vim	/^let s:end_col_patterns = [$/;"	v
s:executable_cache_map	plugged/ale/autoload/ale/engine.vim	/^    let s:executable_cache_map = {}$/;"	v
s:executables	plugged/ale/autoload/ale/handlers/eslint.vim	/^let s:executables = [$/;"	v
s:executables	plugged/ale/autoload/ale/handlers/solhint.vim	/^let s:executables = [$/;"	v
s:expand_bufnr	plugged/tagbar/autoload/tagbar.vim	/^let s:expand_bufnr = -1$/;"	v
s:fade_timer	plugged/beacon.nvim/plugin/beacon.vim	/^let s:fade_timer = 0$/;"	v
s:fake_buf	plugged/beacon.nvim/plugin/beacon.vim	/^    let s:fake_buf = nvim_create_buf(v:false, v:true)$/;"	v
s:filerename_map	plugged/ale/autoload/ale/filerename.vim	/^let s:filerename_map = {}$/;"	v
s:float	plugged/beacon.nvim/plugin/beacon.vim	/^let s:float = 0 " floating win id$/;"	v
s:format	plugged/ale/ale_linters/vim/vint.vim	/^let s:format = '-f "{file_path}:{line_number}:{column_number}: {severity}: {policy_name} - {description} (see {reference})"'$/;"	v
s:from_mode	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:from_mode = ''$/;"	v
s:getcmdwintype_exists	plugged/ale/autoload/ale.vim	/^let s:getcmdwintype_exists = exists('*getcmdwintype')$/;"	v
s:global_variable_list	plugged/ale/autoload/ale/debugging.vim	/^let s:global_variable_list = [$/;"	v
s:go_to_definition_map	plugged/ale/autoload/ale/definition.vim	/^let s:go_to_definition_map = {}$/;"	v
s:has_features	plugged/ale/plugin/ale.vim	/^    let s:has_features = has('timers') && exists('*job_start') && exists('*ch_close_in')$/;"	v
s:has_features	plugged/ale/plugin/ale.vim	/^    let s:has_features = has('timers') && has('nvim-0.2.0')$/;"	v
s:has_nvim_highlight	plugged/ale/autoload/ale/highlight.vim	/^let s:has_nvim_highlight = exists('*nvim_buf_add_highlight') && exists('*nvim_buf_clear_namespace')$/;"	v
s:has_virt_text	plugged/ale/autoload/ale/virtualtext.vim	/^        let s:has_virt_text = 1$/;"	v
s:has_virt_text	plugged/ale/autoload/ale/virtualtext.vim	/^    let s:has_virt_text = 0$/;"	v
s:hi_group_cursor	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:hi_group_cursor = 'multiple_cursors_cursor'$/;"	v
s:hi_group_visual	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:hi_group_visual = 'multiple_cursors_visual'$/;"	v
s:hl_list	plugged/ale/autoload/ale/virtualtext.vim	/^let s:hl_list = get(s:, 'hl_list', [])$/;"	v
s:hover_map	plugged/ale/autoload/ale/hover.vim	/^let s:hover_map = {}$/;"	v
s:ics	plugged/tagbar/syntax/tagbar.vim	/^let s:ics = escape(join(g:tagbar_iconchars, ''), ']^\\-')$/;"	v
s:init_done	plugged/tagbar/autoload/tagbar.vim	/^let s:init_done = 0$/;"	v
s:init_path	plugged/ale/autoload/ale/gradle.vim	/^let s:init_path = has('win32')$/;"	v
s:inline_pattern	plugged/ale/autoload/ale/handlers/gcc.vim	/^let s:inline_pattern = '\\v inlined from .* at \\<stdin\\>:(\\d+):(\\d+):$'$/;"	v
s:insert_leave_timer	plugged/ale/autoload/ale/events.vim	/^    let s:insert_leave_timer = -1$/;"	v
s:is_maximized	plugged/tagbar/autoload/tagbar.vim	/^let s:is_maximized    = 0$/;"	v
s:job_kill_timers	plugged/ale/autoload/ale/job.vim	/^    let s:job_kill_timers = {}$/;"	v
s:job_map	plugged/ale/autoload/ale/job.vim	/^    let s:job_map = {}$/;"	v
s:known_files	plugged/tagbar/autoload/tagbar.vim	/^let s:known_files = {$/;"	v
s:language_id_of_filetype	plugged/ale/autoload/ale/handlers/ocamllsp.vim	/^let s:language_id_of_filetype = {$/;"	v
s:languages	plugged/ale/autoload/ale/fixers/uncrustify.vim	/^let s:languages = {$/;"	v
s:last_alt_bufnr	plugged/tagbar/autoload/tagbar.vim	/^let s:last_alt_bufnr = -1$/;"	v
s:last_done_pos	plugged/ale/autoload/ale/completion.vim	/^let s:last_done_pos = []$/;"	v
s:last_highlight_tline	plugged/tagbar/autoload/tagbar.vim	/^let s:last_highlight_tline = 0$/;"	v
s:last_list	plugged/ale/autoload/ale/preview.vim	/^    let s:last_list = []$/;"	v
s:last_message	plugged/ale/autoload/ale/virtualtext.vim	/^let s:last_message = ''$/;"	v
s:last_options	plugged/ale/autoload/ale/preview.vim	/^    let s:last_options = {}$/;"	v
s:last_pattern_options	plugged/ale/autoload/ale/pattern_options.vim	/^let s:last_pattern_options = {}$/;"	v
s:last_pos	plugged/ale/autoload/ale/hover.vim	/^let s:last_pos = [0, 0, 0]$/;"	v
s:last_pos	plugged/ale/autoload/ale/virtualtext.vim	/^let s:last_pos = get(s:, 'last_pos', [0, 0, 0])$/;"	v
s:last_pos	plugged/minimap.vim/autoload/minimap/vim.vim	/^let s:last_pos = {}$/;"	v
s:last_range	plugged/minimap.vim/autoload/minimap/vim.vim	/^let s:last_range = {}$/;"	v
s:last_virt	plugged/ale/autoload/ale/virtualtext.vim	/^    let s:last_virt = -1$/;"	v
s:latency_debug_file	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:latency_debug_file = ''$/;"	v
s:len_cache	plugged/minimap.vim/autoload/minimap/vim.vim	/^let s:len_cache = {}$/;"	v
s:lint_timer	plugged/ale/autoload/ale.vim	/^let s:lint_timer = -1$/;"	v
s:linters	plugged/ale/autoload/ale/linter.vim	/^let s:linters = {}$/;"	v
s:lisp_regex	plugged/ale/autoload/ale/completion.vim	/^let s:lisp_regex = '\\v[a-zA-Z_\\-][a-zA-Z_\\-0-9]*$'$/;"	v
s:lsp_linter_map	plugged/ale/autoload/ale/lsp_linter.vim	/^    let s:lsp_linter_map = {}$/;"	v
s:lspconfig_map	plugged/ale/autoload/ale/engine/ignore.vim	/^let s:lspconfig_map = {$/;"	v
s:minimap_cache	plugged/minimap.vim/autoload/minimap/vim.vim	/^let s:minimap_cache = {}$/;"	v
s:minimap_gen	plugged/minimap.vim/autoload/minimap/vim.vim	/^    let s:minimap_gen = s:bin_dir.'minimap_generator.bat'$/;"	v
s:minimap_gen	plugged/minimap.vim/autoload/minimap/vim.vim	/^    let s:minimap_gen = s:bin_dir.'minimap_generator.sh'$/;"	v
s:nearby_disabled	plugged/tagbar/autoload/tagbar.vim	/^let s:nearby_disabled = 0$/;"	v
s:new_window	plugged/tagbar/autoload/tagbar.vim	/^let s:new_window      = 1$/;"	v
s:ns_id	plugged/ale/autoload/ale/highlight.vim	/^    let s:ns_id = nvim_create_namespace('ale_highlight')$/;"	v
s:ns_id	plugged/ale/autoload/ale/virtualtext.vim	/^        let s:ns_id = nvim_create_namespace('ale')$/;"	v
s:omni_start_map	plugged/ale/autoload/ale/completion.vim	/^let s:omni_start_map = {$/;"	v
s:partial_timers	plugged/ale/autoload/ale/util.vim	/^    let s:partial_timers = {}$/;"	v
s:paste_buffer_temporary_text	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:paste_buffer_temporary_text = ''$/;"	v
s:paste_buffer_temporary_type	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:paste_buffer_temporary_type = ''$/;"	v
s:path_format_regex	plugged/ale/autoload/ale/command.vim	/^let s:path_format_regex = '\\v\\%s(%(:h|:t|:r|:e)*)'$/;"	v
s:pattern	plugged/ale/ale_linters/desktop/desktop_file_validate.vim	/^let s:pattern = '\\v^(.+): ([a-z]+): (.+)$'$/;"	v
s:pattern	plugged/ale/ale_linters/json/jq.vim	/^let s:pattern = '^parse error: \\(.\\+\\) at line \\(\\d\\+\\), column \\(\\d\\+\\)$'$/;"	v
s:pattern	plugged/ale/autoload/ale/handlers/gcc.vim	/^let s:pattern = '\\v^([a-zA-Z]?:?[^:]+):(\\d+)?:?(\\d+)?:? ([^:]+): (.+)$'$/;"	v
s:pattern	plugged/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\(\\S\\@<![' . s:ics . ' ]\\)\\@<=#\\([^-+# ]\\)\\@='$/;"	v
s:pattern	plugged/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\(\\S\\@<![' . s:ics . ' ]\\)\\@<=+\\([^-+# ]\\)\\@='$/;"	v
s:pattern	plugged/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\(\\S\\@<![' . s:ics . ' ]\\)\\@<=-\\([^-+# ]\\)\\@='$/;"	v
s:pattern	plugged/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\(\\S\\@<![' . s:ics . '][-+# ]\\?\\)\\@<=[^*(]\\+\\(\\*\\?\\(([^)]\\+)\\)\\? :\\)\\@='$/;"	v
s:pattern	plugged/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\(^[' . s:ics . '] \\?\\)\\@3<=[^-+: ]\\+[^:]\\+$'$/;"	v
s:pattern	plugged/tagbar/syntax/tagbar.vim	/^let s:pattern = '\\S\\@<![' . s:ics . ']\\([-+# ]\\?\\)\\@='$/;"	v
s:paused	plugged/tagbar/autoload/tagbar.vim	/^let s:paused = 0$/;"	v
s:pragma_error	plugged/ale/autoload/ale/handlers/gcc.vim	/^let s:pragma_error = '#pragma once in main file'$/;"	v
s:prev_abs	plugged/beacon.nvim/plugin/beacon.vim	/^let s:prev_abs = 0$/;"	v
s:prev_cursor	plugged/beacon.nvim/plugin/beacon.vim	/^let s:prev_cursor = 0$/;"	v
s:pwin_by_tagbar	plugged/tagbar/autoload/tagbar.vim	/^let s:pwin_by_tagbar = 0$/;"	v
s:references_map	plugged/ale/autoload/ale/references.vim	/^let s:references_map = {}$/;"	v
s:rename_map	plugged/ale/autoload/ale/rename.vim	/^let s:rename_map = {}$/;"	v
s:results	plugged/vim-pydocstring/autoload/pydocstring.vim	/^let s:results = []$/;"	v
s:retry_keys	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:retry_keys = ""$/;"	v
s:runtime_loaded_map	plugged/ale/autoload/ale/linter.vim	/^let s:runtime_loaded_map = {}$/;"	v
s:save_cpo	plugged/vim-cursorword/autoload/cursorword.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-cursorword/plugin/cursorword.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-multiple-cursors/plugin/multiple_cursors.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-pydocstring/autoload/pydocstring.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-pydocstring/ftplugin/python/pydocstring.vim	/^let s:save_cpo = &cpo$/;"	v
s:saved_char	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:saved_char = ''$/;"	v
s:saved_keys	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:saved_keys = ""$/;"	v
s:saved_line	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:saved_line = 0$/;"	v
s:saved_linecount	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:saved_linecount = -1$/;"	v
s:script_path	plugged/ale/autoload/ale/gradle.vim	/^let s:script_path = fnamemodify(resolve(expand('<sfile>:p')), ':h')$/;"	v
s:sep	plugged/ale/autoload/ale/c.vim	/^let s:sep = has('win32') ? '\\' : '\/'$/;"	v
s:sep	plugged/ale/autoload/ale/handlers/eslint.vim	/^let s:sep = has('win32') ? '\\' : '\/'$/;"	v
s:sep	plugged/ale/autoload/ale/handlers/solhint.vim	/^let s:sep = has('win32') ? '\\' : '\/'$/;"	v
s:sep	plugged/ale/autoload/ale/python.vim	/^let s:sep = has('win32') ? '\\' : '\/'$/;"	v
s:separator	plugged/ale/ale_linters/terraform/tfsec.vim	/^let s:separator = has('win32') ? '\\' : '\/'$/;"	v
s:settings	plugged/vim-multiple-cursors/plugin/multiple_cursors.vim	/^let s:settings = {$/;"	v
s:settings_if_default	plugged/vim-multiple-cursors/plugin/multiple_cursors.vim	/^let s:settings_if_default = {$/;"	v
s:short_help	plugged/tagbar/autoload/tagbar.vim	/^let s:short_help      = 1$/;"	v
s:should_complete_map	plugged/ale/autoload/ale/completion.vim	/^let s:should_complete_map = {$/;"	v
s:singular_types	plugged/tagbar/autoload/tagbar.vim	/^let s:singular_types = {$/;"	v
s:sorted_items	plugged/ale/autoload/ale/pattern_options.vim	/^let s:sorted_items = []$/;"	v
s:special_keys	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:special_keys = {$/;"	v
s:statusline_in_use	plugged/tagbar/autoload/tagbar.vim	/^let s:statusline_in_use = 0$/;"	v
s:supports_sign_groups	plugged/ale/autoload/ale/sign.vim	/^let s:supports_sign_groups = has('nvim-0.4.2') || has('patch-8.1.614')$/;"	v
s:symbol_map	plugged/ale/autoload/ale/symbol.vim	/^let s:symbol_map = {}$/;"	v
s:syntax_file_exists_cache	plugged/ale/autoload/ale/hover.vim	/^let s:syntax_file_exists_cache = {}$/;"	v
s:temp_dir	plugged/ale/autoload/ale/handlers/haskell.vim	/^let s:temp_dir = fnamemodify(ale#util#Tempname(), ':h')$/;"	v
s:temp_dir	plugged/ale/autoload/ale/path.vim	/^let s:temp_dir = ale#path#Simplify(fnamemodify(ale#util#Tempname(), ':h:h'))$/;"	v
s:temp_regex_prefix	plugged/ale/autoload/ale/handlers/haskell.vim	/^let s:temp_regex_prefix =$/;"	v
s:tempfolder	plugged/minimap.vim/t/search_tests.vim	/^    let s:tempfolder = '\/tmp'$/;"	v
s:tempfolder	plugged/minimap.vim/t/search_tests.vim	/^    let s:tempfolder = fnamemodify(expand('$TEMP'), ':p:h')$/;"	v
s:testfile	plugged/minimap.vim/t/search_tests.vim	/^let s:testfile = expand('%')$/;"	v
s:testview	plugged/minimap.vim/t/search_tests.vim	/^let s:testview = winsaveview()$/;"	v
s:timer	plugged/vim-cursorword/autoload/cursorword.vim	/^  let s:timer = 0$/;"	v
s:timer_args	plugged/ale/autoload/ale/list.vim	/^    let s:timer_args = {}$/;"	v
s:timer_id	plugged/ale/autoload/ale/completion.vim	/^let s:timer_id = -1$/;"	v
s:to_mode	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:to_mode = ''$/;"	v
s:trigger_character_map	plugged/ale/autoload/ale/completion.vim	/^let s:trigger_character_map = {$/;"	v
s:type_init_done	plugged/tagbar/autoload/tagbar.vim	/^let s:type_init_done    = 0$/;"	v
s:uri_handlers	plugged/ale/autoload/ale/uri.vim	/^let s:uri_handlers = {$/;"	v
s:use_word_boundary	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^let s:use_word_boundary = 1$/;"	v
s:version_cache	plugged/ale/ale_linters/java/eclipselsp.vim	/^let s:version_cache = {}$/;"	v
s:version_cache	plugged/ale/autoload/ale/semver.vim	/^let s:version_cache = {}$/;"	v
s:vim_quitting	plugged/tagbar/autoload/tagbar.vim	/^let s:vim_quitting = 0$/;"	v
s:visibility_symbols	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^    let s:visibility_symbols = g:tagbar_visibility_symbols$/;"	v
s:visibility_symbols	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^let s:visibility_symbols = {$/;"	v
s:warnings	plugged/tagbar/autoload/tagbar.vim	/^let s:warnings = {$/;"	v
s:win_info	plugged/minimap.vim/autoload/minimap/vim.vim	/^let s:win_info = {}$/;"	v
s:win_info	plugged/minimap.vim/t/search_tests.vim	/^let s:win_info = { 'winid': 0, 'height': 12, 'mm_height': 3,$/;"	v
s:window_expanded	plugged/tagbar/autoload/tagbar.vim	/^let s:window_expanded   = 0$/;"	v
s:window_pos	plugged/tagbar/autoload/tagbar.vim	/^let s:window_pos = {$/;"	v
s:winrestcmd	plugged/tagbar/autoload/tagbar.vim	/^let s:winrestcmd      = ''$/;"	v
s:word_regex_list	plugged/ale/ale_linters/vim/vint.vim	/^let s:word_regex_list = [$/;"	v
sc.debug	plugged/smoothcursor.nvim/lua/smoothcursor/debug.lua	/^function sc.debug()$/;"	f
sc.debug_callback	plugged/smoothcursor.nvim/lua/smoothcursor/debug.lua	/^function sc.debug_callback(obj, extrainfo, extrafunc)$/;"	f
sc.set_smoothcursor_highlight 	plugged/smoothcursor.nvim/lua/smoothcursor/utils.lua	/^sc.set_smoothcursor_highlight = function()$/;"	f
sc.smoothcursor_delete_signs 	plugged/smoothcursor.nvim/lua/smoothcursor/utils.lua	/^sc.smoothcursor_delete_signs = function()$/;"	f
sc.smoothcursor_fancy_off 	plugged/smoothcursor.nvim/lua/smoothcursor/utils.lua	/^sc.smoothcursor_fancy_off = function()$/;"	f
sc.smoothcursor_fancy_on 	plugged/smoothcursor.nvim/lua/smoothcursor/utils.lua	/^sc.smoothcursor_fancy_on = function()$/;"	f
sc.smoothcursor_fancy_set 	plugged/smoothcursor.nvim/lua/smoothcursor/utils.lua	/^sc.smoothcursor_fancy_set = function(arg)$/;"	f
sc.smoothcursor_fancy_toggle 	plugged/smoothcursor.nvim/lua/smoothcursor/utils.lua	/^sc.smoothcursor_fancy_toggle = function()$/;"	f
sc.smoothcursor_start 	plugged/smoothcursor.nvim/lua/smoothcursor/utils.lua	/^sc.smoothcursor_start = function(init_fire)$/;"	f
sc.smoothcursor_status 	plugged/smoothcursor.nvim/lua/smoothcursor/utils.lua	/^sc.smoothcursor_status = function()$/;"	f
sc.smoothcursor_stop 	plugged/smoothcursor.nvim/lua/smoothcursor/utils.lua	/^sc.smoothcursor_stop = function(erase_signs)$/;"	f
sc.smoothcursor_toggle 	plugged/smoothcursor.nvim/lua/smoothcursor/utils.lua	/^sc.smoothcursor_toggle = function()$/;"	f
sc.with_smoothcursor 	plugged/smoothcursor.nvim/lua/smoothcursor/utils.lua	/^sc.with_smoothcursor = function(func, ...)$/;"	f
sc_default	plugged/smoothcursor.nvim/lua/smoothcursor/callback.lua	/^local function sc_default()$/;"	f
sc_exp	plugged/smoothcursor.nvim/lua/smoothcursor/callback.lua	/^local function sc_exp()$/;"	f
sc_timer:abort	plugged/smoothcursor.nvim/lua/smoothcursor/callback.lua	/^function sc_timer:abort()$/;"	f
sc_timer:post	plugged/smoothcursor.nvim/lua/smoothcursor/callback.lua	/^function sc_timer:post(func)$/;"	f
select_in_visual_mode	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:select_in_visual_mode(region)$/;"	f
select_terminal	plugged/toggleterm.nvim/lua/toggleterm.lua	/^local function select_terminal(opts)$/;"	f
selection_display 	plugged/nvim-window-picker/lua/window-picker/config.lua	/^			selection_display = function(char) -- window id also passed in as second argument$/;"	f
self.reset 	plugged/nvim-window-picker/lua/window-picker/utf-8.lua	/^		self.reset = function(s)$/;"	f
setFolded	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! s:setFolded(folded) abort dict$/;"	f
setUp	plugged/ale/test/python/test_deoplete_source.py	/^    def setUp(self):$/;"	m	class:DeopleteSourceTest
set_buffer_to_prev_pos 	plugged/smoothcursor.nvim/lua/smoothcursor/callback.lua	/^  set_buffer_to_prev_pos = function()$/;"	f
set_file_content	plugged/vim-multiple-cursors/spec/benchmark_spec.rb	/^def set_file_content(string)$/;"	f
set_file_content	plugged/vim-multiple-cursors/spec/multiple_cursors_spec.rb	/^def set_file_content(string)$/;"	f
set_span_color	plugged/minimap.vim/autoload/minimap/vim.vim	/^function! s:set_span_color(set_color, spans, priority, match_id, mmwinid) abort$/;"	f
set_title	plugged/goto-preview/lua/goto-preview/lib.lua	/^local function set_title(buffer)$/;"	f
set_title_pos	plugged/goto-preview/lua/goto-preview/lib.lua	/^local function set_title_pos()$/;"	f
set_usercmds	plugged/hlchunk.nvim/lua/hlchunk/init.lua	/^local function set_usercmds(mods_status)$/;"	f
set_variables	plugged/ale/autoload/ale/fixers/astyle.vim	/^function! s:set_variables() abort$/;"	f
set_variables	plugged/ale/autoload/ale/fixers/clangtidy.vim	/^function! s:set_variables() abort$/;"	f
setup	plugged/smoothcursor.nvim/lua/smoothcursor/init.lua	/^local function setup(args)$/;"	f
setup_autocommands	plugged/toggleterm.nvim/lua/toggleterm.lua	/^local function setup_autocommands(_)$/;"	f
setup_buffer_autocommands	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^local function setup_buffer_autocommands(term)$/;"	f
setup_buffer_mappings	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^local function setup_buffer_mappings(bufnr)$/;"	f
setup_commands	plugged/toggleterm.nvim/lua/toggleterm.lua	/^local function setup_commands()$/;"	f
setup_global_mappings	plugged/toggleterm.nvim/lua/toggleterm.lua	/^local function setup_global_mappings()$/;"	f
setup_keymaps	plugged/tagbar/plugin/tagbar.vim	/^function! s:setup_keymaps() abort$/;"	f
setup_options	plugged/tagbar/plugin/tagbar.vim	/^function! s:setup_options() abort$/;"	f
shade	plugged/toggleterm.nvim/lua/toggleterm/config.lua	/^local function shade(color, factor) return colors.shade_color(color, factor) end$/;"	f
sig_autocmds	plugged/vim-signature/plugin/signature.vim	/^  augroup sig_autocmds$/;"	a
signature#mark#GetList	plugged/vim-signature/autoload/signature/mark.vim	/^function! signature#mark#GetList(mode, scope, ...)                                                                " {{{1$/;"	f
signature#mark#Goto	plugged/vim-signature/autoload/signature/mark.vim	/^function! signature#mark#Goto(dir, loc, mode)                                                                     " {{{1$/;"	f
signature#mark#List	plugged/vim-signature/autoload/signature/mark.vim	/^function! signature#mark#List(scope, ...)                                                                         " {{{1$/;"	f
signature#mark#Purge	plugged/vim-signature/autoload/signature/mark.vim	/^function! signature#mark#Purge(mode)                                                                              " {{{1$/;"	f
signature#mark#Remove	plugged/vim-signature/autoload/signature/mark.vim	/^function! signature#mark#Remove(mark)                                                                             " {{{1$/;"	f
signature#mark#Toggle	plugged/vim-signature/autoload/signature/mark.vim	/^function! signature#mark#Toggle(mark)                                                                             " {{{1$/;"	f
signature#mark#ToggleAtLine	plugged/vim-signature/autoload/signature/mark.vim	/^function! signature#mark#ToggleAtLine()                                                                           " {{{1$/;"	f
signature#marker#Goto	plugged/vim-signature/autoload/signature/marker.vim	/^function! signature#marker#Goto( dir, marker_num, count )                                                         " {{{1$/;"	f
signature#marker#List	plugged/vim-signature/autoload/signature/marker.vim	/^function! signature#marker#List(...)                                                                              " {{{1$/;"	f
signature#marker#Purge	plugged/vim-signature/autoload/signature/marker.vim	/^function! signature#marker#Purge(...)                                                                             " {{{1$/;"	f
signature#marker#Remove	plugged/vim-signature/autoload/signature/marker.vim	/^function! signature#marker#Remove(lnum, marker)                                                                   " {{{1$/;"	f
signature#marker#Toggle	plugged/vim-signature/autoload/signature/marker.vim	/^function! signature#marker#Toggle(marker)                                                                         " {{{1$/;"	f
signature#sign#GetGitGutterHLGroup	plugged/vim-signature/autoload/signature/sign.vim	/^function! signature#sign#GetGitGutterHLGroup(lnum)                                                                 "{{{1$/;"	f
signature#sign#GetSignifyHLGroup	plugged/vim-signature/autoload/signature/sign.vim	/^function! signature#sign#GetSignifyHLGroup(lnum)                                                                   "{{{1$/;"	f
signature#sign#Place	plugged/vim-signature/autoload/signature/sign.vim	/^function! signature#sign#Place(sign, lnum)                                                                         "{{{1$/;"	f
signature#sign#Refresh	plugged/vim-signature/autoload/signature/sign.vim	/^function! signature#sign#Refresh(...)                                                                              "{{{1$/;"	f
signature#sign#Remove	plugged/vim-signature/autoload/signature/sign.vim	/^function! signature#sign#Remove(sign, lnum)                                                                        "{{{1$/;"	f
signature#sign#ToggleDummy	plugged/vim-signature/autoload/signature/sign.vim	/^function! signature#sign#ToggleDummy(...)                                                                          "{{{1$/;"	f
signature#sign#Unplace	plugged/vim-signature/autoload/signature/sign.vim	/^function! signature#sign#Unplace(lnum)                                                                             "{{{1$/;"	f
signature#utils#GetChar	plugged/vim-signature/autoload/signature/utils.vim	/^function! signature#utils#GetChar(string, pos)                                                                    " {{{1$/;"	f
signature#utils#Input	plugged/vim-signature/autoload/signature/utils.vim	/^function! signature#utils#Input()                                                                                 " {{{1$/;"	f
signature#utils#IsValidMark	plugged/vim-signature/autoload/signature/utils.vim	/^function! signature#utils#IsValidMark(mark)                                                                       " {{{1$/;"	f
signature#utils#IsValidMarker	plugged/vim-signature/autoload/signature/utils.vim	/^function! signature#utils#IsValidMarker(marker)                                                                   " {{{1$/;"	f
signature#utils#Maps	plugged/vim-signature/autoload/signature/utils.vim	/^function! signature#utils#Maps(mode)                                                                              " {{{1$/;"	f
signature#utils#NumericSort	plugged/vim-signature/autoload/signature/utils.vim	/^function! signature#utils#NumericSort(x, y)                                                                       " {{{1$/;"	f
signature#utils#Remove	plugged/vim-signature/autoload/signature/utils.vim	/^function! signature#utils#Remove(lnum)                                                                            " {{{1$/;"	f
signature#utils#Set	plugged/vim-signature/autoload/signature/utils.vim	/^function! signature#utils#Set(var, value, ...)                                                                    " {{{1$/;"	f
signature#utils#SetupHighlightGroups	plugged/vim-signature/autoload/signature/utils.vim	/^function! signature#utils#SetupHighlightGroups()                                                                  " {{{1$/;"	f
signature#utils#Toggle	plugged/vim-signature/autoload/signature/utils.vim	/^function! signature#utils#Toggle()                                                                                " {{{1$/;"	f
simple	plugged/nvim-window-picker/lua/window-picker/utf-8.lua	/^	local function simple(func)$/;"	f
size 	plugged/toggleterm.nvim/lua/toggleterm/commandline.lua	/^  size = function() return {} end,$/;"	f
skip_latency_measure	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:skip_latency_measure()$/;"	f
smart_toggle	plugged/toggleterm.nvim/lua/toggleterm.lua	/^local function smart_toggle(size, dir, direction, name)$/;"	f
sortTags	plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! s:sortTags(compare_typeinfo) abort dict$/;"	f
source_buffer_enter_handler	plugged/minimap.vim/autoload/minimap/vim.vim	/^function! s:source_buffer_enter_handler() abort$/;"	f
source_move	plugged/minimap.vim/autoload/minimap/vim.vim	/^function! s:source_move() abort$/;"	f
source_win_enter	plugged/minimap.vim/autoload/minimap/vim.vim	/^function! s:source_win_enter() abort$/;"	f
source_win_scroll	plugged/minimap.vim/autoload/minimap/vim.vim	/^function! s:source_win_scroll() abort$/;"	f
star	plugged/nvim-window-picker/lua/window-picker/utf-8.lua	/^	local function star(func)$/;"	f
start_latency_measure	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:start_latency_measure()$/;"	f
str	plugged/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:str(longsig, full) abort dict$/;"	f
str) return not M.str_is_empty	plugged/toggleterm.nvim/lua/toggleterm/utils.lua	/^    function(str) return not M.str_is_empty(str) end,$/;"	f
strfmt	plugged/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! s:strfmt() abort dict$/;"	f
strfmt	plugged/tagbar/autoload/tagbar/prototypes/pseudotag.vim	/^function! s:strfmt() abort dict$/;"	f
string:at	plugged/hlchunk.nvim/lua/hlchunk/utils/string.lua	/^function string:at(idx, options)$/;"	f
string:firstToUpper	plugged/hlchunk.nvim/lua/hlchunk/utils/string.lua	/^function string:firstToUpper()$/;"	f
string:split	plugged/hlchunk.nvim/lua/hlchunk/utils/string.lua	/^function string:split(sep)$/;"	f
string:trim	plugged/hlchunk.nvim/lua/hlchunk/utils/string.lua	/^function string:trim()$/;"	f
strpart	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:strpart(s, i, l)$/;"	f
switch_buf 	plugged/smoothcursor.nvim/lua/smoothcursor/callback.lua	/^    switch_buf = function(self)$/;"	f
switch_buf 	plugged/smoothcursor.nvim/lua/smoothcursor/callback.lua	/^  switch_buf = function()$/;"	f
t	plugged/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> t :call ale#preview#OpenSelectionInTab()<CR>$/;"	m
t) set_term_name	plugged/toggleterm.nvim/lua/toggleterm.lua	/^      get_subject_terminal(function(t) set_term_name(opts.args, t) end)$/;"	f
tab_leave_handler	plugged/minimap.vim/autoload/minimap/vim.vim	/^function! s:tab_leave_handler() abort$/;"	f
tagbar#CloseWindow	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#CloseWindow() abort$/;"	f
tagbar#ForceUpdate	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#ForceUpdate() abort$/;"	f
tagbar#GetTagNearLine	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#GetTagNearLine(lnum, ...) abort$/;"	f
tagbar#IsOpen	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#IsOpen() abort$/;"	f
tagbar#OpenWindow	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#OpenWindow(...) abort$/;"	f
tagbar#RestoreSession	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#RestoreSession() abort$/;"	f
tagbar#SetFoldLevel	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#SetFoldLevel(level, force) abort$/;"	f
tagbar#StopAutoUpdate	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#StopAutoUpdate() abort$/;"	f
tagbar#ToggleWindow	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#ToggleWindow(...) abort$/;"	f
tagbar#Update	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#Update() abort$/;"	f
tagbar#autoopen	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#autoopen(...) abort$/;"	f
tagbar#currentfile	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#currentfile() abort$/;"	f
tagbar#currenttag	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#currenttag(fmt, default, ...) abort$/;"	f
tagbar#currenttagtype	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#currenttagtype(fmt, default) abort$/;"	f
tagbar#debug#enabled	plugged/tagbar/autoload/tagbar/debug.vim	/^function! tagbar#debug#enabled() abort$/;"	f
tagbar#debug#log	plugged/tagbar/autoload/tagbar/debug.vim	/^function! tagbar#debug#log(msg) abort$/;"	f
tagbar#debug#log_ctags_output	plugged/tagbar/autoload/tagbar/debug.vim	/^function! tagbar#debug#log_ctags_output(output) abort$/;"	f
tagbar#debug#start_debug	plugged/tagbar/autoload/tagbar/debug.vim	/^function! tagbar#debug#start_debug(...) abort$/;"	f
tagbar#debug#stop_debug	plugged/tagbar/autoload/tagbar/debug.vim	/^function! tagbar#debug#stop_debug() abort$/;"	f
tagbar#gettypeconfig	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#gettypeconfig(type) abort$/;"	f
tagbar#getusertypes	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#getusertypes() abort$/;"	f
tagbar#highlighttag	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#highlighttag(openfolds, force) abort$/;"	f
tagbar#inspect	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#inspect(var) abort$/;"	f
tagbar#is_paused	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#is_paused() abort$/;"	f
tagbar#jump	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#jump() abort$/;"	f
tagbar#jumpToNearbyTag	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#jumpToNearbyTag(direction, ...) abort$/;"	f
tagbar#printfileinfo	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#printfileinfo() abort$/;"	f
tagbar#prototypes#basetag#new	plugged/tagbar/autoload/tagbar/prototypes/basetag.vim	/^function! tagbar#prototypes#basetag#new(name) abort$/;"	f
tagbar#prototypes#fileinfo#new	plugged/tagbar/autoload/tagbar/prototypes/fileinfo.vim	/^function! tagbar#prototypes#fileinfo#new(fname, ftype, typeinfo) abort$/;"	f
tagbar#prototypes#kindheadertag#new	plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! tagbar#prototypes#kindheadertag#new(name) abort$/;"	f
tagbar#prototypes#normaltag#new	plugged/tagbar/autoload/tagbar/prototypes/normaltag.vim	/^function! tagbar#prototypes#normaltag#new(name) abort$/;"	f
tagbar#prototypes#pseudotag#new	plugged/tagbar/autoload/tagbar/prototypes/pseudotag.vim	/^function! tagbar#prototypes#pseudotag#new(name) abort$/;"	f
tagbar#prototypes#splittag#new	plugged/tagbar/autoload/tagbar/prototypes/splittag.vim	/^function! tagbar#prototypes#splittag#new(name) abort$/;"	f
tagbar#prototypes#typeinfo#new	plugged/tagbar/autoload/tagbar/prototypes/typeinfo.vim	/^function! tagbar#prototypes#typeinfo#new(...) abort$/;"	f
tagbar#sorting#sort	plugged/tagbar/autoload/tagbar/sorting.vim	/^function! tagbar#sorting#sort(tags, compareby, compare_typeinfo) abort$/;"	f
tagbar#state#get_current_file	plugged/tagbar/autoload/tagbar/state.vim	/^function! tagbar#state#get_current_file(force_current) abort$/;"	f
tagbar#state#set_current_file	plugged/tagbar/autoload/tagbar/state.vim	/^function! tagbar#state#set_current_file(fileinfo) abort$/;"	f
tagbar#state#set_paused	plugged/tagbar/autoload/tagbar/state.vim	/^function! tagbar#state#set_paused() abort$/;"	f
tagbar#toggle_pause	plugged/tagbar/autoload/tagbar.vim	/^function! tagbar#toggle_pause() abort$/;"	f
tagbar#types#ctags#init	plugged/tagbar/autoload/tagbar/types/ctags.vim	/^function! tagbar#types#ctags#init(supported_types) abort$/;"	f
tagbar#types#uctags#init	plugged/tagbar/autoload/tagbar/types/uctags.vim	/^function! tagbar#types#uctags#init(supported_types) abort$/;"	f
term_has_windows	plugged/toggleterm.nvim/tests/terminal_spec.lua	/^local function term_has_windows(term)$/;"	f
test_async_event	plugged/ale/test/python/test_deoplete_source.py	/^    def test_async_event(self):$/;"	m	class:DeopleteSourceTest
test_attributes	plugged/ale/test/python/test_deoplete_source.py	/^    def test_attributes(self):$/;"	m	class:DeopleteSourceTest
test_complete_position	plugged/ale/test/python/test_deoplete_source.py	/^    def test_complete_position(self):$/;"	m	class:DeopleteSourceTest
test_request_completion_results	plugged/ale/test/python/test_deoplete_source.py	/^    def test_request_completion_results(self):$/;"	m	class:DeopleteSourceTest
test_request_completion_results_from_buffer_without_providers	plugged/ale/test/python/test_deoplete_source.py	/^    def test_request_completion_results_from_buffer_without_providers(self):$/;"	m	class:DeopleteSourceTest
tests	plugged/ale/run-tests.bat	/^if not "%1"=="" set tests=%1$/;"	v
tests	plugged/ale/run-tests.bat	/^set tests=test\/*.vader test\/*\/*.vader test\/*\/*\/*.vader test\/*\/*\/*\/*.vader$/;"	v
to_rgb	plugged/toggleterm.nvim/lua/toggleterm/colors.lua	/^local function to_rgb(color)$/;"	f
toggleFold	plugged/tagbar/autoload/tagbar/prototypes/kindheadertag.vim	/^function! s:toggleFold(fileinfo) abort dict$/;"	f
toggle_nth_term	plugged/toggleterm.nvim/lua/toggleterm.lua	/^local function toggle_nth_term(num, size, dir, direction, name)$/;"	f
toggle_window	plugged/minimap.vim/autoload/minimap/vim.vim	/^function! s:toggle_window() abort$/;"	f
toggleterm.setup({ shell 	plugged/toggleterm.nvim/tests/terminal_spec.lua	/^      toggleterm.setup({ shell = function() return vim.o.shell end })$/;"	f
tries	plugged/ale/run-tests.bat	/^set tries=0$/;"	v
tsserver 	lua/plugins/example.lua	/^        tsserver = function(_, opts)$/;"	f
type	plugged/vim-multiple-cursors/spec/benchmark_spec.rb	/^def type(string)$/;"	f
type	plugged/vim-multiple-cursors/spec/multiple_cursors_spec.rb	/^def type(string)$/;"	f
type 	lua/config/lazy.lua	/^  type = "default", -- define cursor movement calculate function, "default" or "exp" (exponential).$/;"	f
unplace_signs	plugged/smoothcursor.nvim/lua/smoothcursor/callback.lua	/^local function unplace_signs(with_timer_stop)$/;"	f
update_highlight	plugged/minimap.vim/autoload/minimap/vim.vim	/^function! s:update_highlight(...) abort$/;"	f
update_visual_markers	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:update_visual_markers(region)$/;"	f
usage	plugged/minimap.vim/bin/minimap_generator.sh	/^usage() { echo "Usage: $(basename "$0") <hscale> <vscale> <padding> [file]" >&2; }$/;"	f
utf8char	plugged/nvim-window-picker/lua/window-picker/utf-8.lua	/^local function utf8char(unicode)$/;"	f
utf8charbytes	plugged/nvim-window-picker/lua/window-picker/utf-8.lua	/^local function utf8charbytes(s, i)$/;"	f
utf8find	plugged/nvim-window-picker/lua/window-picker/utf-8.lua	/^local function utf8find(str, regex, init, plain)$/;"	f
utf8gensub	plugged/nvim-window-picker/lua/window-picker/utf-8.lua	/^local function utf8gensub(str, sub_len)$/;"	f
utf8gmatch	plugged/nvim-window-picker/lua/window-picker/utf-8.lua	/^local function utf8gmatch(str, regex, all)$/;"	f
utf8gsub	plugged/nvim-window-picker/lua/window-picker/utf-8.lua	/^local function utf8gsub(str, regex, repl, limit)$/;"	f
utf8len	plugged/nvim-window-picker/lua/window-picker/utf-8.lua	/^local function utf8len(s)$/;"	f
utf8lower 	plugged/nvim-window-picker/lua/window-picker/utf-8.lua	/^local function utf8lower (s)$/;"	f
utf8match	plugged/nvim-window-picker/lua/window-picker/utf-8.lua	/^local function utf8match(str, regex, init)$/;"	f
utf8replace 	plugged/nvim-window-picker/lua/window-picker/utf-8.lua	/^local function utf8replace (s, mapping)$/;"	f
utf8reverse	plugged/nvim-window-picker/lua/window-picker/utf-8.lua	/^local function utf8reverse(s)$/;"	f
utf8sub	plugged/nvim-window-picker/lua/window-picker/utf-8.lua	/^local function utf8sub(s, i, j)$/;"	f
utf8subWithBytes 	plugged/nvim-window-picker/lua/window-picker/utf-8.lua	/^local function utf8subWithBytes (s, i, j, sb)$/;"	f
utf8unicode 	plugged/nvim-window-picker/lua/window-picker/utf-8.lua	/^utf8unicode = function(str, i, j, byte_pos)$/;"	f
utf8upper 	plugged/nvim-window-picker/lua/window-picker/utf-8.lua	/^local function utf8upper (s)$/;"	f
utils.dump 	plugged/flare.nvim/lua/flare/utils/init.lua	/^utils.dump = function(val)$/;"	f
utils.empty_str 	plugged/flare.nvim/lua/flare/utils/init.lua	/^utils.empty_str = function(length)$/;"	f
utils.filetype 	plugged/flare.nvim/lua/flare/utils/init.lua	/^utils.filetype = function()$/;"	f
utils.get_current_line 	plugged/flare.nvim/lua/flare/utils/init.lua	/^utils.get_current_line = function()$/;"	f
utils.is_floating_window 	plugged/flare.nvim/lua/flare/utils/init.lua	/^utils.is_floating_window = function(window)$/;"	f
utils.table_contains 	plugged/flare.nvim/lua/flare/utils/init.lua	/^utils.table_contains = function(tbl, val)$/;"	f
utils.win_get_cursor 	plugged/flare.nvim/lua/flare/utils/init.lua	/^utils.win_get_cursor = function(window)$/;"	f
v	plugged/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> v <NOP>$/;"	m
value_tmp.bg 	plugged/hlchunk.nvim/lua/hlchunk/base_mod.lua	/^                value_tmp.bg = type(value.bg) == "function" and value.bg() or value.bg$/;"	f
value_tmp.fg 	plugged/hlchunk.nvim/lua/hlchunk/base_mod.lua	/^                value_tmp.fg = type(value.fg) == "function" and value.fg() or value.fg$/;"	f
vim.schedule(function() vim.notify(msg, level, { title 	plugged/toggleterm.nvim/lua/toggleterm/utils.lua	/^  vim.schedule(function() vim.notify(msg, level, { title = "Toggleterm" }) end)$/;"	f
vim.ui.input({ prompt 	plugged/toggleterm.nvim/lua/toggleterm.lua	/^  vim.ui.input({ prompt = "Please set a name for the terminal" }, function(name)$/;"	f
vscale	plugged/minimap.vim/bin/minimap_generator.bat	/^set vscale=%2$/;"	v
wait_for_user_input	plugged/vim-multiple-cursors/autoload/multiple_cursors.vim	/^function! s:wait_for_user_input(mode)$/;"	f
warning	plugged/tagbar/autoload/tagbar.vim	/^function! s:warning(msg) abort$/;"	f
when resolving size", function	plugged/toggleterm.nvim/tests/terminal_spec.lua	/^    it("should evaluate custom functions when resolving size", function()$/;"	f
win_enter_handler	plugged/minimap.vim/autoload/minimap/vim.vim	/^function! s:win_enter_handler() abort$/;"	f
with_cr	plugged/toggleterm.nvim/lua/toggleterm/terminal.lua	/^local function with_cr(...)$/;"	f
wrap	plugged/vim-surround/plugin/surround.vim	/^function! s:wrap(string,char,type,removed,special)$/;"	f
wrapreg	plugged/vim-surround/plugin/surround.vim	/^function! s:wrapreg(reg,char,removed,special)$/;"	f
yS	plugged/vim-surround/plugin/surround.vim	/^  nmap yS  <Plug>YSurround$/;"	m
ySS	plugged/vim-surround/plugin/surround.vim	/^  nmap ySS <Plug>YSsurround$/;"	m
ySs	plugged/vim-surround/plugin/surround.vim	/^  nmap ySs <Plug>YSsurround$/;"	m
ys	plugged/vim-surround/plugin/surround.vim	/^  nmap ys  <Plug>Ysurround$/;"	m
yss	plugged/vim-surround/plugin/surround.vim	/^  nmap yss <Plug>Yssurround$/;"	m
